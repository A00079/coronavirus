{"version":3,"sources":["components/navbar/NavBar.js","store/actions/darkModeActions.js","components/home/LiveStats.js","components/home/UpdateLiveStats.js","components/home/StateTable.js","store/actions/statActions.js","components/home/minigraphs/ActiveMiniGraph.js","components/home/minigraphs/ConfirmedMiniGraph.js","components/home/minigraphs/RecoveredMiniGraph.js","components/home/minigraphs/DeceasedMiniGraph.js","components/home/TestedSamples.js","components/home/LatestUpdates.js","components/home/geographics/LinearGradient.js","components/home/geographics/StateStats.js","components/home/geographics/IndiaMap.js","components/home/tabletoggler.js","components/home/Home.js","components/demographics/BoxMessage.js","components/demographics/PatientHeatMap.js","components/demographics/SelectOptions.js","store/actions/patientActions.js","components/demographics/Demographics.js","components/deep-dive/DeepDive.js","components/home/StateInfo.js","store/actions/stateInfoActions.js","components/App.js","serviceWorker.js","store/reducers/patientReducer.js","store/reducers/statsReducer.js","store/reducers/darkModeReducer.js","store/reducers/stateInfoReducer.js","store/reducers/rootReducer.js","index.js"],"names":["connect","state","modeState","darkMode","hasmode","dispatch","setModeProp","mode","type","payload","darkModeAction","props","useState","JSON","parse","localStorage","getItem","setMode","useEffect","setItem","stringify","className","to","onClick","hoverColor","badgeColor","style","fontSize","name","textColor","fontWeight","count","activegraph","todayCount","UpdateLiveStats","convertedTime","lastUpdatedTime","isConfirmed","isRecover","searchValue","setSearchValue","helperVar","helperVar2","filteredStates","stateData","filter","stateName","push","deltaconfirmed","deltarecovered","toLowerCase","includes","i","console","log","id","placeholder","value","onChange","e","map","data","index","key","confirmed","textConfirmed","active","textActive","recovered","textRecovered","deaths","deltadeaths","textDeceased","getLiveStatsAction","statsResp","axios","get","factoidsResp","updatesResp","headers","all","then","spread","allDataStats","allDataFactoids","allDataUpdates","statewise","slice","cases_time_series","tested","factoids","news","catch","err","timeseries","stats","timeSeries","getLiveStats","setTimeseries","graphElement1","useRef","length","graphData","useCallback","svg2","d3","current","width","height","x","domain","d","Date","range","y1","path2","append","datum","attr","y","curve","totalLength2","node","getTotalLength","transition","duration","animate","selectAll","enter","on","target","animationDelay","ref","viewBox","preserveAspectRatio","svg1","path1","totalLength1","svg3","path3","totalLength3","svg4","path4","totalLength4","samples","lastElement","last","Obj","bar","totalindividualstested","getLatestUpdates","latestUpdates","test","setLatestUpdates","item","padding","borderRadius","fontStyle","title","excerpt","publishedDateTime","toDateString","LinearGradient","boxStyle","margin","gradientStyle","backgroundImage","fromColor","toColor","min","max","StateStats","window","innerWidth","textAlign","deceased","stateCode","INDIA_TOPO_JSON","require","PROJECTION_CONFIG","scale","center","COLOR_RANGE","getRandomInt","parseInt","Math","random","geographyStyle","default","outline","hover","fill","pressed","states","statesData","tooltipContent","setTooltipContent","setData","setConfirmed","setActive","setRecovered","setDeceased","setStateCode","setStateName","setLastUpdatedTime","allStatesData","statecode","lastupdatedtime","toLocaleString","gradientData","reduce","colorScale","scaleQuantile","onMouseEnter","geo","properties","onMouseLeave","projectionConfig","projection","data-tip","geography","geographies","find","s","rsmKey","$","this","toggleClass","next","liveStatsData","liveStats","timeSeriesData","BoxMessage","setMessageBox","useLocalStorage","box","setBox","patientData","patient","getPatientData","isChecked","setIsChecked","defaultChecked","htmlFor","gender","lineHeight","patientnumber","getStatesData","getStates","resp","stateSelect","setStateSelect","event","Value","disabled","sort","getPatient","raw_data","reverse","DeepDive","stateInfo","statesInfoData","districtInfo","districtData","zoneInfo","zoneData","Axios","getDistrictData","getZoneData","zones","impData","setImpData","districts","setDistrictData","match","params","statename","findIndex","districtIndex","districtItem","district","aria-label","dist","delta","exact","path","component","Home","Demographics","StateInfo","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","initialState","fetchingData","errorPatientData","fetchingStates","errorFetchingStates","patientReducer","action","fetchingStats","errorFetchingStats","statsReducer","initial","darkModeReducer","stateInfoReducer","combineReducers","middlewares","thunk","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6e3d58ee.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { darkModeAction } from '../../store/actions/darkModeActions';\r\n\r\nconst getInitialMode = () => {\r\n  const saevdMode = JSON.parse(localStorage.getItem('dark-mode'))\r\n  return saevdMode || false\r\n}\r\n\r\nconst NavBar = (props) => {\r\n  const [mode, setMode] = useState(getInitialMode())\r\n\r\nuseEffect(() => {\r\n    props.setModeProp(mode)\r\n    localStorage.setItem('dark-mode', JSON.stringify(mode))\r\n}, [mode])\r\n  \r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ul className={`nav justify-content-center ${props.modeState === false ? \"grey lighten-4\" : 'dark-body'} py-4`}>\r\n        <li className=\"nav-item\">\r\n          <NavLink className=\"nav-link w3-animate-opacity\" to=\"/\">\r\n            Home\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"nav-item w3-animate-opacity\">\r\n          <NavLink className=\"nav-link\" to=\"/demographics\">\r\n            Demographics\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"nav-item w3-animate-opacity\">\r\n          <NavLink className=\"nav-link\" to=\"/deep-dive\">\r\n            Deep Dive\r\n          </NavLink>\r\n        </li>\r\n        <li\r\n          onClick={() => setMode(!mode)}\r\n          className=\"dark-mode nav-item w3-animate-opacity\">\r\n          <NavLink className=\"nav-link\" to=\"#\">\r\n            {mode === false ?\r\n              <i className=\"far fa-moon\"></i>\r\n              : <i className=\"far fa-sun\"></i>}\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    modeState: state.darkMode.hasmode\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setModeProp: (mode) => dispatch(darkModeAction(mode))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\r\n","// Darkmode Action\r\nexport const SET_MODE = \"SET_MODE\";\r\n\r\n\r\nexport const darkModeAction = (mode) => {\r\n    return {\r\n        type: SET_MODE,\r\n        payload: mode\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./livestats.css\";\r\nimport { connect } from 'react-redux';\r\n\r\nconst LiveStats = (props) => {\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"card mt-4 view overlay\">\r\n        <div\r\n          className={`card-body card-settings  ${props.modeState && 'dark-body'} rgba-${props.hoverColor}-slight`}\r\n        >\r\n          <div className=\"container row\">\r\n            <h3\r\n              className={`card-title ${props.badgeColor}`}\r\n              style={{ fontSize: \"20px\" }}\r\n            >\r\n              {props.name}\r\n            </h3>\r\n            <h3\r\n              className={`${props.textColor} ml-auto`}\r\n              style={{ fontSize: \"20px\", fontWeight: 700 }}\r\n            >\r\n              {props.count}\r\n            </h3>\r\n          </div>\r\n          {props.activegraph}\r\n\r\n          {/* CR for new delta cases */}\r\n          \r\n          {props.todayCount <= 0 ? (\r\n            <p className={`${props.textColor} d-flex justify-content-start `}>No new cases yet</p>\r\n          ) : (\r\n              <div className=\"container row\">\r\n                <h3\r\n                  className={`${props.textColor} card-title`}\r\n                  style={{ fontSize: \"20px\" }}\r\n                >\r\n                  <i className=\"far fa-arrow-alt-circle-up cc_pointer text-small\"></i>\r\n                </h3>\r\n\r\n                <h3\r\n                  className={`${props.textColor} ml-auto`}\r\n                  style={{ fontSize: \"20px\", fontWeight: 700 }}\r\n                >\r\n                  [+{props.todayCount}]\r\n              </h3>\r\n              </div>\r\n            )}\r\n\r\n        </div>\r\n        <div\r\n          className={`mask flex-center rgba-${props.hoverColor}-slight`}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    modeState: state.darkMode.hasmode\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(LiveStats);\r\n","import React from \"react\";\r\nimport \"../../index.css\";\r\n\r\nconst UpdateLiveStats = (props) => {\r\n  let convertedTime;\r\n  convertedTime = (props.lastUpdatedTime);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p className=\"text-muted updatedat rgba-green-slight\">\r\n          Updated AT {convertedTime}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateLiveStats;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './statetable.css';\r\nimport { connect } from 'react-redux';\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nconst StateTable = (props) => {\r\n\tconst [searchValue, setSearchValue] = useState('');\r\n\r\n\tlet helperVar = [];\r\n\tlet helperVar2 = [];\r\n\t//state search filter\r\n\tlet filteredStates = props.stateData.filter((stateName) => {\r\n\t\thelperVar.push(stateName.deltaconfirmed);\r\n\t\thelperVar2.push(stateName.deltarecovered);\r\n\t\treturn stateName.state.toLowerCase().includes(searchValue.toLowerCase());\r\n\t});\r\n\r\n\t// ==============================================================================\r\n\t// labels setter and unsetter depending upon if there is any case for current date\r\n\tvar isConfirmed;\r\n\r\n\tfor (var i in helperVar) {\r\n\t\tif (helperVar[i] > 60) {\r\n\t\t\tisConfirmed = 'activate';\r\n\t\t} else {\r\n\t\t}\r\n\t}\r\n\r\n\tvar isRecover;\r\n\t// eslint-disable-next-line no-redeclare\r\n\tfor (var i in helperVar2) {\r\n\t\tif (helperVar2[i] > 35) {\r\n\t\t\tisRecover = 'activate';\r\n\t\t} else {\r\n\t\t}\r\n\t}\r\n\t// =============================================================================\r\n\r\n\tconsole.log();\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"row before-table-row mt-3\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName={`form-control col-sm-3 ${props.modeState && 'dark-body'}`}\r\n\t\t\t\t\tid=\"tableSearch\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"Search State\"\r\n\t\t\t\t\tvalue={searchValue}\r\n\t\t\t\t\tonChange={(e) => setSearchValue(e)}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t{isConfirmed && (\r\n\t\t\t\t\t<div className=\"label ml-3\">\r\n\t\t\t\t\t\t<div className=\"box rgba-red-slight text-danger\">Today's High Infection</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t{isRecover && (\r\n\t\t\t\t\t<div className=\"label ml-3\">\r\n\t\t\t\t\t\t<div className=\"box rgba-green-slight text-success\">Good Recoveries</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\r\n\t\t\t<table className=\"table\">\r\n\t\t\t\t<thead className=\"thead-dark\">\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>States/UT</th>\r\n\t\t\t\t\t\t<th className=\"confirmed\"></th>\r\n\t\t\t\t\t\t<th className=\"active\"></th>\r\n\t\t\t\t\t\t<th className=\"recovered\"></th>\r\n\t\t\t\t\t\t<th className=\"deceased\"></th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{filteredStates.map((data, index) => (\r\n\t\t\t\t\t\t<tr key={index} >\r\n\t\t\t\t\t\t\t{/* <Link to={`state/${data.statecode}`}> */}\r\n\t\t\t\t\t\t\t<td className={`${props.modeState && 'dark-table'} `}>{data.state}</td>\r\n\t\t\t\t\t\t\t<td className={`${data.deltaconfirmed > 60 ? `rgba-red-slight` : ''} ${props.modeState && 'dark-table'}`}>\r\n\t\t\t\t\t\t\t\t{data.confirmed}\r\n\t\t\t\t\t\t\t\t{data.deltaconfirmed <= 0 ? (\r\n\t\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className={`far fa-arrow-alt-circle-up cc_pointer ${props.textConfirmed}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{data.deltaconfirmed}\r\n\t\t\t\t\t\t\t\t\t\t\t</i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td className={`${props.modeState && 'dark-table'} `}>\r\n\t\t\t\t\t\t\t\t{data.active}\r\n\t\t\t\t\t\t\t\t{data.deltaconfirmed <= 0 ? (\r\n\t\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className={`far fa-arrow-alt-circle-up cc_pointer ${props.textActive}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{data.deltaconfirmed}\r\n\t\t\t\t\t\t\t\t\t\t\t</i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td className={`${data.deltarecovered > 35 ? `rgba-green-slight` : ''} ${props.modeState && 'dark-table'}`}>\r\n\t\t\t\t\t\t\t\t{data.recovered}\r\n\t\t\t\t\t\t\t\t{data.deltarecovered <= 0 ? (\r\n\t\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className={`far fa-arrow-alt-circle-up cc_pointer ${props.textRecovered}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{data.deltarecovered}\r\n\t\t\t\t\t\t\t\t\t\t\t</i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td className={`${props.modeState && 'dark-table'} `}>\r\n\t\t\t\t\t\t\t\t{data.deaths}\r\n\t\t\t\t\t\t\t\t{data.deltadeaths <= 0 ? (\r\n\t\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className={`far fa-arrow-alt-circle-up cc_pointer ${props.textDeceased}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{data.deltadeaths}\r\n\t\t\t\t\t\t\t\t\t\t\t</i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tmodeState: state.darkMode.hasmode\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps)(StateTable);\r\n","import axios from \"axios\";\r\n\r\nexport const GET_LIVE_STATS = \"GET_LIVE_STATS\";\r\nexport const ERROR_LIVE_STATS = \"ERROR_LIVE_STATS\";\r\nexport const FETCHING_LIVE_STATS = \"FETCHING_LIVE_STATS\";\r\nexport const GET_STATES_DATA = \"GET_STATES_DATA\";\r\nexport const GET_TIME_SERIES = \"GET_TIME_SERIES\";\r\nexport const GET_TEST_SAMPLES = \"GET_TEST_SAMPLES\";\r\nexport const GET_FACTOIDS = \"GET_FACTOIDS\";\r\nexport const GET_UPDATES = \"GET_UPDATES\";\r\n\r\n\r\n\r\n\r\nexport const getLiveStatsAction = () => {\r\n  return (dispatch) => {\r\n    dispatch({ type: FETCHING_LIVE_STATS });\r\n    const statsRequest = \"https://api.covid19india.org/data.json\";\r\n    const factoidsRequest = \"https://api.covid19india.org/website_data.json\";\r\n    const updatesRequest = \"https://api.smartable.ai/coronavirus/news/IN\";\r\n\r\n    const statsResp = axios.get(statsRequest);\r\n    const factoidsResp = axios.get(factoidsRequest);\r\n    const updatesResp = axios.get(updatesRequest,{ headers : { \"Subscription-Key\" : \"2524213011294a6bb546d7cc09eab623\" }});\r\n\r\n\r\n    axios\r\n      .all([statsResp, factoidsResp, updatesResp])\r\n      .then(\r\n        axios.spread((...allData) => {\r\n          const allDataStats = allData[0];\r\n          const allDataFactoids = allData[1];\r\n          const allDataUpdates = allData[2];\r\n          dispatch({\r\n            type: GET_LIVE_STATS,\r\n            payload: allDataStats.data.statewise[0],\r\n          });\r\n          dispatch({\r\n            type: GET_STATES_DATA,\r\n            payload: allDataStats.data.statewise.slice(1, -1),\r\n          });\r\n          dispatch({\r\n            type: GET_TIME_SERIES,\r\n            payload: allDataStats.data.cases_time_series,\r\n          });\r\n          dispatch({\r\n            type: GET_TEST_SAMPLES,\r\n            payload: allDataStats.data.tested,\r\n          });\r\n          dispatch({\r\n            type: GET_FACTOIDS,\r\n            payload: allDataFactoids.data.factoids,\r\n          });\r\n          dispatch({\r\n            type: GET_UPDATES,\r\n            payload: allDataUpdates.data.news,\r\n          });\r\n        })\r\n      )\r\n      .catch((err) => {\r\n        console.log(err);\r\n        dispatch({ type: ERROR_LIVE_STATS, payload: \"Error. Try again\" });\r\n      });\r\n  };\r\n};\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { connect } from \"react-redux\";\r\nimport { getLiveStatsAction } from \"../../../store/actions/statActions\";\r\n\r\nconst ActiveMiniGraph = (props) => {\r\n  const [timeseries, setTimeseries] = useState([]);\r\n  const graphElement1 = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (props.timeseries.length > 1) {\r\n      setTimeseries(props.timeseries.slice(props.timeseries.length - 25));\r\n    }\r\n  }, [props.timeseries]);\r\n\r\n  const graphData = useCallback(\r\n    (timeseries) => {\r\n      if (timeseries.length <= 1) return 0;\r\n      const data = timeseries;\r\n      const svg2 = d3.select(graphElement1.current);\r\n      const margin = { top: 20, right: 10, bottom: 30, left: 0 };\r\n      const width = 100 - margin.left - margin.right;\r\n      const height = 100 - margin.top - margin.bottom;\r\n\r\n      const x = d3\r\n        .scaleTime()\r\n        .domain(\r\n          d3.extent(data, function (d) {\r\n            return new Date(d[\"date\"] + \"2020\");\r\n          })\r\n        )\r\n        .range([0, width]);\r\n\r\n      const y1 = d3\r\n        .scaleLinear()\r\n        .domain([\r\n          0,\r\n          d3.max(data, function (d) {\r\n            return +d[\"dailyconfirmed\"];\r\n          }),\r\n        ])\r\n        .range([height, 0]);\r\n\r\n      const path2 = svg2\r\n        .append(\"path\")\r\n        .datum(data)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\"stroke\", \"#007bff99\")\r\n        .attr(\"stroke-width\", 2)\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\r\n          \"d\",\r\n          d3\r\n            .line()\r\n            .x(function (d) {\r\n              return x(new Date(d[\"date\"] + \"2020\"));\r\n            })\r\n            .y(function (d, i) {\r\n              if (i === 0) {\r\n                return y1(\r\n                  d[\"dailyconfirmed\"] - d[\"dailyrecovered\"] - d[\"dailydeceased\"]\r\n                );\r\n              } else {\r\n                return y1(\r\n                  d[\"dailyconfirmed\"] - d[\"dailyrecovered\"] - d[\"dailydeceased\"]\r\n                );\r\n              }\r\n            })\r\n            .curve(d3.curveCardinal)\r\n        );\r\n\r\n      const totalLength2 = path2.node().getTotalLength();\r\n      path2\r\n        .attr(\"stroke-dasharray\", totalLength2 + \" \" + totalLength2)\r\n        .attr(\"stroke-dashoffset\", totalLength2)\r\n        .transition()\r\n        .duration(props.animate ? 2000 : 0)\r\n        .attr(\"stroke-dashoffset\", 0);\r\n\r\n      svg2\r\n        .selectAll(\".dot\")\r\n        .data(data.slice(data.length - 1))\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"fill\", \"#007bff\")\r\n        .attr(\"stroke\", \"#007bff\")\r\n        .attr(\"r\", 2)\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\"cx\", function (d) {\r\n          return x(new Date(d[\"date\"] + \"2020\"));\r\n        })\r\n        .attr(\"cy\", function (d) {\r\n          /* const today =\r\n          data[data.length - 1]['dailyconfirmed'] -\r\n          data[data.length - 1]['dailyrecovered'] -\r\n          data[data.length - 1]['dailydeceased'];\r\n        const yesterday =\r\n          data[data.length - 2]['dailyconfirmed'] -\r\n          data[data.length - 2]['dailyrecovered'] -\r\n          data[data.length - 2]['dailydeceased'];*/\r\n          return y1(\r\n            d[\"dailyconfirmed\"] - d[\"dailyrecovered\"] - d[\"dailydeceased\"]\r\n          );\r\n        })\r\n        .on(\"mouseover\", (d) => {\r\n          d3.select(d3.event.target).attr(\"r\", \"5\");\r\n        })\r\n        .on(\"mouseout\", (d) => {\r\n          d3.select(d3.event.target).attr(\"r\", \"2\");\r\n        })\r\n        .style(\"opacity\", 0)\r\n        .transition()\r\n        .duration(props.animate ? 3000 : 0)\r\n        .style(\"opacity\", 1);\r\n    },\r\n    [props.animate]\r\n  );\r\n\r\n  useEffect(() => {\r\n    graphData(timeseries);\r\n  }, [timeseries, graphData]);\r\n\r\n  return (\r\n    <div className=\"Minigraph\">\r\n      <div className=\"svg-parent fadeInUp\" style={{ animationDelay: \"0.6s\" }}>\r\n        <svg\r\n          ref={graphElement1}\r\n          width=\"200\"\r\n          height=\"130\"\r\n          viewBox=\"0 0 100 70\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        className=\"svg-parent is-blue fadeInUp\"\r\n        style={{ animationDelay: \"0.7s\" }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    timeseries: state.stats.timeSeries,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getLiveStats: () => dispatch(getLiveStatsAction()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveMiniGraph);\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { connect } from \"react-redux\";\r\nimport { getLiveStatsAction } from \"../../../store/actions/statActions\";\r\n\r\nconst ConfirmedMiniGraph = (props) => {\r\n  const [timeseries, setTimeseries] = useState([]);\r\n  const graphElement1 = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (props.timeseries.length > 1) {\r\n      setTimeseries(props.timeseries.slice(props.timeseries.length - 25));\r\n    }\r\n  }, [props.timeseries]);\r\n\r\n  const graphData = useCallback(\r\n    (timeseries) => {\r\n      if (timeseries.length <= 1) return 0;\r\n      const data = timeseries;\r\n      const svg1 = d3.select(graphElement1.current);\r\n      const margin = { top: 30, right: 10, bottom: 30, left: 0 };\r\n      const width = 100 - margin.left - margin.right;\r\n      const height = 100 - margin.top - margin.bottom;\r\n\r\n      const x = d3\r\n        .scaleTime()\r\n        .domain(\r\n          d3.extent(data, function (d) {\r\n            return new Date(d[\"date\"] + \"2020\");\r\n          })\r\n        )\r\n        .range([0, width]);\r\n\r\n      const y1 = d3\r\n        .scaleLinear()\r\n        .domain([\r\n          0,\r\n          d3.max(data, function (d) {\r\n            return +d[\"dailyconfirmed\"];\r\n          }),\r\n        ])\r\n        .range([height, 0]);\r\n\r\n      const path1 = svg1\r\n        .append(\"path\")\r\n        .datum(data)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", \"#ff073a99\")\r\n        .attr(\"stroke-width\", 2)\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\r\n          \"d\",\r\n          d3\r\n            .line()\r\n            .x(function (d) {\r\n              return x(new Date(d[\"date\"] + \"2020\"));\r\n            })\r\n            .y(function (d, i) {\r\n              return y1(d[\"dailyconfirmed\"]);\r\n            })\r\n            .curve(d3.curveCardinal)\r\n        );\r\n\r\n      const totalLength1 = path1.node().getTotalLength();\r\n      path1\r\n        .attr(\"stroke-dasharray\", totalLength1 + \" \" + totalLength1)\r\n        .attr(\"stroke-dashoffset\", totalLength1)\r\n        .transition()\r\n        .duration(props.animate ? 2000 : 0)\r\n        .attr(\"stroke-dashoffset\", 0);\r\n\r\n      svg1\r\n        .selectAll(\".dot\")\r\n        .data(data.slice(data.length - 1))\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"fill\", \"#ff073a\")\r\n        .attr(\"stroke\", \"#ff073a\")\r\n        .attr(\"r\", 2)\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\"cx\", function (d) {\r\n          return x(new Date(d[\"date\"] + \"2020\"));\r\n        })\r\n        .attr(\"cy\", function (d) {\r\n          return y1(d[\"dailyconfirmed\"]);\r\n        })\r\n        .on(\"mouseover\", (d) => {\r\n          d3.select(d3.event.target).attr(\"r\", \"5\");\r\n        })\r\n        .on(\"mouseout\", (d) => {\r\n          d3.select(d3.event.target).attr(\"r\", \"2\");\r\n        })\r\n        .style(\"opacity\", 0)\r\n        .transition()\r\n        .duration(props.animate ? 3000 : 0)\r\n        .style(\"opacity\", 1);\r\n    },\r\n    [props.animate]\r\n  );\r\n\r\n  useEffect(() => {\r\n    graphData(timeseries);\r\n  }, [timeseries, graphData]);\r\n\r\n  return (\r\n    <div className=\"Minigraph\">\r\n      <div className=\"svg-parent fadeInUp\" style={{ animationDelay: \"0.6s\" }}>\r\n        <svg\r\n          ref={graphElement1}\r\n          width=\"200\"\r\n          height=\"130\"\r\n          viewBox=\"0 0 100 60\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        className=\"svg-parent is-blue fadeInUp\"\r\n        style={{ animationDelay: \"0.7s\" }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      timeseries: state.stats.timeSeries,\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      getLiveStats: () => dispatch(getLiveStatsAction()),\r\n    };\r\n  };\r\n  \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmedMiniGraph);","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { connect } from \"react-redux\";\r\nimport { getLiveStatsAction } from \"../../../store/actions/statActions\";\r\n\r\n\r\nconst RecoveredMiniGraph = (props) => {\r\n  const [timeseries, setTimeseries] = useState([]);\r\n  const graphElement1 = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (props.timeseries.length > 1) {\r\n      setTimeseries(props.timeseries.slice(props.timeseries.length - 25));\r\n    }\r\n  }, [props.timeseries]);\r\n\r\n  const graphData = useCallback(\r\n    (timeseries) => {\r\n      if (timeseries.length <= 1) return 0;\r\n      const data = timeseries;\r\n      const svg3 = d3.select(graphElement1.current);\r\n      const margin = { top: 20, right: 10, bottom: 30, left: 0 };\r\n      const width = 100 - margin.left - margin.right;\r\n      const height = 100 - margin.top - margin.bottom;\r\n\r\n      const x = d3\r\n        .scaleTime()\r\n        .domain(\r\n          d3.extent(data, function (d) {\r\n            return new Date(d[\"date\"] + \"2020\");\r\n          })\r\n        )\r\n        .range([0, width]);\r\n\r\n      const y1 = d3\r\n        .scaleLinear()\r\n        .domain([\r\n          0,\r\n          d3.max(data, function (d) {\r\n            return +d[\"dailyconfirmed\"];\r\n          }),\r\n        ])\r\n        .range([height, 0]);\r\n\r\n      const path3 = svg3\r\n        .append(\"path\")\r\n        .datum(data)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", \"#28a74599\")\r\n        .attr(\"stroke-width\", 2)\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\r\n          \"d\",\r\n          d3\r\n            .line()\r\n            .x(function (d) {\r\n              return x(new Date(d[\"date\"] + \"2020\"));\r\n            })\r\n            .y(function (d, i) {\r\n              if (i === 0) {\r\n                return y1(d[\"dailyrecovered\"]);\r\n              } else {\r\n                return y1(d[\"dailyrecovered\"]);\r\n              }\r\n            })\r\n            .curve(d3.curveCardinal)\r\n        );\r\n\r\n      const totalLength3 = path3.node().getTotalLength();\r\n      path3\r\n        .attr(\"stroke-dasharray\", totalLength3 + \" \" + totalLength3)\r\n        .attr(\"stroke-dashoffset\", totalLength3)\r\n        .transition()\r\n        .duration(props.animate ? 2000 : 0)\r\n        .attr(\"stroke-dashoffset\", 0);\r\n\r\n      svg3\r\n        .selectAll(\".dot\")\r\n        .data(data.slice(data.length - 1))\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"fill\", \"#28a745\")\r\n        .attr(\"stroke\", \"#28a745\")\r\n        .attr(\"r\", 2)\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\"cx\", function (d) {\r\n          return x(new Date(d[\"date\"] + \"2020\"));\r\n        })\r\n        .attr(\"cy\", function (d) {\r\n          return y1(d[\"dailyrecovered\"]);\r\n        })\r\n        .on(\"mouseover\", (d) => {\r\n          d3.select(d3.event.target).attr(\"r\", \"5\");\r\n        })\r\n        .on(\"mouseout\", (d) => {\r\n          d3.select(d3.event.target).attr(\"r\", \"2\");\r\n        })\r\n        .style(\"opacity\", 0)\r\n        .transition()\r\n        .duration(props.animate ? 3000 : 0)\r\n        .style(\"opacity\", 1);\r\n    },\r\n    [props.animate]\r\n  );\r\n\r\n  useEffect(() => {\r\n    graphData(timeseries);\r\n  }, [timeseries, graphData]);\r\n\r\n  return (\r\n    <div className=\"Minigraph\">\r\n      <div className=\"svg-parent fadeInUp\" style={{ animationDelay: \"0.6s\" }}>\r\n        <svg\r\n          ref={graphElement1}\r\n          width=\"200\"\r\n          height=\"130\"\r\n          viewBox=\"0 0 100 70\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        className=\"svg-parent is-blue fadeInUp\"\r\n        style={{ animationDelay: \"0.7s\" }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      timeseries: state.stats.timeSeries,\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      getLiveStats: () => dispatch(getLiveStatsAction()),\r\n    };\r\n  };\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecoveredMiniGraph);","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { connect } from \"react-redux\";\r\nimport { getLiveStatsAction } from \"../../../store/actions/statActions\";\r\n\r\n\r\nconst DeceasedMiniGraph = (props) => {\r\n  const [timeseries, setTimeseries] = useState([]);\r\n  const graphElement1 = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (props.timeseries.length > 1) {\r\n      setTimeseries(props.timeseries.slice(props.timeseries.length - 25));\r\n    }\r\n  }, [props.timeseries]);\r\n\r\n  const graphData = useCallback(\r\n    (timeseries) => {\r\n      if (timeseries.length <= 1) return 0;\r\n      const data = timeseries;\r\n      const svg4 = d3.select(graphElement1.current);\r\n      const margin = { top: 20, right: 10, bottom: 30, left: 0 };\r\n      const width = 100 - margin.left - margin.right;\r\n      const height = 100 - margin.top - margin.bottom;\r\n\r\n      const x = d3\r\n        .scaleTime()\r\n        .domain(\r\n          d3.extent(data, function (d) {\r\n            return new Date(d[\"date\"] + \"2020\");\r\n          })\r\n        )\r\n        .range([0, width]);\r\n\r\n      const y1 = d3\r\n        .scaleLinear()\r\n        .domain([\r\n          0,\r\n          d3.max(data, function (d) {\r\n            return +d[\"dailyconfirmed\"];\r\n          }),\r\n        ])\r\n        .range([height, 0]);\r\n\r\n        const path4 = svg4\r\n        .append('path')\r\n        .datum(data)\r\n        .attr('fill', 'none')\r\n        .attr('cursor', 'pointer')\r\n        .attr('stroke', '#6c757d99')\r\n        .attr('stroke-width', 2)\r\n        .attr('cursor', 'pointer')\r\n        .attr('cursor', 'pointer')\r\n        .attr(\r\n          'd',\r\n          d3\r\n            .line()\r\n            .x(function (d) {\r\n              return x(new Date(d['date'] + '2020'));\r\n            })\r\n            .y(function (d, i) {\r\n              if (i === 0) {\r\n                return y1(d['dailydeceased']);\r\n              } else {\r\n                return y1(d['dailydeceased']);\r\n              }\r\n            })\r\n            .curve(d3.curveCardinal)\r\n        );\r\n\r\n      const totalLength4 = path4.node().getTotalLength();\r\n      path4\r\n        .attr('stroke-dasharray', totalLength4 + ' ' + totalLength4)\r\n        .attr('stroke-dashoffset', totalLength4)\r\n        .transition()\r\n        .duration(props.animate ? 2000 : 0)\r\n        .attr('stroke-dashoffset', 0);\r\n\r\n      svg4\r\n        .selectAll('.dot')\r\n        .data(data.slice(data.length - 1))\r\n        .enter()\r\n        .append('circle')\r\n        .attr('fill', '#6c757d')\r\n        .attr('stroke', '#6c757d')\r\n        .attr('r', 2)\r\n        .attr('cursor', 'pointer')\r\n        .attr('cx', function (d) {\r\n          return x(new Date(d['date'] + '2020'));\r\n        })\r\n        .attr('cy', function (d) {\r\n          return y1(d['dailydeceased']);\r\n        })\r\n        .on('mouseover', (d) => {\r\n          d3.select(d3.event.target).attr('r', '5');\r\n        })\r\n        .on('mouseout', (d) => {\r\n          d3.select(d3.event.target).attr('r', '2');\r\n        })\r\n        .style('opacity', 0)\r\n        .transition()\r\n        .duration(props.animate ? 3000 : 0)\r\n        .style('opacity', 1);\r\n    },\r\n    [props.animate]\r\n  );\r\n\r\n  useEffect(() => {\r\n    graphData(timeseries);\r\n  }, [timeseries, graphData]);\r\n\r\n  return (\r\n    <div className=\"Minigraph\">\r\n      <div className=\"svg-parent fadeInUp\" style={{ animationDelay: \"0.6s\" }}>\r\n        <svg\r\n          ref={graphElement1}\r\n          width=\"200\"\r\n          height=\"130\"\r\n          viewBox=\"0 0 100 70\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        className=\"svg-parent is-blue fadeInUp\"\r\n        style={{ animationDelay: \"0.7s\" }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      timeseries: state.stats.timeSeries,\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      getLiveStats: () => dispatch(getLiveStatsAction()),\r\n    };\r\n  };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DeceasedMiniGraph)","import React from \"react\";\r\nimport \"../../index.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst TestedSamples = (props) => {\r\n  var Obj = props.tested;\r\n\r\n  var bar = [];\r\n  var lastElement;\r\n  var last;\r\n  for (lastElement in Obj) {\r\n    last = Obj[lastElement];\r\n    bar.push(last.totalindividualstested);\r\n  }\r\n  const tested = bar.slice(-1)[0];\r\n\r\n  return (\r\n    <div>\r\n      {tested === '' ? '' :\r\n        <p className=\"tested text-muted rgba-blue-slight\">\r\n          '<span className=\"text-info \">{tested}</span>' Samples are being tested\r\n        till now.\r\n      </p>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    tested: state.stats.samples,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TestedSamples);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../../index.css';\r\n\r\nconst LatestUpdates = (props) => {\r\n  const [latestUpdates, setLatestUpdates] = useState(false);\r\n\r\n\r\n  var test\r\n  test = localStorage.getItem('dark-mode')\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p onClick={() => setLatestUpdates(!latestUpdates)} className=\"updates\">\r\n          <span className=\"badge badge-info notification\"> {props.getLatestUpdates.length} </span>Latest Updates\r\n\t\t\t\t\t{latestUpdates ? <i className=\"mt-1 far fa-bell-slash\"></i> : <i className=\"mt-1 far fa-bell\"></i>}\r\n        </p>\r\n      </div>\r\n\r\n      {latestUpdates && (\r\n\r\n        <div className=\"row\">\r\n          <div className=\"latest-updates col-md-6\">\r\n            {props.getLatestUpdates\r\n              .slice(0, -1)\r\n              .map((item, index) => (\r\n\r\n                <div key={index} >\r\n                  <div className={` ${props.modeState && 'dark-body'} note note-info mt-3`} >\r\n                    <p className={`${test === true ? 'rgba-red-slight' : 'rgba-black-slight'}  `} style={{ padding: \"10px\", borderRadius: \"10px\", fontStyle: \"Italic\", fontWeight: \"600\" }}><span className=\"badge badge-danger\">{index + 1}</span> Title : {item.title}</p>\r\n                    <p>{item.excerpt}</p>\r\n                    <p >Published At : {new Date(item.publishedDateTime).toDateString()}</p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n          <div>\r\n            {/* something cool in the near future */}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    getLatestUpdates: state.stats.latestUpdates,\r\n    modeState: state.darkMode.hasmode\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(LatestUpdates);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst LinearGradient = props => {\r\n  const { data } = props;\r\n  const boxStyle = {\r\n    width: 200,\r\n    margin: 'auto'\r\n  };\r\n  const gradientStyle = {\r\n    backgroundImage: `linear-gradient(to right, ${data.fromColor} , ${data.toColor})`,\r\n    height: 20\r\n  };\r\n  return (\r\n    <div>\r\n      <div style={boxStyle} className=\"display-flex\">\r\n        <span>{data.min} - </span>\r\n        <span className=\"fill\"></span>\r\n        <span>{data.max}</span>\r\n      </div>\r\n      <div style={{ ...boxStyle, ...gradientStyle }} className=\"mt8\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nLinearGradient.propTypes = {\r\n  data: PropTypes.object.isRequired\r\n};\r\n\r\nexport default LinearGradient;\r\n","import React from 'react';\r\nimport './statestats.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst StateStats = (props) => {\r\n    return (\r\n        <div>\r\n\r\n            <div className=\"container mt-5\">\r\n\r\n                {window.innerWidth <= 200 ? <p className=\"text-muted\" style={{ textAlign: \"center\" }}>Tap on the state to get statistics of it.</p> : <p className=\"text-muted\" style={{ textAlign: \"center\" }}>Hover over the state to get statistics of it.</p>}\r\n\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col stat-box rgba-red-slight\">\r\n                        <p className=\"text-danger\">Cnfrm</p>\r\n                        <p className=\"text-danger\">{props.confirmed}</p>\r\n                    </div>\r\n                    <div className=\"col stat-box rgba-blue-slight\">\r\n                        <p className=\"text-info\">Actv</p>\r\n                        <p className=\"text-info\">{props.active}</p>\r\n\r\n                    </div>\r\n                    <div className=\"col stat-box rgba-green-slight\">\r\n                        <p className=\"text-success\">Rcvrd</p>\r\n                        <p className=\"text-success\">{props.recovered}</p>\r\n\r\n                    </div>\r\n                    <div className=\"col stat-box rgba-grey-slight\">\r\n                        <p className=\"text-black\">Dcsd</p>\r\n                        <p className=\"text-black\">{props.deceased}</p>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n\r\n                    {props.lastUpdatedTime && <p className=\"col-sm-6\">Updated on<br />{props.lastUpdatedTime}</p>}\r\n\r\n                    <p style={{ fontSize: \"18px\" }} className=\"col-sm-6 state-name\">{props.stateName}</p>\r\n\r\n                </div>\r\n\r\n                <div>\r\n                    {props.lastUpdatedTime &&\r\n                        <Link to={`state/${props.stateCode}`}><span className=\"rgba-orange-slight text-warning\" style={{ padding: \"10px\", borderRadius: \"10px\", fontWeight: 500 }}>Visit State Page</span></Link>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StateStats","import React, { useState, useEffect } from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport LinearGradient from './LinearGradient.js';\r\nimport { scaleQuantile } from 'd3-scale';\r\nimport StateStats from './StateStats';\r\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\r\nimport { connect } from 'react-redux';\r\nconst INDIA_TOPO_JSON = require('./india.topo.json');\r\n\r\n\r\nconst PROJECTION_CONFIG = {\r\n    scale: 650,\r\n    center: [78.9629, 22.5937] // always in [East Latitude, North Longitude]\r\n};\r\n\r\n\r\n// Red Variants\r\nconst COLOR_RANGE = [\r\n    '#e6f5ff',\r\n    '#ccebff',\r\n    '#b3e0ff',\r\n    '#99d6ff',\r\n    '#80ccff',\r\n    '#66c2ff',\r\n    '#008ae6',\r\n    '#006bb3',\r\n    '#0099ff',\r\n    '#0099ff',\r\n    '#005c99'\r\n];\r\n\r\nconst DEFAULT_COLOR = '#EEE';\r\n\r\nconst getRandomInt = () => {\r\n    return parseInt(Math.random() * 100);\r\n};\r\n\r\nconst geographyStyle = {\r\n    default: {\r\n        outline: 'none'\r\n    },\r\n    hover: {\r\n        fill: '#ccc',\r\n        transition: 'all 350ms',\r\n        outline: 'none'\r\n    },\r\n    pressed: {\r\n        outline: 'none'\r\n    }\r\n};\r\n\r\n\r\nconst getHeatMapData = () => {\r\n    // return newArr\r\n    return [\r\n        { id: 'AP', state: 'Andhra Pradesh', value: 524 },\r\n        { id: 'AR', state: 'Arunachal Pradesh', value: getRandomInt() },\r\n        { id: 'AS', state: 'Assam', value: getRandomInt() },\r\n        { id: 'BR', state: 'Bihar', value: getRandomInt() },\r\n        { id: 'CT', state: 'Chhattisgarh', value: getRandomInt() },\r\n        { id: 'GA', state: 'Goa', value: 21 },\r\n        { id: 'GJ', state: 'Gujarat', value: 22 },\r\n        { id: 'HR', state: 'Haryana', value: getRandomInt() },\r\n        { id: 'HP', state: 'Himachal Pradesh', value: 24 },\r\n        { id: 'JH', state: 'Jharkhand', value: 26 },\r\n        { id: 'KA', state: 'Karnataka', value: 27 },\r\n        { id: 'KL', state: 'Kerala', value: getRandomInt() },\r\n        { id: 'MP', state: 'Madhya Pradesh', value: getRandomInt() },\r\n        { id: 'MH', state: 'Maharashtra', value: 556456 },\r\n        { id: 'MN', state: 'Manipur', value: getRandomInt() },\r\n        { id: 'ML', state: 'Meghalaya', value: 59 },\r\n        { id: 'MZ', state: 'Mizoram', value: getRandomInt() },\r\n        { id: 'NL', state: 'Nagaland', value: 59 },\r\n        { id: 'OR', state: 'Odisha', value: 59 },\r\n        { id: 'PB', state: 'Punjab', value: getRandomInt() },\r\n        { id: 'RJ', state: 'Rajasthan', value: getRandomInt() },\r\n        { id: 'SK', state: 'Sikkim', value: getRandomInt() },\r\n        { id: 'TN', state: 'Tamil Nadu', value: getRandomInt() },\r\n        { id: 'TG', state: 'Telangana', value: 85 },\r\n        { id: 'TR', state: 'Tripura', value: 14 },\r\n        { id: 'UT', state: 'Uttarakhand', value: getRandomInt() },\r\n        { id: 'UP', state: 'Uttar Pradesh', value: 15 },\r\n        { id: 'WB', state: 'West Bengal', value: 17 },\r\n        { id: 'WB', state: 'West Bengal', value: 17 },\r\n        { id: 'AN', state: 'Andaman and Nicobar Islands', value: getRandomInt() },\r\n        { id: 'CH', state: 'Chandigarh', value: getRandomInt() },\r\n        { id: 'DN', state: 'Dadra and Nagar Haveli', value: 19 },\r\n        { id: 'DD', state: 'Daman and Diu', value: 20 },\r\n        { id: 'DL', state: 'Delhi', value: 59 },\r\n        { id: 'JK', state: 'Jammu and Kashmir', value: 25 },\r\n        { id: 'LA', state: 'Ladakh', value: getRandomInt() },\r\n        { id: 'LD', state: 'Lakshadweep', value: getRandomInt() },\r\n        { id: 'PY', state: 'Puducherry', value: getRandomInt() }\r\n    ];\r\n};\r\n\r\n\r\n\r\nconst IndiaMap = (props) => {\r\n\r\n\r\n    const [tooltipContent, setTooltipContent] = useState('');\r\n    const [data, setData] = useState(getHeatMapData());\r\n    const [confirmed, setConfirmed] = useState('');\r\n    const [active, setActive] = useState('');\r\n    const [recovered, setRecovered] = useState('');\r\n    const [deceased, setDeceased] = useState('');\r\n    const [stateCode, setStateCode] = useState('');\r\n    const [stateName, setStateName] = useState('');\r\n    const [lastUpdatedTime, setLastUpdatedTime] = useState('');\r\n\r\n    const allStatesData = (props.states.map(item => {\r\n        return { id: item.statecode, state: item.state, value: JSON.parse(item.active), confirmed: JSON.parse(item.confirmed), recovered: JSON.parse(item.recovered), deceased: JSON.parse(item.deaths), lastupdatedtime: new Date(item.lastupdatedtime).toLocaleString() }\r\n    }))\r\n\r\n    useEffect(() => {\r\n        if (props.states.length !== 0) {\r\n\r\n            const getHeatMapData2 = () => {\r\n                return allStatesData\r\n            };\r\n            setData(getHeatMapData2())\r\n        }\r\n    }, [props])\r\n\r\n\r\n    const gradientData = {\r\n        fromColor: COLOR_RANGE[0],\r\n        toColor: COLOR_RANGE[COLOR_RANGE.length - 1],\r\n        min: 0,\r\n        max: data.reduce((max, item) => (item.value > max ? item.value : max), 0)\r\n    };\r\n\r\n    const colorScale = scaleQuantile()\r\n        .domain(data.map(d => d.value))\r\n        .range(COLOR_RANGE);\r\n\r\n    const onMouseEnter = (geo, current = { value: 'NA' }) => {\r\n\r\n        return () => {\r\n            setTooltipContent(`${geo.properties.name}: ${current.value}`);\r\n            setActive(current.value)\r\n            setStateName(`${geo.properties.name}`)\r\n            setConfirmed(current.confirmed)\r\n            setRecovered(current.recovered)\r\n            setDeceased(current.deceased)\r\n            setStateCode(current.id)\r\n            setLastUpdatedTime(current.lastupdatedtime)\r\n        };\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        setTooltipContent('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <StateStats confirmed={confirmed} stateName={stateName} active={active} recovered={recovered} deceased={deceased} lastUpdatedTime={lastUpdatedTime} stateCode={stateCode} />\r\n            <ReactTooltip>{tooltipContent}</ReactTooltip>\r\n            <ComposableMap\r\n                projectionConfig={PROJECTION_CONFIG}\r\n                projection=\"geoMercator\"\r\n                width={420}\r\n                height={520}\r\n                data-tip=\"\"\r\n            >\r\n                <Geographies geography={INDIA_TOPO_JSON}>\r\n                    {({ geographies }) =>\r\n                        geographies.map(geo => {\r\n                            const current = data.find(s => s.id === geo.id);\r\n                            return (\r\n                                <Geography\r\n                                    key={geo.rsmKey}\r\n                                    geography={geo}\r\n                                    fill={current ? colorScale(current.value) : DEFAULT_COLOR}\r\n                                    style={geographyStyle}\r\n                                    onMouseEnter={onMouseEnter(geo, current)}\r\n                                    onMouseLeave={onMouseLeave}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                </Geographies>\r\n            </ComposableMap>\r\n            <LinearGradient data={gradientData} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        states: state.stats.statesData\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(IndiaMap)","import $ from 'jquery';\r\n\r\n$(function(){\r\n    $(\".fold-table tr.view\").on(\"click\", function(){\r\n      $(this).toggleClass(\"open\").next(\".fold\").toggleClass(\"open\");\r\n    });\r\n  });","import React, { useEffect } from 'react';\r\nimport LiveStats from './LiveStats';\r\nimport UpdateLiveStats from './UpdateLiveStats';\r\nimport StateTable from './StateTable';\r\nimport { connect } from 'react-redux';\r\nimport { getLiveStatsAction } from '../../store/actions/statActions';\r\nimport ActiveMiniGraph from './minigraphs/ActiveMiniGraph';\r\nimport ConfirmedMiniGraph from './minigraphs/ConfirmedMiniGraph';\r\nimport RecoveredMiniGraph from './minigraphs/RecoveredMiniGraph';\r\nimport DeceasedMiniGraph from './minigraphs/DeceasedMiniGraph';\r\nimport TestedSamples from './TestedSamples';\r\nimport LatestUpdates from './LatestUpdates';\r\nimport IndiaMap from './geographics/IndiaMap';\r\nimport AccordianTable from './AccordianTable';\r\n\r\nconst Home = (props) => {\r\n\tuseEffect(() => {\r\n\t\tprops.getLiveStats();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className=\"home\">\r\n\t\t\t{/* factoids banner */}\r\n\t\t\t{/* <Factoids /> */}\r\n\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-sm-12\">\r\n\t\t\t\t\t\t<UpdateLiveStats lastUpdatedTime={props.liveStatsData.lastupdatedtime} />\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"col-sm-12\">\r\n\t\t\t\t\t\t<LatestUpdates />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* stats cards  */}\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-sm-6 col-lg-3 d-flex justify-content-center\">\r\n\t\t\t\t\t\t<LiveStats\r\n\t\t\t\t\t\t\tname=\"Confirmed\"\r\n\t\t\t\t\t\t\tcount={props.liveStatsData.confirmed}\r\n\t\t\t\t\t\t\ttodayCount={props.liveStatsData.deltaconfirmed}\r\n\t\t\t\t\t\t\tbadgeColor=\"badge badge-danger\"\r\n\t\t\t\t\t\t\thoverColor=\"red\"\r\n\t\t\t\t\t\t\ttextColor=\"text-danger\"\r\n\t\t\t\t\t\t\tactivegraph={<ConfirmedMiniGraph />}\r\n\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-sm-6 col-lg-3 d-flex justify-content-center\">\r\n\t\t\t\t\t\t<LiveStats\r\n\t\t\t\t\t\t\tname=\"Active\"\r\n\t\t\t\t\t\t\tcount={props.liveStatsData.active}\r\n\t\t\t\t\t\t\ttodayCount={props.liveStatsData.deltaconfirmed}\r\n\t\t\t\t\t\t\tbadgeColor=\"badge badge-primary\"\r\n\t\t\t\t\t\t\thoverColor=\"blue\"\r\n\t\t\t\t\t\t\ttextColor=\"text-primary\"\r\n\t\t\t\t\t\t\tactivegraph={<ActiveMiniGraph />}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-sm-6 col-lg-3 d-flex justify-content-center\">\r\n\t\t\t\t\t\t<LiveStats\r\n\t\t\t\t\t\t\tname=\"Recovered\"\r\n\t\t\t\t\t\t\tcount={props.liveStatsData.recovered}\r\n\t\t\t\t\t\t\ttodayCount={props.liveStatsData.deltarecovered}\r\n\t\t\t\t\t\t\tbadgeColor=\"badge badge-success\"\r\n\t\t\t\t\t\t\thoverColor=\"green\"\r\n\t\t\t\t\t\t\ttextColor=\"text-success\"\r\n\t\t\t\t\t\t\tactivegraph={<RecoveredMiniGraph />}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-sm-6 col-lg-3 d-flex justify-content-center\">\r\n\t\t\t\t\t\t<LiveStats\r\n\t\t\t\t\t\t\tname=\"Deceased\"\r\n\t\t\t\t\t\t\tcount={props.liveStatsData.deaths}\r\n\t\t\t\t\t\t\ttodayCount={props.liveStatsData.deltadeaths}\r\n\t\t\t\t\t\t\tbadgeColor=\"badge badge-light\"\r\n\t\t\t\t\t\t\thoverColor=\"grey\"\r\n\t\t\t\t\t\t\ttextColor=\"#ccc\"\r\n\t\t\t\t\t\t\tactivegraph={<DeceasedMiniGraph />}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<TestedSamples />\r\n\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-lg-6\">\r\n\t\t\t\t\t\t{/* State wise Table */}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/* <AccordianTable \r\n\t\t\t\t\t\tstateData={props.statesData}\r\n\t\t\t\t\t\ttextConfirmed=\"text-danger\"\r\n\t\t\t\t\t\ttextActive=\"text-primary\"\r\n\t\t\t\t\t\ttextRecovered=\"text-success\"\r\n\t\t\t\t\t\ttextDeceased=\"text-dark\"\r\n\t\t\t\t\t\t/> */}\r\n\r\n\t\t\t\t\t\t<StateTable\r\n\t\t\t\t\t\t\tstateData={props.statesData}\r\n\t\t\t\t\t\t\ttextConfirmed=\"text-danger\"\r\n\t\t\t\t\t\t\ttextActive=\"text-primary\"\r\n\t\t\t\t\t\t\ttextRecovered=\"text-success\"\r\n\t\t\t\t\t\t\ttextDeceased=\"text-dark\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"col-lg-6\">\r\n\t\t\t\t\t\t<IndiaMap />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tliveStatsData: state.stats.liveStats,\r\n\t\tstatesData: state.stats.statesData,\r\n\t\ttimeSeriesData: state.stats.timeSeries,\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tgetLiveStats: () => dispatch(getLiveStatsAction()),\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React, { useState } from 'react';\r\nimport './demographics.css';\r\nimport { useEffectOnce, useLocalStorage } from 'react-use'\r\n\r\nconst BoxMessage = () => {\r\n\tconst [messageBox, setMessageBox] = useState(true)\r\n\tconst [box, setBox] = useLocalStorage('messageBox', true)\r\n\r\n\tconst handleMessageBox = () => {\r\n\t\tsetMessageBox(false)\r\n\t\tsetBox(false)\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{messageBox, box &&\r\n\t\t\t\t<div className=\"card-container\">\r\n\t\t\t\t\t<div className=\"card rgba-blue-slight card-styles\">\r\n\t\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t\t<i onClick={handleMessageBox} className=\"d-flex justify-content-end fas fa-times text-info\"></i>\r\n\t\t\t\t\t\t\t<p className=\"card-text\">\r\n\r\n\t\t\t\t\t\t\t\tIt is important that we do not think of these as just tiny boxes,\r\n\t\t\t\t\t\t\t\tnumbers, or just another part of statistics - among these are our\r\n\t\t\t\t\t\t\t\tneighbors, our teachers, our healthcare workers, our supermarket\r\n\t\t\t\t\t\t\t\tvendors, our friends, our co-workers, our children or our\r\n\t\t\t\t\t\t\t\tgrandparents.\r\n\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t<br />\r\n          \t\t\t\t\t\tAmong these are our people.\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default BoxMessage;\r\n","import React, { useState } from 'react';\r\nimport './demographics.css'\r\nimport { connect } from 'react-redux';\r\nimport PatientModel from './PatientModel';\r\n\r\nconst PatientHeatMap = (props) => {\r\n    const [isChecked, setIsChecked] = useState(false)\r\n    const [patientNumber, setPatientNumber] = useState('')\r\n\r\n\r\n    // expand toggle switch\r\n    const handleToggle = () => {\r\n        setIsChecked(!isChecked)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n\r\n            <div className=\"row\">\r\n                <h2 className=\"text-info\" style={{fontWeight:600}}>Demographics</h2>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n\r\n                <div className=\"col custom-control custom-switch\">\r\n                    <input type=\"checkbox\" className=\"custom-control-input sizer\" id=\"customSwitch1\" onClick={handleToggle} defaultChecked={isChecked} />\r\n                    <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Expand </label>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"row d-flex justify-content-center mt-5\">\r\n\r\n                {props.patientData.map((patient, index) => (\r\n                    <div\r\n                        // onClick={() => setPatientNumber(patient.patientnumber)}\r\n                        // data-toggle=\"modal\" data-target=\"#modalPush\"\r\n                        key={index}\r\n                        className={`expanded-patient-box ${patient.gender === \"F\" ? 'pink lighten-1' : patient.gender === \"M\" ? 'blue lighten-1' : 'grey lighten-2'}`}>\r\n\r\n                        {isChecked ?\r\n                            <p\r\n                                className=\"text-muted\"\r\n                                style={{\r\n                                    width: isChecked && \"60px\",\r\n                                    height: isChecked && \"50px\",\r\n                                    lineHeight: \"60px\",\r\n                                    textAlign: \"center\",\r\n                                }}>\r\n                                P{patient.patientnumber}</p>\r\n                            :\r\n                            <div style={{ width: \"20px\", height: \"20px\" }}>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            {/* <PatientModel patientNumber={patientNumber} patientData={props.patientData} /> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        patientData: state.patient.getPatientData\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(PatientHeatMap)","import React, { useEffect, useState } from 'react';\r\nimport './demographics.css'\r\nimport { connect } from 'react-redux';\r\nimport { getStatesAction } from '../../store/actions/patientActions';\r\n\r\nconst SelectOptions = (props) => {\r\nconst [stateSelect, setStateSelect] = useState('')\r\n\r\n    useEffect(() => {\r\n        props.getStates()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row select-option\">\r\n                <select\r\n                    onChange={(event) => setStateSelect(event.target.value)}\r\n                    value={stateSelect}\r\n                    className=\" btn btn-outline-primary dropdown-toggle\"\r\n                >\r\n                    <option Value=\"\" disabled>--Select State--</option>\r\n                    <option value=\"all\">All</option>\r\n                    {props.allStatesData.sort().map((state, index) => (\r\n                        <option key={index} Value={state.state}>{state.state}</option>\r\n                    ))}\r\n                </select>\r\n\r\n\r\n                {stateSelect && stateSelect !== 'all' ?\r\n                    <select\r\n                        className=\"  btn btn-outline-primary dropdown-toggle\"\r\n                    >\r\n                        <option value=\"\">--Select District--</option>\r\n                        <option value=\"genderwise\">Gender Wise Data</option>\r\n                        <option value=\"currentstatus\">Current Status</option>\r\n                        <option value=\"transmissiontype\">Type of Transmission</option>\r\n                    </select>\r\n                    : ''}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allStatesData: state.patient.getStatesData\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getStates: () => dispatch(getStatesAction())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectOptions)","import axios from \"axios\"\r\n\r\nexport const GET_PATIENT_DATA = \"GET_PATIENT_FETCH\"\r\nexport const FETCHING_PATIENT_DATA = \"FETCHING_PATIENT_DATA\"\r\nexport const ERROR_PATIENT_DATA = \"ERROR_PATIENT_DATA\"\r\nexport const GET_STATES = \"GET_STATES\"\r\nexport const FETCHING_STATES = \"FETCHING_STATES\"\r\nexport const ERROR_STATES = \"ERROR_STATES\"\r\n\r\n\r\nexport const getPatientData = () => {\r\n    return dispatch => {\r\n        dispatch({ type: FETCHING_PATIENT_DATA })\r\n        axios.get('https://api.covid19india.org/raw_data.json').then(resp => {\r\n            dispatch({ type: GET_PATIENT_DATA, payload: resp.data.raw_data.reverse().slice(0, 500) })\r\n        }).catch(err => {\r\n            console.log(err)\r\n            dispatch({ type: ERROR_PATIENT_DATA, payload: \"Error Occured. Try again\" })\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getStatesAction = () => {\r\n    return dispatch => {\r\n        dispatch({ type: FETCHING_STATES })\r\n        axios.get('https://api.covid19india.org/data.json').then(resp => {\r\n            dispatch({ type: GET_STATES, payload: resp.data.statewise.slice(1, -1) })\r\n        }).catch(err => {\r\n            console.log(err)\r\n            dispatch({ type: ERROR_STATES, payload: 'error fetching states' })\r\n        })\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport BoxMessage from './BoxMessage';\r\nimport PatientHeatMap from './PatientHeatMap';\r\nimport { connect } from 'react-redux';\r\nimport { getPatientData } from '../../store/actions/patientActions';\r\nimport SelectOptions from './SelectOptions';\r\n\r\n\r\nconst Demographics = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.getPatient()\r\n    })\r\n\r\n    return (\r\n        <div className=\"container\">\r\n\r\n            <div className=\"mt-2\">\r\n                <SelectOptions />\r\n            </div>\r\n\r\n            <div>\r\n                <BoxMessage />\r\n            </div>\r\n\r\n            <div className=\"mt-5\">\r\n                <PatientHeatMap />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getPatient: () => dispatch(getPatientData())\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(Demographics)","import React from 'react';\r\n\r\nconst DeepDive = () => {\r\n    return(\r\n        <div>\r\n            Deep-Dive compo\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeepDive","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./stateinfo.css\";\r\nimport { stateInfoAction, districtInfoAction, zoneInfoAction } from \"../../store/actions/stateInfoActions\";\r\n\r\nconst StateInfo = (props) => {\r\n    const [impData, setImpData] = useState({})\r\n    const [districts, setDistrictData] = useState([])\r\n\r\n\r\n    // eslint-disable-next-line no-lone-blocks\r\n    // {props.zoneInfo.map(item => {\r\n    //     console.log(item.district, item.zone)\r\n    // })}\r\n\r\n    useEffect(() => {\r\n        props.getStatesData()\r\n        props.getDistrictData()\r\n        props.getZoneData()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.stateInfo.length !== 0) {\r\n\r\n            // get the state from the params statecode\r\n            const stateCode = props.match.params.statename\r\n            const index = props.stateInfo.findIndex(name => name.statecode === stateCode)\r\n            const state = props.stateInfo[index]\r\n            setImpData(state)\r\n        }\r\n        if (props.districtInfo.length !== 0) {\r\n\r\n            // get the district data from the statecode\r\n            const stateCode = props.match.params.statename\r\n            const districtIndex = props.districtInfo.findIndex(districtItem => districtItem.statecode === stateCode)\r\n            const district = props.districtInfo[districtIndex].districtData\r\n            setDistrictData(district)\r\n        }\r\n    }, [props])\r\n\r\n    return (\r\n        <div className=\"container mt-2\">\r\n\r\n            <div className=\"row\">\r\n\r\n                <div className=\"bc-icons-2 bread col-sm-6\">\r\n                    <nav aria-label=\"breadcrumb\">\r\n                        <ol className={`breadcrumb ${props.modeState && 'grey lighten-1'} white lighten-4`}>\r\n                            <li className=\"breadcrumb-item\"><Link className=\"black-text\" to=\"/\">Home</Link></li>\r\n                            <li className=\"breadcrumb-item\"><span className=\"badge badge-pill badge-info\" style={{ fontSize: \"14px\" }}> {impData.state} </span></li>\r\n                        </ol>\r\n                    </nav>\r\n                </div>\r\n\r\n\r\n                <div className=\"col-sm-6\">\r\n                    <p className=\"text-danger\" style={{ margin: 0, fontSize: \"24px\", fontWeight: 600 }}>{impData.state} </p>\r\n                    <p className=\"text-muted font-italic\" >Last updated on - {new Date(impData.lastupdatedtime).toLocaleString()}</p>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n            <div className=\"state-counts row\" style={{ margin: \"5px\" }}>\r\n                <div className=\"col-6 col-md-3 state-count-box rgba-red-slight\">\r\n                    <p className=\"text-danger\">Confirm</p>\r\n                    <p className=\"text-danger\" style={{ margin: 0 }}>{impData.confirmed}</p>\r\n\r\n                    <div className=\"row delta-data text-danger\">\r\n                        <i className=\" far fa-arrow-alt-circle-up cc_pointer text-small\"></i><p className=\"delta-confirmed \">{impData.deltaconfirmed}</p>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"col-6  col-md-3 state-count-box rgba-blue-slight\">\r\n                    <p className=\"text-info\">Active</p>\r\n                    <p className=\"text-info\">{impData.active}</p>\r\n\r\n                    <div className=\"row delta-data text-info\">\r\n                        <i className=\" far fa-arrow-alt-circle-up cc_pointer text-small\"></i><p className=\"delta-confirmed \">{impData.deltaconfirmed}</p>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n                <div className=\" col-6 col-md-3  state-count-box rgba-green-slight\">\r\n                    <p className=\"text-success\">Recovered</p>\r\n                    <p className=\"text-success\">{impData.recovered}</p>\r\n\r\n                    <div className=\"row delta-data text-success\">\r\n                        <i className=\" far fa-arrow-alt-circle-up cc_pointer text-small\"></i><p className=\"delta-confirmed \">{impData.deltarecovered}</p>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n                <div className=\" col-6  col-md-3 state-count-box rgba-grey-slight\">\r\n                    <p className=\"text-black\">Deceased</p>\r\n                    <p className=\"text-black\">{impData.deaths}</p>\r\n\r\n                    <div className=\"row delta-data text-black\">\r\n                        <i className=\" far fa-arrow-alt-circle-up cc_pointer text-small\"></i><p className=\"delta-confirmed \">{impData.deltadeaths}</p>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n            {/* District table and map */}\r\n\r\n            <div className=\"row districts-map\">\r\n                <div className=\"district-data col-md-6\">\r\n                    <p className=\"text-danger\" style={{ fontSize: \"20px\", fontWeight: 600 }}>District Data</p>\r\n\r\n                    <table className=\"table\">\r\n                        <thead className=\"thead-dark\">\r\n                            <tr>\r\n                                <th>Districts</th>\r\n                                <th className=\"confirmed\"></th>\r\n                                <th className=\"active\"></th>\r\n                                <th className=\"recovered\"></th>\r\n                                <th className=\"deceased\"></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {districts.map((dist, index) => (\r\n                                <tr className={`${props.modeState && 'dark-table'} `} key={index}>\r\n                                    <td >{dist.district}</td>\r\n                                    <td>{dist.confirmed}\r\n                                        <i className=\"text-danger far fa-arrow-alt-circle-up cc_pointer text-small\">{dist.delta.confirmed}</i>\r\n                                    </td>\r\n                                    <td>{dist.active}\r\n                                        <i className=\"text-info far fa-arrow-alt-circle-up cc_pointer text-small\">{dist.delta.confirmed}</i>\r\n                                    </td>\r\n                                    <td>{dist.recovered}\r\n                                        <i className=\"text-success far fa-arrow-alt-circle-up cc_pointer text-small\">{dist.delta.recovered}</i>\r\n                                    </td>\r\n                                    <td>{dist.deceased}\r\n                                        <i className=\"text-black far fa-arrow-alt-circle-up cc_pointer text-small\">{dist.delta.deceased}</i>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                    map goes here\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        stateInfo: state.stateInfo.statesInfoData,\r\n        districtInfo: state.stateInfo.districtData,\r\n        zoneInfo: state.stateInfo.zoneData,\r\n        modeState: state.darkMode.hasmode\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getStatesData: () => dispatch(stateInfoAction()),\r\n        getDistrictData: () => dispatch(districtInfoAction()),\r\n        getZoneData: () => dispatch(zoneInfoAction())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StateInfo)","import Axios from \"axios\"\r\n\r\nexport const GET_STATES_DATA = \"GET_STATES_DATA\"\r\nexport const GET_DISTRICT_DATA = \"GET_DISTRICT_DATA\"\r\nexport const GET_ZONE_DATA = \"GET_ZONE_DATA\"\r\n\r\n\r\nexport const stateInfoAction = () => {\r\n    return dispatch => {\r\n        Axios.get('https://api.covid19india.org/data.json').then(resp => {\r\n            dispatch({ type: GET_STATES_DATA, payload: resp.data.statewise.slice(1, -1) })\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n}\r\n\r\nexport const districtInfoAction = () => {\r\n    return dispatch => {\r\n        Axios.get('https://api.covid19india.org/v2/state_district_wise.json').then(resp => {\r\n            dispatch({ type: GET_DISTRICT_DATA, payload: resp.data })\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n}\r\n\r\nexport const zoneInfoAction = () => {\r\n    return dispatch => {\r\n        Axios.get('https://api.covid19india.org/zones.json').then(resp => {\r\n            dispatch({ type: GET_ZONE_DATA, payload: resp.data.zones })\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n}","import React, { useEffect } from \"react\";\nimport NavBar from \"./navbar/NavBar\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Home from './home/Home';\nimport Demographics from './demographics/Demographics';\nimport DeepDive from './deep-dive/DeepDive';\nimport '../index.css'\nimport { connect } from 'react-redux';\nimport StateInfo from \"./home/StateInfo\";\n\n\n\nfunction App(props) {\n\n\n  return (\n    <div className={`App ${props.modeState && 'dark-body'}`} >\n      <BrowserRouter>\n        <NavBar />\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/demographics\" component={Demographics} />\n        <Route path=\"/deep-dive\" component={DeepDive} />\n        <Route path=\"/state/:statename\" component={StateInfo} />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    modeState: state.darkMode.hasmode\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_PATIENT_DATA, FETCHING_PATIENT_DATA, ERROR_PATIENT_DATA, GET_STATES, FETCHING_STATES, ERROR_STATES } from '../actions/patientActions'\r\n\r\nconst initialState = {\r\n    fetchingData: false,\r\n    getPatientData: [],\r\n    errorPatientData: '',\r\n    fetchingStates: false,\r\n    getStatesData: [],\r\n    errorFetchingStates: ''\r\n}\r\n\r\nconst patientReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCHING_PATIENT_DATA:\r\n            return {\r\n                ...state,\r\n                fetchingData: true\r\n            }\r\n        case GET_PATIENT_DATA:\r\n            return {\r\n                ...state,\r\n                fetchingData: false,\r\n                getPatientData: action.payload\r\n            }\r\n        case ERROR_PATIENT_DATA:\r\n            return {\r\n                ...state,\r\n                fetchingData: false,\r\n                errorPatientData: action.payload\r\n            };\r\n        case FETCHING_STATES:\r\n            return {\r\n                ...state,\r\n                fetchingStates: true\r\n            }\r\n        case GET_STATES:\r\n            return {\r\n                ...state,\r\n                getStatesData: action.payload,\r\n                fetchingStates: false\r\n            }\r\n        case ERROR_STATES:\r\n            return {\r\n                ...state,\r\n                fetchingStates: false,\r\n                errorFetchingStates: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport default patientReducer","import {\r\n  GET_LIVE_STATS,\r\n  ERROR_LIVE_STATS,\r\n  FETCHING_LIVE_STATS,\r\n  GET_STATES_DATA,\r\n  GET_TIME_SERIES,\r\n  GET_TEST_SAMPLES,\r\n  GET_FACTOIDS,\r\n  GET_UPDATES\r\n} from \"../actions/statActions\";\r\n\r\nconst initialState = {\r\n  fetchingStats: true,\r\n  errorFetchingStats: \"\",\r\n  liveStats: [],\r\n  statesData: [],\r\n  timeSeries: [],\r\n  samples: [],\r\n  factoids:[],\r\n  latestUpdates: []\r\n};\r\n\r\nconst statsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCHING_LIVE_STATS:\r\n      return {\r\n        ...state,\r\n        fetchingStats: true,\r\n      };\r\n    case GET_LIVE_STATS:\r\n      return {\r\n        ...state,\r\n        fetchingStats: false,\r\n        errorFetchingStats: \"\",\r\n        liveStats: action.payload,\r\n      };\r\n    case ERROR_LIVE_STATS:\r\n      return {\r\n        ...state,\r\n        fetchingStats: false,\r\n        errorFetchingStats: action.payload,\r\n      };\r\n    case GET_STATES_DATA:\r\n      return {\r\n        ...state,\r\n        statesData: action.payload,\r\n      };\r\n    case GET_TIME_SERIES:\r\n      return {\r\n        ...state,\r\n        timeSeries: action.payload,\r\n      };\r\n    case GET_TEST_SAMPLES:\r\n      return {\r\n        ...state,\r\n        samples: action.payload,\r\n      };\r\n      case GET_FACTOIDS:\r\n        return{\r\n          ...state,\r\n          factoids: action.payload\r\n        }\r\n        case GET_UPDATES:\r\n          return{\r\n            ...state,\r\n            latestUpdates:action.payload\r\n          }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default statsReducer;\r\n","import { SET_MODE } from '../actions/darkModeActions';\r\n\r\nconst initial = { hasmode: false }\r\n\r\nconst darkModeReducer = (state = initial, action) => {\r\n    // console.log(action)\r\n    if (action.type === SET_MODE) {\r\n        return { hasmode: action.payload }\r\n    } return state\r\n}\r\n\r\nexport default darkModeReducer","import { GET_STATES_DATA, GET_DISTRICT_DATA, GET_ZONE_DATA } from \"../actions/stateInfoActions\";\r\n\r\nconst initialState = {\r\n    statesInfoData: [],\r\n    districtData: [],\r\n    zoneData: [],\r\n}\r\n\r\nconst stateInfoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_STATES_DATA:\r\n            return {\r\n                ...state,\r\n                statesInfoData: action.payload\r\n            }\r\n        case GET_DISTRICT_DATA:\r\n            return {\r\n                ...state,\r\n                districtData: action.payload\r\n            }\r\n        case GET_ZONE_DATA:\r\n            return {\r\n                ...state,\r\n                zoneData: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default stateInfoReducer","import {combineReducers} from 'redux';\r\nimport patientReducer from './patientReducer';\r\nimport statsReducer from './statsReducer';\r\nimport darkModeReducer from './darkModeReducer';\r\nimport stateInfoReducer from './stateInfoReducer';\r\n\r\nexport default combineReducers({\r\n    patient: patientReducer,\r\n    stats: statsReducer,\r\n    darkMode: darkModeReducer,\r\n    stateInfo : stateInfoReducer\r\n})","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./store/reducers/rootReducer\";\nimport thunk from \"redux-thunk\";\n\nconst middlewares = [thunk];\n\nconst store = createStore(rootReducer, {}, applyMiddleware(...middlewares));\n\nReactDOM.render(\n  <Provider store = {store}>  \n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}