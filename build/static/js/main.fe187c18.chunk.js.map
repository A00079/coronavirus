{"version":3,"sources":["components/navbar/NotificationCenter.js","components/navbar/NavBar.js","store/actions/darkModeActions.js","components/home/LiveStats.js","components/home/UpdateLiveStats.js","components/home/StateTable.js","store/actions/statActions.js","components/home/minigraphs/ActiveMiniGraph.js","components/home/minigraphs/ConfirmedMiniGraph.js","components/home/minigraphs/RecoveredMiniGraph.js","components/home/minigraphs/DeceasedMiniGraph.js","components/home/TestedSamples.js","components/home/LatestUpdates.js","components/home/geographics/LinearGradient.js","components/home/geographics/StateStats.js","components/home/geographics/IndiaMap.js","components/home/tabletoggler.js","components/home/Home.js","components/demographics/BoxMessage.js","components/demographics/PatientHeatMap.js","components/demographics/SelectOptions.js","store/actions/patientActions.js","components/demographics/Demographics.js","components/deep-dive/DeepDive.js","components/home/geographics/MaharashtraMap.js","components/stateinfo/EventsTimeline.js","components/stateinfo/StateInfo.js","store/actions/stateInfoActions.js","components/App.js","serviceWorker.js","store/reducers/patientReducer.js","store/reducers/statsReducer.js","store/reducers/darkModeReducer.js","store/reducers/stateInfoReducer.js","store/reducers/rootReducer.js","index.js"],"names":["connect","state","getLatestUpdates","stats","latestUpdates","modeState","darkMode","hasmode","props","test","useState","localStorage","getItem","className","style","color","fontSize","marginLeft","slice","map","item","index","key","padding","borderRadius","fontStyle","fontWeight","title","excerpt","Date","publishedDateTime","toDateString","dispatch","setModeProp","mode","type","payload","darkModeAction","JSON","parse","setMode","notification","setNotification","useEffect","setItem","stringify","onClick","to","id","data-toggle","aria-haspopup","aria-expanded","width","aria-labelledby","NotificationCenter","hoverColor","badgeColor","name","textColor","count","activegraph","todayCount","UpdateLiveStats","convertedTime","lastUpdatedTime","isConfirmed","isRecover","searchValue","helperVar","helperVar2","filteredStates","stateData","filter","stateName","push","deltaconfirmed","deltarecovered","toLowerCase","includes","i","console","log","data","confirmed","textConfirmed","active","textActive","recovered","textRecovered","deaths","deltadeaths","textDeceased","getLiveStatsAction","statsResp","axios","get","factoidsResp","updatesResp","headers","all","then","spread","allDataStats","allDataFactoids","allDataUpdates","statewise","cases_time_series","tested","factoids","news","catch","err","timeseries","timeSeries","getLiveStats","setTimeseries","graphElement1","useRef","length","graphData","useCallback","svg2","d3","current","height","x","domain","d","range","y1","path2","append","datum","attr","y","curve","totalLength2","node","getTotalLength","transition","duration","animate","selectAll","enter","on","target","animationDelay","ref","viewBox","preserveAspectRatio","svg1","path1","totalLength1","svg3","path3","totalLength3","svg4","path4","totalLength4","samples","lastElement","last","Obj","bar","totalindividualstested","setLatestUpdates","LinearGradient","boxStyle","margin","gradientStyle","backgroundImage","fromColor","toColor","min","max","StateStats","window","innerWidth","textAlign","deceased","stateCode","INDIA_TOPO_JSON","require","PROJECTION_CONFIG","scale","center","COLOR_RANGE","getRandomInt","parseInt","Math","random","geographyStyle","default","outline","hover","fill","pressed","states","statesData","tooltipContent","setTooltipContent","value","setData","setConfirmed","setActive","setRecovered","setDeceased","setStateCode","setStateName","setLastUpdatedTime","allStatesData","statecode","lastupdatedtime","toLocaleString","gradientData","reduce","colorScale","scaleQuantile","onMouseEnter","geo","properties","onMouseLeave","projectionConfig","projection","data-tip","geography","geographies","find","s","rsmKey","$","this","toggleClass","next","liveStatsData","liveStats","timeSeriesData","BoxMessage","setMessageBox","useLocalStorage","box","setBox","patientData","patient","getPatientData","isChecked","setIsChecked","defaultChecked","htmlFor","gender","lineHeight","patientnumber","getStatesData","getStates","resp","stateSelect","setStateSelect","onChange","event","Value","disabled","sort","getPatient","raw_data","reverse","DeepDive","district","EventsTimeline","last5Days","setLast5Days","tests","daysData","href","aria-hidden","updatedon","totaltested","Number","size","positive","negative","parseFloat","toFixed","stateInfo","statesInfoData","districtInfo","districtData","testInfo","testData","zoneInfo","zoneData","Axios","getDistrictData","getZoneData","zones","getTestData","states_tested_data","impData","setImpData","districts","setDistrictData","zone","setZone","setTests","zonedStates","testsData","lastObject","todaysTestCount","totalTestCount","scrollTo","match","params","statename","findIndex","districtIndex","districtItem","j","aria-label","e","history","defaultValue","undefined","dist","delta","exact","path","component","Home","Demographics","StateInfo","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","initialState","fetchingData","errorPatientData","fetchingStates","errorFetchingStates","patientReducer","action","fetchingStats","errorFetchingStats","statsReducer","initial","darkModeReducer","stateInfoReducer","combineReducers","middlewares","thunk","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"grrCAwCeA,eAPS,SAACC,GACvB,MAAO,CACLC,iBAAkBD,EAAME,MAAMC,cAC9BC,UAAWJ,EAAMK,SAASC,WAIfP,EApCO,SAACQ,GAAW,IAI5BC,EAJ2B,EACWC,oBAAS,GADpB,6BAO/B,OAFAD,EAAOE,aAAaC,QAAQ,aAMpB,yBAAKC,UAAU,mBACZ,uBAAGC,MAAO,CAACC,MAAM,OAAQC,SAAS,OAAQC,WAAW,QAArD,uBACAT,EAAMN,iBACJgB,MAAM,GAAI,GACVC,KAAI,SAACC,EAAMC,GAAP,OAEH,yBAAKC,IAAKD,GACR,yBAAKR,UAAS,WAAML,EAAMH,WAAa,YAAzB,2BACZ,uBAAGQ,UAAS,WAAc,IAATJ,EAAgB,kBAAoB,oBAAzC,MAAkEK,MAAO,CAAES,QAAS,OAAQC,aAAc,OAAQC,UAAW,SAAUC,WAAY,QAAS,0BAAMb,UAAU,sBAAsBQ,EAAQ,GAAtN,YAAyOD,EAAKO,OAC9O,2BAAIP,EAAKQ,SACT,6CAAoB,IAAIC,KAAKT,EAAKU,mBAAmBC,yBCiD1D/B,eAZS,SAAAC,GACtB,MAAO,CACLI,UAAWJ,EAAMK,SAASC,YAIH,SAAAyB,GACzB,MAAO,CACLC,YAAa,SAACC,GAAD,OAAUF,EClEG,SAACE,GAC3B,MAAO,CACHC,KALgB,WAMhBC,QAASF,GD+DmBG,CAAeH,QAIpClC,EA9DA,SAACQ,GAAW,IAAD,EACAE,mBALN4B,KAAKC,MAAM5B,aAAaC,QAAQ,gBAC9B,GAGI,mBACjBsB,EADiB,KACXM,EADW,OAEgB9B,oBAAS,GAFzB,mBAEjB+B,EAFiB,KAEHC,EAFG,KAIxBC,qBAAU,WACRnC,EAAMyB,YAAYC,GAClBvB,aAAaiC,QAAQ,YAAaN,KAAKO,UAAUX,MAChD,CAACA,IAMJ,OACE,yBAAKrB,UAAU,OACb,wBAAIA,UAAS,sCAAoD,IAApBL,EAAMH,UAAsB,iBAAmB,YAA/E,UACX,wBACEyC,QAAS,kBAAMN,GAASN,IACxBrB,UAAU,yCACV,kBAAC,IAAD,CAASA,UAAU,WAAWkC,GAAG,MACrB,IAATb,EACC,kBAAC,IAAD,MACE,kBAAC,IAAD,CAAUnB,MAAO,YAHvB,MAKF,wBAAIF,UAAU,YACZ,kBAAC,IAAD,CAASA,UAAU,8BAA8BkC,GAAG,KAApD,SAIF,wBAAIlC,UAAU,+BACZ,kBAAC,IAAD,CAASA,UAAU,WAAWkC,GAAG,iBAAjC,iBAIF,wBAAIlC,UAAU,+BACZ,kBAAC,IAAD,CAASA,UAAU,WAAWkC,GAAG,cAAjC,YAIF,wBAAID,QA9BiB,WACzBJ,GAAiBD,IA6BoB5B,UAAU,qBACzC,0BAAMC,MAAO,CAAEU,aAAc,QAAUX,UAAU,qCAAqCmC,GAAG,yBAAyBC,cAAY,WAAWC,gBAAc,OAAOC,gBAAc,UAA0B,IAAjBV,EAAwB,kBAAC,IAAD,MAAmB,kBAAC,IAAD,OAChO,yBAAK3B,MAAO,CAAEsC,MAAO,QAASnC,WAAY,OAASJ,UAAS,2DAAqDL,EAAMH,UAAsB,YAAyBgD,kBAAgB,0BACpL,kBAACC,EAAD,a,QEWGtD,G,OAAAA,aANS,SAAAC,GACtB,MAAO,CACLI,UAAWJ,EAAMK,SAASC,WAIfP,EA7DG,SAACQ,GAEjB,OACE,6BACE,yBAAKK,UAAU,0BACb,yBACEA,UAAS,mCAA8BL,EAAMH,WAAa,YAAjD,iBAAqEG,EAAM+C,WAA3E,YAET,yBAAK1C,UAAU,iBACb,wBACEA,UAAS,qBAAgBL,EAAMgD,YAC/B1C,MAAO,CAAEE,SAAU,SAElBR,EAAMiD,MAET,wBACE5C,UAAS,UAAKL,EAAMkD,UAAX,YACT5C,MAAO,CAAEE,SAAU,OAAQU,WAAY,MAEtClB,EAAMmD,QAGVnD,EAAMoD,YAINpD,EAAMqD,YAAc,EACnB,uBAAGhD,UAAS,UAAKL,EAAMkD,UAAX,mCAAZ,oBAEE,yBAAK7C,UAAU,iBACb,wBACEA,UAAS,UAAKL,EAAMkD,UAAX,eACT5C,MAAO,CAAEE,SAAU,SAEnB,uBAAGH,UAAU,sDAGf,wBACEA,UAAS,UAAKL,EAAMkD,UAAX,YACT5C,MAAO,CAAEE,SAAU,OAAQU,WAAY,MAFzC,KAIKlB,EAAMqD,WAJX,OAUR,yBACEhD,UAAS,gCAA2BL,EAAM+C,WAAjC,mBCjCJO,EAhBS,SAACtD,GACvB,IAAIuD,EAIJ,OAHAA,EAAiBvD,EAAMwD,gBAIrB,6BACE,6BACE,uBAAGnD,UAAU,0CAAb,cACckD,MCkIP/D,G,OAAAA,aANS,SAAAC,GACvB,MAAO,CACNI,UAAWJ,EAAMK,SAASC,WAIbP,EAxII,SAACQ,GAAW,IAc1ByD,EASAC,EAvByB,EACSxD,mBAAS,IADlB,mBACtByD,EADsB,KAGzBC,GAHyB,KAGb,IACZC,EAAa,GAEbC,EAAiB9D,EAAM+D,UAAUC,QAAO,SAACC,GAG5C,OAFAL,EAAUM,KAAKD,EAAUE,gBACzBN,EAAWK,KAAKD,EAAUG,gBACnBH,EAAUxE,MAAM4E,cAAcC,SAASX,EAAYU,kBAO3D,IAAK,IAAIE,KAAKX,EACTA,EAAUW,GAAK,KAClBd,EAAc,YAOhB,IAAK,IAAIc,KAAKV,EACTA,EAAWU,GAAK,KACnBb,EAAY,YAOd,OADAc,QAAQC,MAEP,yBAAKpE,UAAU,aACd,yBAAKA,UAAU,6BAUboD,GACA,yBAAKpD,UAAU,cACd,yBAAKA,UAAU,mCAAf,2BAIDqD,GACA,yBAAKrD,UAAU,cACd,yBAAKA,UAAU,sCAAf,qBAKH,2BAAOA,UAAU,SAChB,2BAAOA,UAAU,cAChB,4BACC,yCACA,wBAAIA,UAAU,cACd,wBAAIA,UAAU,WACd,wBAAIA,UAAU,cACd,wBAAIA,UAAU,eAGhB,+BACEyD,EAAenD,KAAI,SAAC+D,EAAM7D,GAAP,OACnB,wBAAIC,IAAKD,GAER,wBAAIR,UAAS,UAAKL,EAAMH,WAAa,aAAxB,MAA0C6E,EAAKjF,OAC5D,wBAAIY,UAAS,UAAKqE,EAAKP,eAAiB,GAAtB,kBAA+C,GAApD,YAA0DnE,EAAMH,WAAa,eACxF6E,EAAKC,UACLD,EAAKP,gBAAkB,EACvB,GAEC,6BACC,uBAAG9D,UAAS,gDAA2CL,EAAM4E,gBAC3DF,EAAKP,kBAKX,wBAAI9D,UAAS,UAAKL,EAAMH,WAAa,aAAxB,MACX6E,EAAKG,OACLH,EAAKP,gBAAkB,EACvB,GAEC,6BACC,uBAAG9D,UAAS,gDAA2CL,EAAM8E,aAC3DJ,EAAKP,kBAKX,wBAAI9D,UAAS,UAAKqE,EAAKN,eAAiB,GAAtB,oBAAiD,GAAtD,YAA4DpE,EAAMH,WAAa,eAC1F6E,EAAKK,UACLL,EAAKN,gBAAkB,EACvB,GAEC,6BACC,uBAAG/D,UAAS,gDAA2CL,EAAMgF,gBAC3DN,EAAKN,kBAKX,wBAAI/D,UAAS,UAAKL,EAAMH,WAAa,aAAxB,MACX6E,EAAKO,OACLP,EAAKQ,aAAe,EACpB,GAEC,6BACC,uBAAG7E,UAAS,gDAA2CL,EAAMmF,eAC3DT,EAAKQ,0B,iBC7GLE,EAAqB,WAChC,OAAO,SAAC5D,GACNA,EAAS,CAAEG,KAZoB,wBAa/B,IAIM0D,EAAYC,IAAMC,IAJH,0CAKfC,EAAeF,IAAMC,IAJH,kDAKlBE,EAAcH,IAAMC,IAJH,+CAIsB,CAAEG,QAAU,CAAE,mBAAqB,sCAGhFJ,IACGK,IAAI,CAACN,EAAWG,EAAcC,IAC9BG,KACCN,IAAMO,QAAO,WACX,IAAMC,EAAY,wCACZC,EAAe,wCACfC,EAAc,wCACpBxE,EAAS,CACPG,KAhCkB,iBAiClBC,QAASkE,EAAapB,KAAKuB,UAAU,KAEvCzE,EAAS,CACPG,KAjCmB,kBAkCnBC,QAASkE,EAAapB,KAAKuB,UAAUvF,MAAM,GAAI,KAEjDc,EAAS,CACPG,KApCmB,kBAqCnBC,QAASkE,EAAapB,KAAKwB,oBAE7B1E,EAAS,CACPG,KAvCoB,mBAwCpBC,QAASkE,EAAapB,KAAKyB,SAE7B3E,EAAS,CACPG,KA1CgB,eA2ChBC,QAASmE,EAAgBrB,KAAK0B,WAEhC5E,EAAS,CACPG,KA7Ce,cA8CfC,QAASoE,EAAetB,KAAK2B,WAIlCC,OAAM,SAACC,GACN/B,QAAQC,IAAI8B,GACZ/E,EAAS,CAAEG,KA1Da,mBA0DWC,QAAS,0B,OC+FrCpC,eAZS,SAACC,GACvB,MAAO,CACL+G,WAAY/G,EAAME,MAAM8G,eAID,SAACjF,GAC1B,MAAO,CACLkF,aAAc,kBAAMlF,EAAS4D,SAIlB5F,EAvJS,SAACQ,GAAW,IAAD,EACGE,mBAAS,IADZ,mBAC1BsG,EAD0B,KACdG,EADc,KAE3BC,EAAgBC,iBAAO,MAE7B1E,qBAAU,WACJnC,EAAMwG,WAAWM,OAAS,GAC5BH,EAAc3G,EAAMwG,WAAW9F,MAAMV,EAAMwG,WAAWM,OAAS,OAEhE,CAAC9G,EAAMwG,aAEV,IAAMO,EAAYC,uBAChB,SAACR,GACC,GAAIA,EAAWM,QAAU,EAAG,OAAO,EACnC,IAAMpC,EAAO8B,EACPS,EAAOC,IAAUN,EAAcO,SAE/BvE,EAAQ,IADyC,EAAtB,GAE3BwE,EAAS,IAFO,GAAuB,GAIvCC,EAAIH,MAEPI,OACCJ,IAAUxC,GAAM,SAAU6C,GACxB,OAAO,IAAIlG,KAAKkG,EAAC,KAAW,YAG/BC,MAAM,CAAC,EAAG5E,IAEP6E,EAAKP,MAERI,OAAO,CACN,EACAJ,IAAOxC,GAAM,SAAU6C,GACrB,OAAQA,EAAC,oBAGZC,MAAM,CAACJ,EAAQ,IAEZM,EAAQT,EACXU,OAAO,QACPC,MAAMlD,GACNmD,KAAK,OAAQ,QACbA,KAAK,SAAU,WACfA,KAAK,SAAU,aACfA,KAAK,eAAgB,GACrBA,KAAK,SAAU,WACfA,KAAK,SAAU,WACfA,KACC,IACAX,MAEGG,GAAE,SAAUE,GACX,OAAOF,EAAE,IAAIhG,KAAKkG,EAAC,KAAW,YAE/BO,GAAE,SAAUP,EAAGhD,GACd,OACSkD,EACLF,EAAC,eAAqBA,EAAC,eAAqBA,EAAC,kBAQlDQ,MAAMb,MAGPc,EAAeN,EAAMO,OAAOC,iBAClCR,EACGG,KAAK,mBAAoBG,EAAe,IAAMA,GAC9CH,KAAK,oBAAqBG,GAC1BG,aACAC,SAASpI,EAAMqI,QAAU,IAAO,GAChCR,KAAK,oBAAqB,GAE7BZ,EACGqB,UAAU,QACV5D,KAAKA,EAAKhE,MAAMgE,EAAKoC,OAAS,IAC9ByB,QACAZ,OAAO,UACPE,KAAK,OAAQ,WACbA,KAAK,SAAU,WACfA,KAAK,IAAK,GACVA,KAAK,SAAU,WACfA,KAAK,MAAM,SAAUN,GACpB,OAAOF,EAAE,IAAIhG,KAAKkG,EAAC,KAAW,YAE/BM,KAAK,MAAM,SAAUN,GASpB,OAAOE,EACLF,EAAC,eAAqBA,EAAC,eAAqBA,EAAC,kBAGhDiB,GAAG,aAAa,SAACjB,GAChBL,IAAUA,IAASuB,QAAQZ,KAAK,IAAK,QAEtCW,GAAG,YAAY,SAACjB,GACfL,IAAUA,IAASuB,QAAQZ,KAAK,IAAK,QAEtCvH,MAAM,UAAW,GACjB6H,aACAC,SAASpI,EAAMqI,QAAU,IAAO,GAChC/H,MAAM,UAAW,KAEtB,CAACN,EAAMqI,UAOT,OAJAlG,qBAAU,WACR4E,EAAUP,KACT,CAACA,EAAYO,IAGd,yBAAK1G,UAAU,aACb,yBAAKA,UAAU,sBAAsBC,MAAO,CAAEoI,eAAgB,SAC5D,yBACEC,IAAK/B,EACLhE,MAAM,MACNwE,OAAO,MACPwB,QAAQ,aACRC,oBAAoB,mBAIxB,yBACExI,UAAU,8BACVC,MAAO,CAAEoI,eAAgB,cCDlBlJ,eAbS,SAACC,GACrB,MAAO,CACL+G,WAAY/G,EAAME,MAAM8G,eAID,SAACjF,GAC1B,MAAO,CACLkF,aAAc,kBAAMlF,EAAS4D,SAKpB5F,EApIY,SAACQ,GAAW,IAAD,EACAE,mBAAS,IADT,mBAC7BsG,EAD6B,KACjBG,EADiB,KAE9BC,EAAgBC,iBAAO,MAE7B1E,qBAAU,WACJnC,EAAMwG,WAAWM,OAAS,GAC5BH,EAAc3G,EAAMwG,WAAW9F,MAAMV,EAAMwG,WAAWM,OAAS,OAEhE,CAAC9G,EAAMwG,aAEV,IAAMO,EAAYC,uBAChB,SAACR,GACC,GAAIA,EAAWM,QAAU,EAAG,OAAO,EACnC,IAAMpC,EAAO8B,EACPsC,EAAO5B,IAAUN,EAAcO,SAE/BvE,EAAQ,IADyC,EAAtB,GAE3BwE,EAAS,IAFO,GAAuB,GAIvCC,EAAIH,MAEPI,OACCJ,IAAUxC,GAAM,SAAU6C,GACxB,OAAO,IAAIlG,KAAKkG,EAAC,KAAW,YAG/BC,MAAM,CAAC,EAAG5E,IAEP6E,EAAKP,MAERI,OAAO,CACN,EACAJ,IAAOxC,GAAM,SAAU6C,GACrB,OAAQA,EAAC,oBAGZC,MAAM,CAACJ,EAAQ,IAEZ2B,EAAQD,EACXnB,OAAO,QACPC,MAAMlD,GACNmD,KAAK,OAAQ,QACbA,KAAK,SAAU,aACfA,KAAK,eAAgB,GACrBA,KAAK,SAAU,WACfA,KACC,IACAX,MAEGG,GAAE,SAAUE,GACX,OAAOF,EAAE,IAAIhG,KAAKkG,EAAC,KAAW,YAE/BO,GAAE,SAAUP,EAAGhD,GACd,OAAOkD,EAAGF,EAAC,mBAEZQ,MAAMb,MAGP8B,EAAeD,EAAMd,OAAOC,iBAClCa,EACGlB,KAAK,mBAAoBmB,EAAe,IAAMA,GAC9CnB,KAAK,oBAAqBmB,GAC1Bb,aACAC,SAASpI,EAAMqI,QAAU,IAAO,GAChCR,KAAK,oBAAqB,GAE7BiB,EACGR,UAAU,QACV5D,KAAKA,EAAKhE,MAAMgE,EAAKoC,OAAS,IAC9ByB,QACAZ,OAAO,UACPE,KAAK,OAAQ,WACbA,KAAK,SAAU,WACfA,KAAK,IAAK,GACVA,KAAK,SAAU,WACfA,KAAK,MAAM,SAAUN,GACpB,OAAOF,EAAE,IAAIhG,KAAKkG,EAAC,KAAW,YAE/BM,KAAK,MAAM,SAAUN,GACpB,OAAOE,EAAGF,EAAC,mBAEZiB,GAAG,aAAa,SAACjB,GAChBL,IAAUA,IAASuB,QAAQZ,KAAK,IAAK,QAEtCW,GAAG,YAAY,SAACjB,GACfL,IAAUA,IAASuB,QAAQZ,KAAK,IAAK,QAEtCvH,MAAM,UAAW,GACjB6H,aACAC,SAASpI,EAAMqI,QAAU,IAAO,GAChC/H,MAAM,UAAW,KAEtB,CAACN,EAAMqI,UAOT,OAJAlG,qBAAU,WACR4E,EAAUP,KACT,CAACA,EAAYO,IAGd,yBAAK1G,UAAU,aACb,yBAAKA,UAAU,sBAAsBC,MAAO,CAAEoI,eAAgB,SAC5D,yBACEC,IAAK/B,EACLhE,MAAM,MACNwE,OAAO,MACPwB,QAAQ,aACRC,oBAAoB,mBAIxB,yBACExI,UAAU,8BACVC,MAAO,CAAEoI,eAAgB,cCwBlBlJ,eAbS,SAACC,GACrB,MAAO,CACL+G,WAAY/G,EAAME,MAAM8G,eAID,SAACjF,GAC1B,MAAO,CACLkF,aAAc,kBAAMlF,EAAS4D,SAKpB5F,EAxIY,SAACQ,GAAW,IAAD,EACAE,mBAAS,IADT,mBAC7BsG,EAD6B,KACjBG,EADiB,KAE9BC,EAAgBC,iBAAO,MAE7B1E,qBAAU,WACJnC,EAAMwG,WAAWM,OAAS,GAC5BH,EAAc3G,EAAMwG,WAAW9F,MAAMV,EAAMwG,WAAWM,OAAS,OAEhE,CAAC9G,EAAMwG,aAEV,IAAMO,EAAYC,uBAChB,SAACR,GACC,GAAIA,EAAWM,QAAU,EAAG,OAAO,EACnC,IAAMpC,EAAO8B,EACPyC,EAAO/B,IAAUN,EAAcO,SAE/BvE,EAAQ,IADyC,EAAtB,GAE3BwE,EAAS,IAFO,GAAuB,GAIvCC,EAAIH,MAEPI,OACCJ,IAAUxC,GAAM,SAAU6C,GACxB,OAAO,IAAIlG,KAAKkG,EAAC,KAAW,YAG/BC,MAAM,CAAC,EAAG5E,IAEP6E,EAAKP,MAERI,OAAO,CACN,EACAJ,IAAOxC,GAAM,SAAU6C,GACrB,OAAQA,EAAC,oBAGZC,MAAM,CAACJ,EAAQ,IAEZ8B,EAAQD,EACXtB,OAAO,QACPC,MAAMlD,GACNmD,KAAK,OAAQ,QACbA,KAAK,SAAU,aACfA,KAAK,eAAgB,GACrBA,KAAK,SAAU,WACfA,KACC,IACAX,MAEGG,GAAE,SAAUE,GACX,OAAOF,EAAE,IAAIhG,KAAKkG,EAAC,KAAW,YAE/BO,GAAE,SAAUP,EAAGhD,GACd,OACSkD,EAAGF,EAAC,mBAKdQ,MAAMb,MAGPiC,EAAeD,EAAMjB,OAAOC,iBAClCgB,EACGrB,KAAK,mBAAoBsB,EAAe,IAAMA,GAC9CtB,KAAK,oBAAqBsB,GAC1BhB,aACAC,SAASpI,EAAMqI,QAAU,IAAO,GAChCR,KAAK,oBAAqB,GAE7BoB,EACGX,UAAU,QACV5D,KAAKA,EAAKhE,MAAMgE,EAAKoC,OAAS,IAC9ByB,QACAZ,OAAO,UACPE,KAAK,OAAQ,WACbA,KAAK,SAAU,WACfA,KAAK,IAAK,GACVA,KAAK,SAAU,WACfA,KAAK,MAAM,SAAUN,GACpB,OAAOF,EAAE,IAAIhG,KAAKkG,EAAC,KAAW,YAE/BM,KAAK,MAAM,SAAUN,GACpB,OAAOE,EAAGF,EAAC,mBAEZiB,GAAG,aAAa,SAACjB,GAChBL,IAAUA,IAASuB,QAAQZ,KAAK,IAAK,QAEtCW,GAAG,YAAY,SAACjB,GACfL,IAAUA,IAASuB,QAAQZ,KAAK,IAAK,QAEtCvH,MAAM,UAAW,GACjB6H,aACAC,SAASpI,EAAMqI,QAAU,IAAO,GAChC/H,MAAM,UAAW,KAEtB,CAACN,EAAMqI,UAOT,OAJAlG,qBAAU,WACR4E,EAAUP,KACT,CAACA,EAAYO,IAGd,yBAAK1G,UAAU,aACb,yBAAKA,UAAU,sBAAsBC,MAAO,CAAEoI,eAAgB,SAC5D,yBACEC,IAAK/B,EACLhE,MAAM,MACNwE,OAAO,MACPwB,QAAQ,aACRC,oBAAoB,mBAIxB,yBACExI,UAAU,8BACVC,MAAO,CAAEoI,eAAgB,cCoBlBlJ,eAZS,SAACC,GACrB,MAAO,CACL+G,WAAY/G,EAAME,MAAM8G,eAID,SAACjF,GAC1B,MAAO,CACLkF,aAAc,kBAAMlF,EAAS4D,SAIpB5F,EAzIW,SAACQ,GAAW,IAAD,EACCE,mBAAS,IADV,mBAC5BsG,EAD4B,KAChBG,EADgB,KAE7BC,EAAgBC,iBAAO,MAE7B1E,qBAAU,WACJnC,EAAMwG,WAAWM,OAAS,GAC5BH,EAAc3G,EAAMwG,WAAW9F,MAAMV,EAAMwG,WAAWM,OAAS,OAEhE,CAAC9G,EAAMwG,aAEV,IAAMO,EAAYC,uBAChB,SAACR,GACC,GAAIA,EAAWM,QAAU,EAAG,OAAO,EACnC,IAAMpC,EAAO8B,EACP4C,EAAOlC,IAAUN,EAAcO,SAE/BvE,EAAQ,IADyC,EAAtB,GAE3BwE,EAAS,IAFO,GAAuB,GAIvCC,EAAIH,MAEPI,OACCJ,IAAUxC,GAAM,SAAU6C,GACxB,OAAO,IAAIlG,KAAKkG,EAAC,KAAW,YAG/BC,MAAM,CAAC,EAAG5E,IAEP6E,EAAKP,MAERI,OAAO,CACN,EACAJ,IAAOxC,GAAM,SAAU6C,GACrB,OAAQA,EAAC,oBAGZC,MAAM,CAACJ,EAAQ,IAEViC,EAAQD,EACbzB,OAAO,QACPC,MAAMlD,GACNmD,KAAK,OAAQ,QACbA,KAAK,SAAU,WACfA,KAAK,SAAU,aACfA,KAAK,eAAgB,GACrBA,KAAK,SAAU,WACfA,KAAK,SAAU,WACfA,KACC,IACAX,MAEGG,GAAE,SAAUE,GACX,OAAOF,EAAE,IAAIhG,KAAKkG,EAAC,KAAW,YAE/BO,GAAE,SAAUP,EAAGhD,GACd,OACSkD,EAAGF,EAAC,kBAKdQ,MAAMb,MAGPoC,EAAeD,EAAMpB,OAAOC,iBAClCmB,EACGxB,KAAK,mBAAoByB,EAAe,IAAMA,GAC9CzB,KAAK,oBAAqByB,GAC1BnB,aACAC,SAASpI,EAAMqI,QAAU,IAAO,GAChCR,KAAK,oBAAqB,GAE7BuB,EACGd,UAAU,QACV5D,KAAKA,EAAKhE,MAAMgE,EAAKoC,OAAS,IAC9ByB,QACAZ,OAAO,UACPE,KAAK,OAAQ,WACbA,KAAK,SAAU,WACfA,KAAK,IAAK,GACVA,KAAK,SAAU,WACfA,KAAK,MAAM,SAAUN,GACpB,OAAOF,EAAE,IAAIhG,KAAKkG,EAAC,KAAW,YAE/BM,KAAK,MAAM,SAAUN,GACpB,OAAOE,EAAGF,EAAC,kBAEZiB,GAAG,aAAa,SAACjB,GAChBL,IAAUA,IAASuB,QAAQZ,KAAK,IAAK,QAEtCW,GAAG,YAAY,SAACjB,GACfL,IAAUA,IAASuB,QAAQZ,KAAK,IAAK,QAEtCvH,MAAM,UAAW,GACjB6H,aACAC,SAASpI,EAAMqI,QAAU,IAAO,GAChC/H,MAAM,UAAW,KAEtB,CAACN,EAAMqI,UAOT,OAJAlG,qBAAU,WACR4E,EAAUP,KACT,CAACA,EAAYO,IAGd,yBAAK1G,UAAU,aACb,yBAAKA,UAAU,sBAAsBC,MAAO,CAAEoI,eAAgB,SAC5D,yBACEC,IAAK/B,EACLhE,MAAM,MACNwE,OAAO,MACPwB,QAAQ,aACRC,oBAAoB,mBAIxB,yBACExI,UAAU,8BACVC,MAAO,CAAEoI,eAAgB,cC3FlBlJ,eANS,SAACC,GACvB,MAAO,CACL0G,OAAQ1G,EAAME,MAAM4J,WAIT/J,EA9BO,SAACQ,GACrB,IAGIwJ,EACAC,EAJAC,EAAM1J,EAAMmG,OAEZwD,EAAM,GAGV,IAAKH,KAAeE,EAClBD,EAAOC,EAAIF,GACXG,EAAIzF,KAAKuF,EAAKG,wBAEhB,IAAMzD,EAASwD,EAAIjJ,OAAO,GAAG,GAE7B,OACE,6BACc,KAAXyF,EAAgB,GACf,uBAAG9F,UAAU,sCAAb,IACG,0BAAMA,UAAU,cAAc8F,GADjC,4C,GCkCO3G,aAPS,SAACC,GACvB,MAAO,CACLC,iBAAkBD,EAAME,MAAMC,cAC9BC,UAAWJ,EAAMK,SAASC,WAIfP,EAjDO,SAACQ,GAAW,IAI5BC,EAJ2B,EACWC,oBAAS,GADpB,mBACxBN,EADwB,KACTiK,EADS,KAO/B,OAFA5J,EAAOE,aAAaC,QAAQ,aAG1B,6BACE,6BACE,uBAAGkC,QAAS,kBAAMuH,GAAkBjK,IAAgBS,UAAU,WAC5D,0BAAMA,UAAU,iCAAhB,IAAkDL,EAAMN,iBAAiBoH,OAAzE,KACJlH,EAAgB,uBAAGS,UAAU,2BAAgC,uBAAGA,UAAU,uBAIzET,GAEC,yBAAKS,UAAU,OACb,yBAAKA,UAAU,2BACZL,EAAMN,iBACJgB,MAAM,GAAI,GACVC,KAAI,SAACC,EAAMC,GAAP,OAEH,yBAAKC,IAAKD,GACR,yBAAKR,UAAS,WAAML,EAAMH,WAAa,YAAzB,yBACZ,uBAAGQ,UAAS,WAAc,IAATJ,EAAgB,kBAAoB,oBAAzC,MAAkEK,MAAO,CAAES,QAAS,OAAQC,aAAc,OAAQC,UAAW,SAAUC,WAAY,QAAS,0BAAMb,UAAU,sBAAsBQ,EAAQ,GAAtN,YAAyOD,EAAKO,OAC9O,2BAAIP,EAAKQ,SACT,6CAAoB,IAAIC,KAAKT,EAAKU,mBAAmBC,sBAK/D,mC,cCRKuI,EA1BQ,SAAA9J,GAAU,IACvB0E,EAAS1E,EAAT0E,KACFqF,EAAW,CACfnH,MAAO,IACPoH,OAAQ,QAEJC,EAAgB,CACpBC,gBAAgB,6BAAD,OAA+BxF,EAAKyF,UAApC,cAAmDzF,EAAK0F,QAAxD,KACfhD,OAAQ,IAEV,OACE,6BACE,yBAAK9G,MAAOyJ,EAAU1J,UAAU,gBAC9B,8BAAOqE,EAAK2F,IAAZ,OACA,0BAAMhK,UAAU,SAChB,8BAAOqE,EAAK4F,MAEd,yBAAKhK,MAAK,eAAOyJ,EAAP,GAAoBE,GAAiB5J,UAAU,U,SCiChDkK,G,OAjDI,SAACvK,GAChB,OACI,6BAEI,yBAAKK,UAAU,kBAEVmK,OAAOC,YAAc,IAAM,uBAAGpK,UAAU,aAAaC,MAAO,CAAEoK,UAAW,WAA9C,6CAA0G,uBAAGrK,UAAU,aAAaC,MAAO,CAAEoK,UAAW,WAA9C,iDAGtI,yBAAKrK,UAAU,OACX,yBAAKA,UAAU,gCACX,uBAAGA,UAAU,eAAb,SACA,uBAAGA,UAAU,eAAeL,EAAM2E,YAEtC,yBAAKtE,UAAU,iCACX,uBAAGA,UAAU,aAAb,QACA,uBAAGA,UAAU,aAAaL,EAAM6E,SAGpC,yBAAKxE,UAAU,kCACX,uBAAGA,UAAU,gBAAb,SACA,uBAAGA,UAAU,gBAAgBL,EAAM+E,YAGvC,yBAAK1E,UAAU,iCACX,uBAAGA,UAAU,cAAb,QACA,uBAAGA,UAAU,cAAcL,EAAM2K,YAKzC,yBAAKtK,UAAU,OAEVL,EAAMwD,iBAAmB,uBAAGnD,UAAU,YAAb,aAAkC,6BAAOL,EAAMwD,iBAEzE,uBAAGlD,MAAO,CAAEE,SAAU,QAAUH,UAAU,uBAAuBL,EAAMiE,YAI1EjE,EAAMwD,iBACH,6BACI,kBAAC,IAAD,CAAMjB,GAAE,gBAAWvC,EAAM4K,YAAa,0BAAMvK,UAAU,kCAAkCC,MAAO,CAAES,QAAS,OAAQC,aAAc,OAAQE,WAAY,MAA9G,0B,QCtCxD2J,EAAkBC,EAAQ,KAG1BC,EAAoB,CACtBC,MAAO,IACPC,OAAQ,CAAC,QAAS,UAKhBC,EAAc,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAKEC,EAAe,WACjB,OAAOC,SAAyB,IAAhBC,KAAKC,WAGnBC,EAAiB,CACnBC,QAAS,CACLC,QAAS,QAEbC,MAAO,CACHC,KAAM,OACNxD,WAAY,YACZsD,QAAS,QAEbG,QAAS,CACLH,QAAS,SAsJFjM,eANS,SAAAC,GACpB,MAAO,CACHoM,OAAQpM,EAAME,MAAMmM,cAIbtM,EAnGE,SAACQ,GAAW,IAAD,EAGoBE,mBAAS,IAH7B,mBAGjB6L,EAHiB,KAGDC,EAHC,OAIA9L,mBAhDjB,CACH,CAAEsC,GAAI,KAAM/C,MAAO,iBAAkBwM,MAAO,KAC5C,CAAEzJ,GAAI,KAAM/C,MAAO,oBAAqBwM,MAAOd,KAC/C,CAAE3I,GAAI,KAAM/C,MAAO,QAASwM,MAAOd,KACnC,CAAE3I,GAAI,KAAM/C,MAAO,QAASwM,MAAOd,KACnC,CAAE3I,GAAI,KAAM/C,MAAO,eAAgBwM,MAAOd,KAC1C,CAAE3I,GAAI,KAAM/C,MAAO,MAAOwM,MAAO,IACjC,CAAEzJ,GAAI,KAAM/C,MAAO,UAAWwM,MAAO,IACrC,CAAEzJ,GAAI,KAAM/C,MAAO,UAAWwM,MAAOd,KACrC,CAAE3I,GAAI,KAAM/C,MAAO,mBAAoBwM,MAAO,IAC9C,CAAEzJ,GAAI,KAAM/C,MAAO,YAAawM,MAAO,IACvC,CAAEzJ,GAAI,KAAM/C,MAAO,YAAawM,MAAO,IACvC,CAAEzJ,GAAI,KAAM/C,MAAO,SAAUwM,MAAOd,KACpC,CAAE3I,GAAI,KAAM/C,MAAO,iBAAkBwM,MAAOd,KAC5C,CAAE3I,GAAI,KAAM/C,MAAO,cAAewM,MAAO,QACzC,CAAEzJ,GAAI,KAAM/C,MAAO,UAAWwM,MAAOd,KACrC,CAAE3I,GAAI,KAAM/C,MAAO,YAAawM,MAAO,IACvC,CAAEzJ,GAAI,KAAM/C,MAAO,UAAWwM,MAAOd,KACrC,CAAE3I,GAAI,KAAM/C,MAAO,WAAYwM,MAAO,IACtC,CAAEzJ,GAAI,KAAM/C,MAAO,SAAUwM,MAAO,IACpC,CAAEzJ,GAAI,KAAM/C,MAAO,SAAUwM,MAAOd,KACpC,CAAE3I,GAAI,KAAM/C,MAAO,YAAawM,MAAOd,KACvC,CAAE3I,GAAI,KAAM/C,MAAO,SAAUwM,MAAOd,KACpC,CAAE3I,GAAI,KAAM/C,MAAO,aAAcwM,MAAOd,KACxC,CAAE3I,GAAI,KAAM/C,MAAO,YAAawM,MAAO,IACvC,CAAEzJ,GAAI,KAAM/C,MAAO,UAAWwM,MAAO,IACrC,CAAEzJ,GAAI,KAAM/C,MAAO,cAAewM,MAAOd,KACzC,CAAE3I,GAAI,KAAM/C,MAAO,gBAAiBwM,MAAO,IAC3C,CAAEzJ,GAAI,KAAM/C,MAAO,cAAewM,MAAO,IACzC,CAAEzJ,GAAI,KAAM/C,MAAO,cAAewM,MAAO,IACzC,CAAEzJ,GAAI,KAAM/C,MAAO,8BAA+BwM,MAAOd,KACzD,CAAE3I,GAAI,KAAM/C,MAAO,aAAcwM,MAAOd,KACxC,CAAE3I,GAAI,KAAM/C,MAAO,yBAA0BwM,MAAO,IACpD,CAAEzJ,GAAI,KAAM/C,MAAO,gBAAiBwM,MAAO,IAC3C,CAAEzJ,GAAI,KAAM/C,MAAO,QAASwM,MAAO,IACnC,CAAEzJ,GAAI,KAAM/C,MAAO,oBAAqBwM,MAAO,IAC/C,CAAEzJ,GAAI,KAAM/C,MAAO,SAAUwM,MAAOd,KACpC,CAAE3I,GAAI,KAAM/C,MAAO,cAAewM,MAAOd,KACzC,CAAE3I,GAAI,KAAM/C,MAAO,aAAcwM,MAAOd,OAMpB,mBAIjBzG,EAJiB,KAIXwH,EAJW,OAKUhM,mBAAS,IALnB,mBAKjByE,EALiB,KAKNwH,EALM,OAMIjM,mBAAS,IANb,mBAMjB2E,EANiB,KAMTuH,EANS,OAOUlM,mBAAS,IAPnB,mBAOjB6E,EAPiB,KAONsH,EAPM,OAQQnM,mBAAS,IARjB,mBAQjByK,EARiB,KAQP2B,EARO,OASUpM,mBAAS,IATnB,mBASjB0K,EATiB,KASN2B,EATM,OAUUrM,mBAAS,IAVnB,mBAUjB+D,EAViB,KAUNuI,EAVM,OAWsBtM,mBAAS,IAX/B,mBAWjBsD,EAXiB,KAWAiJ,EAXA,KAalBC,EAAiB1M,EAAM6L,OAAOlL,KAAI,SAAAC,GACpC,MAAO,CAAE4B,GAAI5B,EAAK+L,UAAWlN,MAAOmB,EAAKnB,MAAOwM,MAAOnK,KAAKC,MAAMnB,EAAKiE,QAASF,UAAW7C,KAAKC,MAAMnB,EAAK+D,WAAYI,UAAWjD,KAAKC,MAAMnB,EAAKmE,WAAY4F,SAAU7I,KAAKC,MAAMnB,EAAKqE,QAAS2H,gBAAiB,IAAIvL,KAAKT,EAAKgM,iBAAiBC,qBAGrP1K,qBAAU,WACN,GAA4B,IAAxBnC,EAAM6L,OAAO/E,OAAc,CAK3BoF,EAFWQ,MAIhB,CAAC1M,IAGJ,IAAM8M,EAAe,CACjB3C,UAAWe,EAAY,GACvBd,QAASc,EAAYA,EAAYpE,OAAS,GAC1CuD,IAAK,EACLC,IAAK5F,EAAKqI,QAAO,SAACzC,EAAK1J,GAAN,OAAgBA,EAAKqL,MAAQ3B,EAAM1J,EAAKqL,MAAQ3B,IAAM,IAGrE0C,EAAaC,cACd3F,OAAO5C,EAAK/D,KAAI,SAAA4G,GAAC,OAAIA,EAAE0E,UACvBzE,MAAM0D,GAELgC,EAAe,SAACC,GAAoC,IAA/BhG,EAA8B,uDAApB,CAAE8E,MAAO,MAE1C,OAAO,WACHD,EAAkB,GAAD,OAAImB,EAAIC,WAAWnK,KAAnB,aAA4BkE,EAAQ8E,QACrDG,EAAUjF,EAAQ8E,OAClBO,EAAa,GAAD,OAAIW,EAAIC,WAAWnK,OAC/BkJ,EAAahF,EAAQxC,WACrB0H,EAAalF,EAAQpC,WACrBuH,EAAYnF,EAAQwD,UACpB4B,EAAapF,EAAQ3E,IACrBiK,EAAmBtF,EAAQyF,mBAI7BS,GAAe,WACjBrB,EAAkB,KAGtB,OACI,6BACI,kBAAC,EAAD,CAAYrH,UAAWA,EAAWV,UAAWA,EAAWY,OAAQA,EAAQE,UAAWA,EAAW4F,SAAUA,EAAUnH,gBAAiBA,EAAiBoH,UAAWA,IAC/J,kBAAC,IAAD,KAAemB,GACf,kBAAC,gBAAD,CACIuB,iBAAkBvC,EAClBwC,WAAW,cACX3K,MAAO,IACPwE,OAAQ,IACRoG,WAAS,IAET,kBAAC,cAAD,CAAaC,UAAW5C,IACnB,qBAAG6C,YACY/M,KAAI,SAAAwM,GACZ,IAAMhG,EAAUzC,EAAKiJ,MAAK,SAAAC,GAAC,OAAIA,EAAEpL,KAAO2K,EAAI3K,MAC5C,OACI,kBAAC,YAAD,CACI1B,IAAKqM,EAAIU,OACTJ,UAAWN,EACXxB,KAAMxE,EAAU6F,EAAW7F,EAAQ8E,OA/IjD,OAgJc3L,MAAOiL,EACP2B,aAAcA,EAAaC,EAAKhG,GAChCkG,aAAcA,YAOtC,kBAAC,EAAD,CAAgB3I,KAAMoI,Q,iBCtLlCgB,KAAE,WACEA,IAAE,uBAAuBtF,GAAG,SAAS,WACnCsF,IAAEC,MAAMC,YAAY,QAAQC,KAAK,SAASD,YAAY,c,wBCiI7CxO,eAdS,SAACC,GACxB,MAAO,CACNyO,cAAezO,EAAME,MAAMwO,UAC3BrC,WAAYrM,EAAME,MAAMmM,WACxBsC,eAAgB3O,EAAME,MAAM8G,eAIH,SAACjF,GAC3B,MAAO,CACNkF,aAAc,kBAAMlF,EAAS4D,SAIhB5F,EArHF,SAACQ,GAKb,OAJAmC,qBAAU,WACTnC,EAAM0G,iBACJ,IAGF,yBAAKrG,UAAU,QAId,yBAAKA,UAAU,aACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,aACd,kBAAC,EAAD,CAAiBmD,gBAAiBxD,EAAMkO,cAActB,oBASxD,yBAAKvM,UAAU,OACd,yBAAKA,UAAU,mDACd,kBAAC,EAAD,CACC4C,KAAK,YACLE,MAAOnD,EAAMkO,cAAcvJ,UAC3BtB,WAAYrD,EAAMkO,cAAc/J,eAChCnB,WAAW,qBACXD,WAAW,MACXG,UAAU,cACVE,YAAa,kBAAC,EAAD,SAIf,yBAAK/C,UAAU,mDACd,kBAAC,EAAD,CACC4C,KAAK,SACLE,MAAOnD,EAAMkO,cAAcrJ,OAC3BxB,WAAYrD,EAAMkO,cAAc/J,eAChCnB,WAAW,sBACXD,WAAW,OACXG,UAAU,eACVE,YAAa,kBAAC,EAAD,SAGf,yBAAK/C,UAAU,mDACd,kBAAC,EAAD,CACC4C,KAAK,YACLE,MAAOnD,EAAMkO,cAAcnJ,UAC3B1B,WAAYrD,EAAMkO,cAAc9J,eAChCpB,WAAW,sBACXD,WAAW,QACXG,UAAU,eACVE,YAAa,kBAAC,EAAD,SAGf,yBAAK/C,UAAU,mDACd,kBAAC,EAAD,CACC4C,KAAK,WACLE,MAAOnD,EAAMkO,cAAcjJ,OAC3B5B,WAAYrD,EAAMkO,cAAchJ,YAChClC,WAAW,oBACXD,WAAW,OACXG,UAAU,OACVE,YAAa,kBAAC,EAAD,UAKhB,kBAAC,EAAD,MAEA,yBAAK/C,UAAU,OACd,yBAAKA,UAAU,YAWd,kBAAC,EAAD,CACC0D,UAAW/D,EAAM8L,WACjBlH,cAAc,cACdE,WAAW,eACXE,cAAc,eACdG,aAAa,eAIf,yBAAK9E,UAAU,YACd,kBAAC,EAAD,a,iBCtESgO,EApCI,WAAO,IAAD,EACYnO,oBAAS,GADrB,mBACLoO,GADK,aAEFC,YAAgB,cAAc,GAF5B,mBAEjBC,EAFiB,KAEZC,EAFY,KAUxB,OACC,6BACcD,GACZ,yBAAKnO,UAAU,kBACd,yBAAKA,UAAU,qCACd,yBAAKA,UAAU,aACd,uBAAGiC,QAZgB,WACxBgM,GAAc,GACdG,GAAO,IAU4BpO,UAAU,sDACxC,uBAAGA,UAAU,aAAb,+QAOC,6BACA,6BARD,oCC+CQb,eANS,SAAAC,GACpB,MAAO,CACHiP,YAAajP,EAAMkP,QAAQC,kBAIpBpP,EA/DQ,SAACQ,GAAW,IAAD,EACIE,oBAAS,GADb,mBACvB2O,EADuB,KACZC,EADY,OAEY5O,mBAAS,IAFrB,6BAU9B,OACI,yBAAKG,UAAU,aAEX,yBAAKA,UAAU,OACX,wBAAIA,UAAU,YAAYC,MAAO,CAACY,WAAW,MAA7C,iBAGJ,yBAAKb,UAAU,OAEX,yBAAKA,UAAU,oCACX,2BAAOsB,KAAK,WAAWtB,UAAU,6BAA6BmC,GAAG,gBAAgBF,QAd5E,WACjBwM,GAAcD,IAasGE,eAAgBF,IACxH,2BAAOxO,UAAU,uBAAuB2O,QAAQ,iBAAhD,aAKR,yBAAK3O,UAAU,0CAEVL,EAAM0O,YAAY/N,KAAI,SAACgO,EAAS9N,GAAV,OACnB,yBAGIC,IAAKD,EACLR,UAAS,+BAA6C,MAAnBsO,EAAQM,OAAiB,iBAAsC,MAAnBN,EAAQM,OAAiB,iBAAmB,mBAE1HJ,EACG,uBACIxO,UAAU,aACVC,MAAO,CACHsC,MAAOiM,GAAa,OACpBzH,OAAQyH,GAAa,OACrBK,WAAY,OACZxE,UAAW,WANnB,IAQMiE,EAAQQ,eAEd,yBAAK7O,MAAO,CAAEsC,MAAO,OAAQwE,OAAQ,mBCIlD5H,eAZS,SAAAC,GACpB,MAAO,CACHiN,cAAejN,EAAMkP,QAAQS,kBAIV,SAAA5N,GACvB,MAAO,CACH6N,UAAW,kBAAM7N,GC3Bd,SAAAA,GACHA,EAAS,CAAEG,KAnBY,oBAoBvB2D,IAAMC,IAAI,0CAA0CK,MAAK,SAAA0J,GACrD9N,EAAS,CAAEG,KAtBG,aAsBeC,QAAS0N,EAAK5K,KAAKuB,UAAUvF,MAAM,GAAI,QACrE4F,OAAM,SAAAC,GACL/B,QAAQC,IAAI8B,GACZ/E,EAAS,CAAEG,KAvBK,eAuBeC,QAAS,oCDyBrCpC,EAlDO,SAACQ,GAAW,IAAD,EACKE,mBAAS,IADd,mBAC1BqP,EAD0B,KACbC,EADa,KAO7B,OAJArN,qBAAU,WACNnC,EAAMqP,cACP,IAGC,yBAAKhP,UAAU,aACX,yBAAKA,UAAU,qBACX,4BACIoP,SAAU,SAACC,GAAD,OAAWF,EAAeE,EAAMjH,OAAOwD,QACjDA,MAAOsD,EACPlP,UAAU,4CAEV,4BAAQsP,MAAM,GAAGC,UAAQ,GAAzB,oBACA,4BAAQ3D,MAAM,OAAd,OACCjM,EAAM0M,cAAcmD,OAAOlP,KAAI,SAAClB,EAAOoB,GAAR,OAC5B,4BAAQC,IAAKD,EAAO8O,MAAOlQ,EAAMA,OAAQA,EAAMA,WAKtD8P,GAA+B,QAAhBA,EACZ,4BACIlP,UAAU,6CAEV,4BAAQ4L,MAAM,IAAd,uBACA,4BAAQA,MAAM,cAAd,oBACA,4BAAQA,MAAM,iBAAd,kBACA,4BAAQA,MAAM,oBAAd,yBAEF,QEGPzM,cAAQ,MAPI,SAAAgC,GACvB,MAAO,CACHsO,WAAY,kBAAMtO,GDxBf,SAAAA,GACHA,EAAS,CAAEG,KATkB,0BAU7B2D,IAAMC,IAAI,8CAA8CK,MAAK,SAAA0J,GACzD9N,EAAS,CAAEG,KAZS,oBAYeC,QAAS0N,EAAK5K,KAAKqL,SAASC,UAAUtP,MAAM,EAAG,UACnF4F,OAAM,SAAAC,GACL/B,QAAQC,IAAI8B,GACZ/E,EAAS,CAAEG,KAbW,qBAaeC,QAAS,uCCuB3CpC,EAhCM,SAACQ,GAMlB,OAJAmC,qBAAU,WACNnC,EAAM8P,gBAIN,yBAAKzP,UAAU,aAEX,yBAAKA,UAAU,QACX,kBAAC,EAAD,OAGJ,6BACI,kBAAC,EAAD,OAGJ,yBAAKA,UAAU,QACX,kBAAC,EAAD,WChBD4P,EARE,WACb,OACI,iDCCFpF,G,OAAkBC,EAAQ,KAG1BC,EAAoB,CACtBC,MAAO,IACPC,OAAQ,CAAC,QAAS,UAKhBC,EAAc,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAKEK,EAAiB,CACnBC,QAAS,CACLC,QAAS,QAEbC,MAAO,CACHC,KAAM,OACNxD,WAAY,YACZsD,QAAS,QAEbG,QAAS,CACLH,QAAS,S,IAqIFjM,aAPS,SAAAC,GACpB,MAAO,CACHoM,OAAQpM,EAAME,MAAMmM,cAKbtM,EA9EQ,SAACQ,GAAW,IAAD,EAGcE,mBAAS,IAHvB,mBAGvB6L,EAHuB,KAGPC,EAHO,OAIN9L,mBA9BhB,CACJ,CAACsC,GAAG,EAAE/C,MAAM,aAAcwM,MAAO,GACjC,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,GAC/B,CAACiE,SAAS,aAAcjE,MAAO,KAOL,mBAIvBvH,EAJuB,KAsBxBsI,GAtBwB,KAsBXC,cACd3F,OAAO5C,EAAK/D,KAAI,SAAA4G,GAAC,OAAIA,EAAE0E,UACvBzE,MAAM0D,IAELgC,EAAe,SAACC,GAAoC,IAA/BhG,EAA8B,uDAApB,CAAE8E,MAAO,MAC1C,OAAO,WACHD,EAAkB,GAAD,OAAImB,EAAIC,WAAWnK,KAAnB,aAA4BkE,EAAQ8E,UAIvDoB,EAAe,WACjBrB,EAAkB,KAGtB,OACI,6BAEI,kBAAC,IAAD,KAAeD,GACf,kBAAC,gBAAD,CACIuB,iBAAkBvC,EAClBwC,WAAW,cACX3K,MAAO,IACPwE,OAAQ,IACRoG,WAAS,IAET,kBAAC,cAAD,CAAaC,UAAW5C,IACnB,qBAAG6C,YACY/M,KAAI,SAAAwM,GACZ,IAAMhG,EAAUzC,EAAKiJ,MAAK,SAAAC,GAAC,OAAIA,EAAEpL,KAAO2K,EAAI3K,MAC5C,OACI,kBAAC,YAAD,CACI1B,IAAKqM,EAAIU,OACTJ,UAAWN,EACXxB,KAAMxE,EAAU6F,EAAW7F,EAAQ8E,OA1HjD,OA2Hc3L,MAAOiL,EACP2B,aAAcA,EAAaC,EAAKhG,GAChCkG,aAAcA,e,kBCtGnC8C,GAjDQ,SAACnQ,GAAW,IAAD,EACIE,mBAAS,IADb,mBACvBkQ,EADuB,KACZC,EADY,KAQ9B,OAJAlO,qBAAU,WACNkO,EAAarQ,EAAMsQ,MAAMN,UAAUtP,MAAM,EAAG,MAC7C,CAACV,IAGA,6BAER,yBAAKK,UAAU,OAGX,yBAAKA,UAAU,aACP,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,0DACT+P,EAAUzP,KAAI,SAAC4P,EAAU1P,GAAX,OACX,wBAAIC,IAAKD,GAAT,IAEI,uBAAG2P,KAAK,MACJ,0BAAMnQ,UAAU,iBAEpB,yBAAKA,UAAU,sDAAsDC,MAAO,CAACsC,MAAM,QAAS5B,aAAa,SAErG,uBAAGX,UAAU,mBAAkB,uBAAGA,UAAU,eAAeoQ,cAAY,SAAYF,EAASG,WACxF,uBAAGrQ,UAAU,QAAb,qBACmBkQ,EAASI,aAAe,EAAI,oCAAoBC,OAAOL,EAASI,aAAa9D,kBAEhG,uBAAGxM,UAAU,QACT,0BAAMA,UAAU,eAAc,kBAAC,KAAD,CAAYwQ,KAAM,KAAhD,QAAkF,KAAtBN,EAASO,SAAkB,oCAAkBP,EAASO,SAAlH,KADJ,KACyI,0BAAMzQ,UAAU,gBAAe,kBAAC,KAAD,CAAYwQ,KAAM,KAAjD,QAAkF,KAArBN,EAASQ,SAAiB,oCAAkBR,EAASQ,WAE3P,uBAAG1Q,UAAU,SAAb,qBACqBkQ,EAASO,UAAaP,EAASI,YAAgCK,WAAYT,EAASO,SAAWP,EAASI,YAAa,KAAKM,QAAQ,GAArF,oCAAyFV,EAASO,UAAYP,EAASI,YAAc,mCAAiB,e,oBC0P7OnR,gBAnBS,SAAAC,GACpB,MAAO,CACHyR,UAAWzR,EAAMyR,UAAUC,eAC3BC,aAAc3R,EAAMyR,UAAUG,aAC9BC,SAAU7R,EAAMyR,UAAUK,SAC1BC,SAAU/R,EAAMyR,UAAUO,SAC1B5R,UAAWJ,EAAMK,SAASC,YAIP,SAACyB,GACxB,MAAO,CACH4N,cAAe,kBAAM5N,GC9QlB,SAAAA,GACHkQ,IAAMnM,IAAI,0CAA0CK,MAAK,SAAA0J,GACrD9N,EAAS,CAAEG,KATQ,kBASeC,QAAS0N,EAAK5K,KAAKuB,UAAUvF,MAAM,GAAI,QAC1E4F,OAAM,SAAAC,GACL/B,QAAQC,IAAI8B,UD2QhBoL,gBAAiB,kBAAMnQ,GCrQpB,SAAAA,GACHkQ,IAAMnM,IAAI,4DAA4DK,MAAK,SAAA0J,GACvE9N,EAAS,CAAEG,KAlBU,oBAkBeC,QAAS0N,EAAK5K,UACnD4B,OAAM,SAAAC,GACL/B,QAAQC,IAAI8B,UDkQhBqL,YAAa,kBAAMpQ,GC5PhB,SAAAA,GACHkQ,IAAMnM,IAAI,2CAA2CK,MAAK,SAAA0J,GACtD9N,EAAS,CAAEG,KA3BM,gBA2BeC,QAAS0N,EAAK5K,KAAKmN,WACpDvL,OAAM,SAAAC,GACL/B,QAAQC,IAAI8B,UDyPhBuL,YAAa,kBAAMtQ,GCnPhB,SAAAA,GACHkQ,IAAMnM,IAAI,qDAAqDK,MAAK,SAAA0J,GAChE9N,EAAS,CAAEG,KApCQ,kBAoCeC,QAAS0N,EAAK5K,KAAKqN,wBACtDzL,OAAM,SAAAC,GACL/B,QAAQC,IAAI8B,aDmPT/G,EAnRG,SAACQ,GAAW,IAAD,EACKE,mBAAS,IADd,mBAClB8R,EADkB,KACTC,EADS,OAEY/R,mBAAS,IAFrB,mBAElBgS,EAFkB,KAEPC,EAFO,OAGDjS,mBAAS,IAHR,mBAGlBkS,EAHkB,KAGZC,EAHY,OAICnS,mBAAS,IAJV,mBAIlBoQ,EAJkB,KAIXgC,EAJW,KAQrBC,EAAc,GAGdC,EAAY,GAGZC,EAAanC,EACboC,EAAkBpC,EAAMA,EAAMxJ,OAAS,GAE3CtC,QAAQC,IAAIiO,GAGZ,IAAIC,EAAiB,EACrB,IAAK,IAAIxP,KAASsP,EACdE,GAAkBvH,SAASqH,EAAWtP,GAAOwN,aA6DjD,IAAK,IAAIpM,KAzDTpC,qBAAU,WACNnC,EAAMoP,gBACNpP,EAAM2R,kBACN3R,EAAM4R,cACN5R,EAAM8R,gBAEP,IAGH3P,qBAAU,WAGN,GAFAqI,OAAOoI,SAAS,EAAG,GAEY,IAA3B5S,EAAMkR,UAAUpK,OAAc,CAG9B,IAAM8D,EAAY5K,EAAM6S,MAAMC,OAAOC,UAC/BlS,EAAQb,EAAMkR,UAAU8B,WAAU,SAAA/P,GAAI,OAAIA,EAAK0J,YAAc/B,KAC7DnL,EAAQO,EAAMkR,UAAUrQ,GAC9BoR,EAAWxS,GAEf,GAAkC,IAA9BO,EAAMoR,aAAatK,OAAc,CAGjC,IAAM8D,EAAY5K,EAAM6S,MAAMC,OAAOC,UAC/BE,EAAgBjT,EAAMoR,aAAa4B,WAAU,SAAAE,GAAY,OAAIA,EAAavG,YAAc/B,KACxFsF,EAAWlQ,EAAMoR,aAAa6B,GAAe5B,aACnDc,EAAgBjC,GAGpB,GAA8B,IAA1BlQ,EAAMwR,SAAS1K,OAAc,CAG7B,IAAM8D,EAAY5K,EAAM6S,MAAMC,OAAOC,UACrC,IAAK,IAAIxO,KAAKvE,EAAMwR,SACZxR,EAAMwR,SAASjN,GAAGoI,YAAc/B,GAChC2H,EAAYrO,KAAKlE,EAAMwR,SAASjN,IAGxC8N,EAAQE,GAIZ,GAA8B,IAA1BvS,EAAMsR,SAASxK,OAAc,CAI7B,IAAK,IAAIwJ,KAAStQ,EAAMsR,SAChBtR,EAAMsR,SAAShB,GAAO7Q,QAAUuS,EAAQvS,OACxC+S,EAAUtO,KAAKlE,EAAMsR,SAAShB,IAGtCgC,EAASE,MAGd,CAAExS,IAGSkS,EACV,IAAK,IAAIiB,KAAKf,EACNF,EAAU3N,GAAG2L,WAAakC,EAAKe,GAAGjD,WAClCgC,EAAU3N,GAAV,KAAuB6N,EAAKe,GAAGf,MAU3C,OACI,yBAAK/R,UAAU,kBAEX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,6BACX,yBAAK+S,aAAW,cACZ,wBAAI/S,UAAS,qBAAgBL,EAAMH,WAAa,iBAAnC,oBACT,wBAAIQ,UAAU,mBAAkB,kBAAC,IAAD,CAAMA,UAAU,aAAakC,GAAG,KAAhC,SAChC,wBAAIlC,UAAU,mBACV,4BAAQoP,SAdV,SAAA4D,GACtBrT,EAAMsT,QAAQpP,KAAd,UAAsBmP,EAAE5K,OAAOwD,UAcH,4BAAQsH,cAAY,GAAEvB,EAAQvS,OAC7BO,EAAMkR,UAAUxQ,MAAM,EAAG,IAAIC,KAAI,SAAClB,EAAOoB,GAAR,OAC9B,4BAAQC,IAAKD,EAAOoL,MAAOxM,EAAMkN,WAAYlN,EAAMA,eAU3E,yBAAKY,UAAU,YACX,uBAAGA,UAAU,cAAcC,MAAO,CAAE0J,OAAQ,EAAGxJ,SAAU,OAAQU,WAAY,MAAQ8Q,EAAQvS,MAA7F,KACA,uBAAGY,UAAU,0BAAb,qBAA0D,IAAIgB,KAAK2Q,EAAQpF,iBAAiBC,mBAGhG,yBAAKxM,UAAU,YACX,4DAA4CmT,IAAff,GAA4B7B,OAAO+B,GAAgB9F,kBAChF,yDAA8C2G,IAApBd,GAAiC9B,OAAO8B,EAAgB/B,aAAa9D,oBAMvG,yBAAKxM,UAAU,mBAAmBC,MAAO,CAAE0J,OAAQ,QAE/C,yBAAK3J,UAAU,kDAEX,uBAAGA,UAAU,eAAb,WAAmC,kBAAC,KAAD,CAAWA,UAAU,YAAYwQ,KAAM,MAE1E,uBAAGxQ,UAAU,cAAcC,MAAO,CAAE0J,OAAQ,IAAMgI,EAAQrN,WAEzDqN,EAAQ7N,gBAAkB,EAAI,uBAAG7D,MAAO,CAAE0J,OAAQ,OAAS3J,UAAU,eAAvC,oBAC3B,yBAAKA,UAAU,8BACX,kBAAC,KAAD,CAAcwQ,KAAM,KAAM,uBAAGvQ,MAAO,CAAE0J,OAAQ,GAAK3J,UAAU,oBAAoB2R,EAAQ7N,iBAGjG,uBAAG9D,UAAU,cAAcC,MAAO,CAAEE,SAAU,SAA9C,eAAoE,kCAApE,QAIJ,yBAAKH,UAAU,oDACX,uBAAGA,UAAU,aAAb,UAAgC,kBAAC,KAAD,CAAWA,UAAU,YAAYwQ,KAAM,MACvE,uBAAGxQ,UAAU,YAAYC,MAAO,CAAE0J,OAAQ,IAAMgI,EAAQnN,QAEvDmN,EAAQ7N,gBAAkB,EAAI,uBAAG7D,MAAO,CAAE0J,OAAQ,OAAS3J,UAAU,aAAvC,oBAC3B,yBAAKA,UAAU,4BACX,kBAAC,KAAD,CAAcwQ,KAAM,KAAM,uBAAGvQ,MAAO,CAAE0J,OAAQ,GAAK3J,UAAU,oBAAoB2R,EAAQ7N,iBAGjG,uBAAG9D,UAAU,YAAYC,MAAO,CAAEE,SAAU,SAA5C,iBAAqEwQ,WAAWgB,EAAQnN,OAASmN,EAAQrN,UAAY,KAAKsM,QAAQ,GAAlI,MAGJ,yBAAK5Q,UAAU,sDACX,uBAAGA,UAAU,gBAAb,aAAsC,kBAAC,KAAD,CAAWA,UAAU,YAAYwQ,KAAM,MAC7E,uBAAGxQ,UAAU,eAAeC,MAAO,CAAE0J,OAAQ,IAAMgI,EAAQjN,WAE1DiN,EAAQ5N,gBAAkB,EAAI,uBAAG9D,MAAO,CAAE0J,OAAQ,OAAS3J,UAAU,gBAAvC,oBAC3B,yBAAKA,UAAU,+BACX,kBAAC,KAAD,CAAcwQ,KAAM,KAAM,uBAAGvQ,MAAO,CAAE0J,OAAQ,GAAK3J,UAAU,oBAAoB2R,EAAQ5N,iBAGjG,uBAAG/D,UAAU,eAAeC,MAAO,CAAEE,SAAU,SAA/C,mBAA0EwQ,WAAWgB,EAAQjN,UAAYiN,EAAQrN,UAAY,KAAKsM,QAAQ,GAA1I,OAEJ,yBAAK5Q,UAAU,qDACX,uBAAGA,UAAU,cAAb,YAAmC,kBAAC,KAAD,CAAWA,UAAU,YAAYwQ,KAAM,MAC1E,uBAAGvQ,MAAO,CAAE0J,OAAQ,GAAK3J,UAAU,cAAc2R,EAAQ/M,QAExD+M,EAAQ9M,aAAe,EAAI,uBAAG5E,MAAO,CAAE0J,OAAQ,OAAS3J,UAAU,cAAvC,oBAExB,yBAAKA,UAAU,6BACX,kBAAC,KAAD,CAAcwQ,KAAM,KAAM,uBAAGvQ,MAAO,CAAE0J,OAAQ,GAAK3J,UAAU,oBAAoB2R,EAAQ9M,cAGjG,uBAAG7E,UAAU,aAAaC,MAAO,CAAEE,SAAU,SAA7C,mBAAwEwQ,WAAWgB,EAAQ/M,OAAS+M,EAAQrN,UAAY,KAAKsM,QAAQ,GAArI,QAMR,yBAAK5Q,UAAU,qBACX,yBAAKA,UAAU,0BACX,uBAAGA,UAAU,cAAcC,MAAO,CAAEE,SAAU,OAAQU,WAAY,MAAlE,uBAEA,yBAAKb,UAAU,aACX,yBAAKA,UAAU,iBACX,0BAAMA,UAAU,2BAAgC,6BAChD,0BAAMA,UAAU,8BAAmC,6BACnD,0BAAMA,UAAU,6BAChB,0BAAMA,UAAU,aAAhB,+BAIR,2BAAOA,UAAU,SACb,2BAAOA,UAAU,cACb,4BACI,yCACA,wBAAIA,UAAU,cACd,wBAAIA,UAAU,WACd,wBAAIA,UAAU,cACd,wBAAIA,UAAU,eAGtB,+BACK6R,EAAUvR,KAAI,SAAC8S,EAAM5S,GAAP,OACX,wBAAIR,UAAS,UAAKL,EAAMH,WAAa,aAAxB,YAAsD,QAAd4T,EAAKrB,KAAiB,kBAAkC,WAAdqB,EAAKrB,KAAoB,qBAAqC,KAAdqB,EAAKrB,KAAc,GAAK,oBAA1J,KAAkLtR,IAAKD,GAChM,4BAAM4S,EAAKvD,UACX,4BAAKuD,EAAK9O,UACoB,IAAzB8O,EAAKC,MAAM/O,WACR,uBAAGtE,UAAU,gEAAgEoT,EAAKC,MAAM/O,YAUhG,4BAAK8O,EAAK5O,OACoB,IAAzB4O,EAAKC,MAAM/O,WACR,uBAAGtE,UAAU,8DAA8DoT,EAAKC,MAAM/O,YAG9F,4BAAK8O,EAAK1O,UACoB,IAAzB0O,EAAKC,MAAM3O,WACR,uBAAG1E,UAAU,iEAAiEoT,EAAKC,MAAM3O,YAGjG,4BAAK0O,EAAK9I,SACmB,IAAxB8I,EAAKC,MAAM/I,UACR,uBAAGtK,UAAU,+DAA+DoT,EAAKC,MAAM/I,kBASnH,yBAAKtK,UAAU,YAEX,kBAAC,GAAD,CAAgBiQ,MAAOmC,UEtO3C,IAMejT,gBANS,SAAAC,GACtB,MAAO,CACLI,UAAWJ,EAAMK,SAASC,WAIfP,EAxBf,SAAaQ,GAGX,OACE,yBAAKK,UAAS,cAASL,EAAMH,WAAa,cACxC,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAO8T,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,gBAAgBC,UAAWE,IACvC,kBAAC,IAAD,CAAOH,KAAK,aAAaC,UAAW5D,IACpC,kBAAC,IAAD,CAAO2D,KAAK,oBAAoBC,UAAWG,UCV7CC,GAAcC,QACW,cAA7B1J,OAAO2J,SAASC,UAEe,UAA7B5J,OAAO2J,SAASC,UAEhB5J,OAAO2J,SAASC,SAASvB,MACvB,2DAsCN,SAASwB,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT1O,MAAK,SAAA+O,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpV,QACf+U,UAAUC,cAAcO,YAI1BxQ,QAAQC,IACN,iHAKE8P,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBnQ,QAAQC,IAAI,sCAGR8P,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BrO,OAAM,SAAA6O,GACL3Q,QAAQ2Q,MAAM,4CAA6CA,M,aC9F3DC,GAAe,CACjBC,cAAc,EACdzG,eAAgB,GAChB0G,iBAAkB,GAClBC,gBAAgB,EAChBnG,cAAe,GACfoG,oBAAqB,IA6CVC,GA1CQ,WAAmC,IAAlChW,EAAiC,uDAAzB2V,GAAcM,EAAW,uCACrD,OAAQA,EAAO/T,MACX,ITV6B,wBSWzB,OAAO,eACAlC,EADP,CAEI4V,cAAc,IAEtB,IThBwB,oBSiBpB,OAAO,eACA5V,EADP,CAEI4V,cAAc,EACdzG,eAAgB8G,EAAO9T,UAE/B,ITpB0B,qBSqBtB,OAAO,eACAnC,EADP,CAEI4V,cAAc,EACdC,iBAAkBI,EAAO9T,UAEjC,ITxBuB,kBSyBnB,OAAO,eACAnC,EADP,CAEI8V,gBAAgB,IAExB,IT9BkB,aS+Bd,OAAO,eACA9V,EADP,CAEI2P,cAAesG,EAAO9T,QACtB2T,gBAAgB,IAExB,ITlCoB,eSmChB,OAAO,eACA9V,EADP,CAEI8V,gBAAgB,EAChBC,oBAAqBE,EAAO9T,UAEpC,QACI,OAAOnC,ICrCb2V,GAAe,CACnBO,eAAe,EACfC,mBAAoB,GACpBzH,UAAW,GACXrC,WAAY,GACZrF,WAAY,GACZ8C,QAAS,GACTnD,SAAS,GACTxG,cAAe,IAqDFiW,GAlDM,WAAmC,IAAlCpW,EAAiC,uDAAzB2V,GAAcM,EAAW,uCACrD,OAAQA,EAAO/T,MACb,IzBpB+B,sByBqB7B,OAAO,eACFlC,EADL,CAEEkW,eAAe,IAEnB,IzB3B0B,iByB4BxB,OAAO,eACFlW,EADL,CAEEkW,eAAe,EACfC,mBAAoB,GACpBzH,UAAWuH,EAAO9T,UAEtB,IzBjC4B,mByBkC1B,OAAO,eACFnC,EADL,CAEEkW,eAAe,EACfC,mBAAoBF,EAAO9T,UAE/B,IzBrC2B,kByBsCzB,OAAO,eACFnC,EADL,CAEEqM,WAAY4J,EAAO9T,UAEvB,IzBzC2B,kByB0CzB,OAAO,eACFnC,EADL,CAEEgH,WAAYiP,EAAO9T,UAEvB,IzB7C4B,mByB8C1B,OAAO,eACFnC,EADL,CAEE8J,QAASmM,EAAO9T,UAElB,IzBjDsB,eyBkDpB,sBACKnC,EADL,CAEE2G,SAAUsP,EAAO9T,UAEnB,IzBrDmB,cyBsDjB,sBACKnC,EADL,CAEEG,cAAc8V,EAAO9T,UAE7B,QACE,OAAOnC,IClEPqW,GAAU,CAAE/V,SAAS,GASZgW,GAPS,WAA8B,IAA7BtW,EAA4B,uDAApBqW,GAASJ,EAAW,uCAEjD,M9BLoB,a8BKhBA,EAAO/T,KACA,CAAE5B,QAAS2V,EAAO9T,SACpBnC,GCNP2V,GAAe,CACjBjE,eAAgB,GAChBE,aAAc,GACdI,SAAU,GACVF,SAAU,IA8BCyE,GA3BU,WAAmC,IAAlCvW,EAAiC,uDAAzB2V,GAAcM,EAAW,uCACvD,OAAQA,EAAO/T,MACX,INTuB,kBMUnB,OAAO,eACAlC,EADP,CAEI0R,eAAgBuE,EAAO9T,UAE/B,INbyB,oBMcrB,OAAO,eACAnC,EADP,CAEI4R,aAAcqE,EAAO9T,UAE7B,INjBqB,gBMkBjB,OAAO,eACAnC,EADP,CAEIgS,SAAUiE,EAAO9T,UAEzB,INrBuB,kBMsBnB,OAAO,eACAnC,EADP,CAEI8R,SAAWmE,EAAO9T,UAE1B,QACI,OAAOnC,IC1BJwW,gBAAgB,CAC3BtH,QAAS8G,GACT9V,MAAOkW,GACP/V,SAAUiW,GACV7E,UAAY8E,KCAVE,GAAc,C,MAACC,GAEfC,GAAQC,aAAYC,GAAa,GAAIC,KAAe,WAAf,EAAmBL,KAE9DM,IAASC,OACP,kBAAC,IAAD,CAAUL,MAASA,IACjB,kBAAC,GAAD,OAEFM,SAASC,eAAe,SNInB,SAAkBpC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoC,IAAIC,GAAwBrM,OAAO2J,SAAS3D,MACpDsG,SAAWtM,OAAO2J,SAAS2C,OAIvC,OAGFtM,OAAOuM,iBAAiB,QAAQ,WAC9B,IAAMzC,EAAK,UAAMuC,GAAN,sBAEP5C,KAgEV,SAAiCK,EAAOC,GAEtCyC,MAAM1C,EAAO,CACX5O,QAAS,CAAE,iBAAkB,YAE5BE,MAAK,SAAAqR,GAEJ,IAAMC,EAAcD,EAASvR,QAAQH,IAAI,gBAEnB,MAApB0R,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C5C,UAAUC,cAAc4C,MAAMzR,MAAK,SAAA+O,GACjCA,EAAa2C,aAAa1R,MAAK,WAC7B4E,OAAO2J,SAASoD,eAKpBlD,GAAgBC,EAAOC,MAG1BjO,OAAM,WACL9B,QAAQC,IACN,oEAvFA+S,CAAwBlD,EAAOC,GAI/BC,UAAUC,cAAc4C,MAAMzR,MAAK,WACjCpB,QAAQC,IACN,iHAMJ4P,GAAgBC,EAAOC,OM1B/BE,I","file":"static/js/main.fe187c18.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../../index.css';\r\n\r\nconst LatestUpdates = (props) => {\r\n  const [latestUpdates, setLatestUpdates] = useState(false);\r\n\r\n\r\n  var test\r\n  test = localStorage.getItem('dark-mode')\r\n\r\n  return (\r\n    \r\n\r\n\r\n          <div className=\"latest-updates \">\r\n             <p style={{color:\"#fff\", fontSize:\"18px\", marginLeft:\"5px\"}}> News Notifications</p>\r\n            {props.getLatestUpdates\r\n              .slice(0, -1)\r\n              .map((item, index) => (\r\n\r\n                <div key={index} >\r\n                  <div className={` ${props.modeState && 'dark-body'} note note-danger mt-2`} >\r\n                    <p className={`${test === true ? 'rgba-red-slight' : 'rgba-black-slight'}  `} style={{ padding: \"10px\", borderRadius: \"10px\", fontStyle: \"Italic\", fontWeight: \"600\" }}><span className=\"badge badge-danger\">{index + 1}</span> Title : {item.title}</p>\r\n                    <p>{item.excerpt}</p>\r\n                    <p >Published At : {new Date(item.publishedDateTime).toDateString()}</p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    getLatestUpdates: state.stats.latestUpdates,\r\n    modeState: state.darkMode.hasmode\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(LatestUpdates);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { darkModeAction } from '../../store/actions/darkModeActions';\r\nimport * as Icon from 'react-feather';\r\nimport NotificationCenter from './NotificationCenter';\r\n\r\nconst getInitialMode = () => {\r\n  const saevdMode = JSON.parse(localStorage.getItem('dark-mode'))\r\n  return saevdMode || false\r\n}\r\n\r\nconst NavBar = (props) => {\r\n  const [mode, setMode] = useState(getInitialMode())\r\n  const [notification, setNotification] = useState(false)\r\n\r\n  useEffect(() => {\r\n    props.setModeProp(mode)\r\n    localStorage.setItem('dark-mode', JSON.stringify(mode))\r\n  }, [mode])\r\n\r\n  const handleNotification = () => {\r\n    setNotification(!notification)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ul className={`nav justify-content-center ${props.modeState === false ? \"grey lighten-4\" : 'dark-body'} py-4`}>\r\n        <li\r\n          onClick={() => setMode(!mode)}\r\n          className=\"dark-mode nav-item w3-animate-opacity\">\r\n          <NavLink className=\"nav-link\" to=\"#\">\r\n            {mode === false ?\r\n              <Icon.Moon />\r\n              : <Icon.Sun color={'#ffc107'} />} </NavLink>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <NavLink className=\"nav-link w3-animate-opacity\" to=\"/\">\r\n            Home\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"nav-item w3-animate-opacity\">\r\n          <NavLink className=\"nav-link\" to=\"/demographics\">\r\n            Demographics\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"nav-item w3-animate-opacity\">\r\n          <NavLink className=\"nav-link\" to=\"/deep-dive\">\r\n            Visuals\r\n          </NavLink>\r\n        </li>\r\n        <li onClick={handleNotification} className=\"nav-item dropdown\">\r\n          <span style={{ borderRadius: \"50px\" }} className=\"nav-link  waves-effect waves-light\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">{notification === true ? <Icon.BellOff /> : <Icon.Bell />}</span>\r\n          <div style={{ width: \"370px\", marginLeft: \"0px\" }} className={`dropdown-menu dropdown-menu-right dropdown-info ${props.modeState === false ? \"bg-info\" : 'bg-info'}`} aria-labelledby=\"navbarDropdownMenuLink\">\r\n            <NotificationCenter />\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    modeState: state.darkMode.hasmode\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setModeProp: (mode) => dispatch(darkModeAction(mode))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\r\n","// Darkmode Action\r\nexport const SET_MODE = \"SET_MODE\";\r\n\r\n\r\nexport const darkModeAction = (mode) => {\r\n    return {\r\n        type: SET_MODE,\r\n        payload: mode\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./livestats.css\";\r\nimport { connect } from 'react-redux';\r\n\r\nconst LiveStats = (props) => {\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"card mt-4 view overlay\">\r\n        <div\r\n          className={`card-body card-settings  ${props.modeState && 'dark-body'} rgba-${props.hoverColor}-slight`}\r\n        >\r\n          <div className=\"container row\">\r\n            <h3\r\n              className={`card-title ${props.badgeColor}`}\r\n              style={{ fontSize: \"20px\" }}\r\n            >\r\n              {props.name}\r\n            </h3>\r\n            <h3\r\n              className={`${props.textColor} ml-auto`}\r\n              style={{ fontSize: \"20px\", fontWeight: 700 }}\r\n            >\r\n              {props.count}\r\n            </h3>\r\n          </div>\r\n          {props.activegraph}\r\n\r\n          {/* CR for new delta cases */}\r\n          \r\n          {props.todayCount <= 0 ? (\r\n            <p className={`${props.textColor} d-flex justify-content-start `}>No new cases yet</p>\r\n          ) : (\r\n              <div className=\"container row\">\r\n                <h3\r\n                  className={`${props.textColor} card-title`}\r\n                  style={{ fontSize: \"20px\" }}\r\n                >\r\n                  <i className=\"far fa-arrow-alt-circle-up cc_pointer text-small\"></i>\r\n                </h3>\r\n\r\n                <h3\r\n                  className={`${props.textColor} ml-auto`}\r\n                  style={{ fontSize: \"20px\", fontWeight: 700 }}\r\n                >\r\n                  [+{props.todayCount}]\r\n              </h3>\r\n              </div>\r\n            )}\r\n\r\n        </div>\r\n        <div\r\n          className={`mask flex-center rgba-${props.hoverColor}-slight`}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    modeState: state.darkMode.hasmode\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(LiveStats);\r\n","import React from \"react\";\r\nimport \"../../index.css\";\r\n\r\nconst UpdateLiveStats = (props) => {\r\n  let convertedTime;\r\n  convertedTime = (props.lastUpdatedTime);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p className=\"text-muted updatedat rgba-green-slight\">\r\n          Updated AT {convertedTime}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateLiveStats;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './statetable.css';\r\nimport { connect } from 'react-redux';\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nconst StateTable = (props) => {\r\n\tconst [searchValue, setSearchValue] = useState('');\r\n\r\n\tlet helperVar = [];\r\n\tlet helperVar2 = [];\r\n\t//state search filter\r\n\tlet filteredStates = props.stateData.filter((stateName) => {\r\n\t\thelperVar.push(stateName.deltaconfirmed);\r\n\t\thelperVar2.push(stateName.deltarecovered);\r\n\t\treturn stateName.state.toLowerCase().includes(searchValue.toLowerCase());\r\n\t});\r\n\r\n\t// ==============================================================================\r\n\t// labels setter and unsetter depending upon if there is any case for current date\r\n\tvar isConfirmed;\r\n\r\n\tfor (var i in helperVar) {\r\n\t\tif (helperVar[i] > 60) {\r\n\t\t\tisConfirmed = 'activate';\r\n\t\t} else {\r\n\t\t}\r\n\t}\r\n\r\n\tvar isRecover;\r\n\t// eslint-disable-next-line no-redeclare\r\n\tfor (var i in helperVar2) {\r\n\t\tif (helperVar2[i] > 35) {\r\n\t\t\tisRecover = 'activate';\r\n\t\t} else {\r\n\t\t}\r\n\t}\r\n\t// =============================================================================\r\n\r\n\tconsole.log();\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"row before-table-row mt-3\">\r\n\t\t\t\t{/* <input\r\n\t\t\t\t\tclassName={`form-control col-sm-3 ${props.modeState && 'dark-body'}`}\r\n\t\t\t\t\tid=\"tableSearch\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"Search State\"\r\n\t\t\t\t\tvalue={searchValue}\r\n\t\t\t\t\tonChange={(e) => setSearchValue(e)}\r\n\t\t\t\t/> */}\r\n\r\n\t\t\t\t{isConfirmed && (\r\n\t\t\t\t\t<div className=\"label ml-3\">\r\n\t\t\t\t\t\t<div className=\"box rgba-red-slight text-danger\">Today's High Infection</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t{isRecover && (\r\n\t\t\t\t\t<div className=\"label ml-3\">\r\n\t\t\t\t\t\t<div className=\"box rgba-green-slight text-success\">Good Recoveries</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\r\n\t\t\t<table className=\"table\">\r\n\t\t\t\t<thead className=\"thead-dark\">\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>States/UT</th>\r\n\t\t\t\t\t\t<th className=\"confirmed\"></th>\r\n\t\t\t\t\t\t<th className=\"active\"></th>\r\n\t\t\t\t\t\t<th className=\"recovered\"></th>\r\n\t\t\t\t\t\t<th className=\"deceased\"></th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{filteredStates.map((data, index) => (\r\n\t\t\t\t\t\t<tr key={index} >\r\n\t\t\t\t\t\t\t{/* <Link to={`state/${data.statecode}`}> */}\r\n\t\t\t\t\t\t\t<td className={`${props.modeState && 'dark-table'} `}>{data.state}</td>\r\n\t\t\t\t\t\t\t<td className={`${data.deltaconfirmed > 60 ? `rgba-red-slight` : ''} ${props.modeState && 'dark-table'}`}>\r\n\t\t\t\t\t\t\t\t{data.confirmed}\r\n\t\t\t\t\t\t\t\t{data.deltaconfirmed <= 0 ? (\r\n\t\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className={`far fa-arrow-alt-circle-up cc_pointer ${props.textConfirmed}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{data.deltaconfirmed}\r\n\t\t\t\t\t\t\t\t\t\t\t</i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td className={`${props.modeState && 'dark-table'} `}>\r\n\t\t\t\t\t\t\t\t{data.active}\r\n\t\t\t\t\t\t\t\t{data.deltaconfirmed <= 0 ? (\r\n\t\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className={`far fa-arrow-alt-circle-up cc_pointer ${props.textActive}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{data.deltaconfirmed}\r\n\t\t\t\t\t\t\t\t\t\t\t</i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td className={`${data.deltarecovered > 35 ? `rgba-green-slight` : ''} ${props.modeState && 'dark-table'}`}>\r\n\t\t\t\t\t\t\t\t{data.recovered}\r\n\t\t\t\t\t\t\t\t{data.deltarecovered <= 0 ? (\r\n\t\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className={`far fa-arrow-alt-circle-up cc_pointer ${props.textRecovered}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{data.deltarecovered}\r\n\t\t\t\t\t\t\t\t\t\t\t</i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td className={`${props.modeState && 'dark-table'} `}>\r\n\t\t\t\t\t\t\t\t{data.deaths}\r\n\t\t\t\t\t\t\t\t{data.deltadeaths <= 0 ? (\r\n\t\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className={`far fa-arrow-alt-circle-up cc_pointer ${props.textDeceased}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{data.deltadeaths}\r\n\t\t\t\t\t\t\t\t\t\t\t</i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tmodeState: state.darkMode.hasmode\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps)(StateTable);\r\n","import axios from \"axios\";\r\n\r\nexport const GET_LIVE_STATS = \"GET_LIVE_STATS\";\r\nexport const ERROR_LIVE_STATS = \"ERROR_LIVE_STATS\";\r\nexport const FETCHING_LIVE_STATS = \"FETCHING_LIVE_STATS\";\r\nexport const GET_STATES_DATA = \"GET_STATES_DATA\";\r\nexport const GET_TIME_SERIES = \"GET_TIME_SERIES\";\r\nexport const GET_TEST_SAMPLES = \"GET_TEST_SAMPLES\";\r\nexport const GET_FACTOIDS = \"GET_FACTOIDS\";\r\nexport const GET_UPDATES = \"GET_UPDATES\";\r\n\r\n\r\n\r\n\r\nexport const getLiveStatsAction = () => {\r\n  return (dispatch) => {\r\n    dispatch({ type: FETCHING_LIVE_STATS });\r\n    const statsRequest = \"https://api.covid19india.org/data.json\";\r\n    const factoidsRequest = \"https://api.covid19india.org/website_data.json\";\r\n    const updatesRequest = \"https://api.smartable.ai/coronavirus/news/IN\";\r\n\r\n    const statsResp = axios.get(statsRequest);\r\n    const factoidsResp = axios.get(factoidsRequest);\r\n    const updatesResp = axios.get(updatesRequest,{ headers : { \"Subscription-Key\" : \"2524213011294a6bb546d7cc09eab623\" }});\r\n\r\n\r\n    axios\r\n      .all([statsResp, factoidsResp, updatesResp])\r\n      .then(\r\n        axios.spread((...allData) => {\r\n          const allDataStats = allData[0];\r\n          const allDataFactoids = allData[1];\r\n          const allDataUpdates = allData[2];\r\n          dispatch({\r\n            type: GET_LIVE_STATS,\r\n            payload: allDataStats.data.statewise[0],\r\n          });\r\n          dispatch({\r\n            type: GET_STATES_DATA,\r\n            payload: allDataStats.data.statewise.slice(1, -1),\r\n          });\r\n          dispatch({\r\n            type: GET_TIME_SERIES,\r\n            payload: allDataStats.data.cases_time_series,\r\n          });\r\n          dispatch({\r\n            type: GET_TEST_SAMPLES,\r\n            payload: allDataStats.data.tested,\r\n          });\r\n          dispatch({\r\n            type: GET_FACTOIDS,\r\n            payload: allDataFactoids.data.factoids,\r\n          });\r\n          dispatch({\r\n            type: GET_UPDATES,\r\n            payload: allDataUpdates.data.news,\r\n          });\r\n        })\r\n      )\r\n      .catch((err) => {\r\n        console.log(err);\r\n        dispatch({ type: ERROR_LIVE_STATS, payload: \"Error. Try again\" });\r\n      });\r\n  };\r\n};\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { connect } from \"react-redux\";\r\nimport { getLiveStatsAction } from \"../../../store/actions/statActions\";\r\n\r\nconst ActiveMiniGraph = (props) => {\r\n  const [timeseries, setTimeseries] = useState([]);\r\n  const graphElement1 = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (props.timeseries.length > 1) {\r\n      setTimeseries(props.timeseries.slice(props.timeseries.length - 25));\r\n    }\r\n  }, [props.timeseries]);\r\n\r\n  const graphData = useCallback(\r\n    (timeseries) => {\r\n      if (timeseries.length <= 1) return 0;\r\n      const data = timeseries;\r\n      const svg2 = d3.select(graphElement1.current);\r\n      const margin = { top: 20, right: 10, bottom: 30, left: 0 };\r\n      const width = 100 - margin.left - margin.right;\r\n      const height = 100 - margin.top - margin.bottom;\r\n\r\n      const x = d3\r\n        .scaleTime()\r\n        .domain(\r\n          d3.extent(data, function (d) {\r\n            return new Date(d[\"date\"] + \"2020\");\r\n          })\r\n        )\r\n        .range([0, width]);\r\n\r\n      const y1 = d3\r\n        .scaleLinear()\r\n        .domain([\r\n          0,\r\n          d3.max(data, function (d) {\r\n            return +d[\"dailyconfirmed\"];\r\n          }),\r\n        ])\r\n        .range([height, 0]);\r\n\r\n      const path2 = svg2\r\n        .append(\"path\")\r\n        .datum(data)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\"stroke\", \"#007bff99\")\r\n        .attr(\"stroke-width\", 2)\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\r\n          \"d\",\r\n          d3\r\n            .line()\r\n            .x(function (d) {\r\n              return x(new Date(d[\"date\"] + \"2020\"));\r\n            })\r\n            .y(function (d, i) {\r\n              if (i === 0) {\r\n                return y1(\r\n                  d[\"dailyconfirmed\"] - d[\"dailyrecovered\"] - d[\"dailydeceased\"]\r\n                );\r\n              } else {\r\n                return y1(\r\n                  d[\"dailyconfirmed\"] - d[\"dailyrecovered\"] - d[\"dailydeceased\"]\r\n                );\r\n              }\r\n            })\r\n            .curve(d3.curveCardinal)\r\n        );\r\n\r\n      const totalLength2 = path2.node().getTotalLength();\r\n      path2\r\n        .attr(\"stroke-dasharray\", totalLength2 + \" \" + totalLength2)\r\n        .attr(\"stroke-dashoffset\", totalLength2)\r\n        .transition()\r\n        .duration(props.animate ? 2000 : 0)\r\n        .attr(\"stroke-dashoffset\", 0);\r\n\r\n      svg2\r\n        .selectAll(\".dot\")\r\n        .data(data.slice(data.length - 1))\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"fill\", \"#007bff\")\r\n        .attr(\"stroke\", \"#007bff\")\r\n        .attr(\"r\", 2)\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\"cx\", function (d) {\r\n          return x(new Date(d[\"date\"] + \"2020\"));\r\n        })\r\n        .attr(\"cy\", function (d) {\r\n          /* const today =\r\n          data[data.length - 1]['dailyconfirmed'] -\r\n          data[data.length - 1]['dailyrecovered'] -\r\n          data[data.length - 1]['dailydeceased'];\r\n        const yesterday =\r\n          data[data.length - 2]['dailyconfirmed'] -\r\n          data[data.length - 2]['dailyrecovered'] -\r\n          data[data.length - 2]['dailydeceased'];*/\r\n          return y1(\r\n            d[\"dailyconfirmed\"] - d[\"dailyrecovered\"] - d[\"dailydeceased\"]\r\n          );\r\n        })\r\n        .on(\"mouseover\", (d) => {\r\n          d3.select(d3.event.target).attr(\"r\", \"5\");\r\n        })\r\n        .on(\"mouseout\", (d) => {\r\n          d3.select(d3.event.target).attr(\"r\", \"2\");\r\n        })\r\n        .style(\"opacity\", 0)\r\n        .transition()\r\n        .duration(props.animate ? 3000 : 0)\r\n        .style(\"opacity\", 1);\r\n    },\r\n    [props.animate]\r\n  );\r\n\r\n  useEffect(() => {\r\n    graphData(timeseries);\r\n  }, [timeseries, graphData]);\r\n\r\n  return (\r\n    <div className=\"Minigraph\">\r\n      <div className=\"svg-parent fadeInUp\" style={{ animationDelay: \"0.6s\" }}>\r\n        <svg\r\n          ref={graphElement1}\r\n          width=\"200\"\r\n          height=\"130\"\r\n          viewBox=\"0 0 100 70\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        className=\"svg-parent is-blue fadeInUp\"\r\n        style={{ animationDelay: \"0.7s\" }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    timeseries: state.stats.timeSeries,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getLiveStats: () => dispatch(getLiveStatsAction()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveMiniGraph);\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { connect } from \"react-redux\";\r\nimport { getLiveStatsAction } from \"../../../store/actions/statActions\";\r\n\r\nconst ConfirmedMiniGraph = (props) => {\r\n  const [timeseries, setTimeseries] = useState([]);\r\n  const graphElement1 = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (props.timeseries.length > 1) {\r\n      setTimeseries(props.timeseries.slice(props.timeseries.length - 25));\r\n    }\r\n  }, [props.timeseries]);\r\n\r\n  const graphData = useCallback(\r\n    (timeseries) => {\r\n      if (timeseries.length <= 1) return 0;\r\n      const data = timeseries;\r\n      const svg1 = d3.select(graphElement1.current);\r\n      const margin = { top: 30, right: 10, bottom: 30, left: 0 };\r\n      const width = 100 - margin.left - margin.right;\r\n      const height = 100 - margin.top - margin.bottom;\r\n\r\n      const x = d3\r\n        .scaleTime()\r\n        .domain(\r\n          d3.extent(data, function (d) {\r\n            return new Date(d[\"date\"] + \"2020\");\r\n          })\r\n        )\r\n        .range([0, width]);\r\n\r\n      const y1 = d3\r\n        .scaleLinear()\r\n        .domain([\r\n          0,\r\n          d3.max(data, function (d) {\r\n            return +d[\"dailyconfirmed\"];\r\n          }),\r\n        ])\r\n        .range([height, 0]);\r\n\r\n      const path1 = svg1\r\n        .append(\"path\")\r\n        .datum(data)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", \"#ff073a99\")\r\n        .attr(\"stroke-width\", 2)\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\r\n          \"d\",\r\n          d3\r\n            .line()\r\n            .x(function (d) {\r\n              return x(new Date(d[\"date\"] + \"2020\"));\r\n            })\r\n            .y(function (d, i) {\r\n              return y1(d[\"dailyconfirmed\"]);\r\n            })\r\n            .curve(d3.curveCardinal)\r\n        );\r\n\r\n      const totalLength1 = path1.node().getTotalLength();\r\n      path1\r\n        .attr(\"stroke-dasharray\", totalLength1 + \" \" + totalLength1)\r\n        .attr(\"stroke-dashoffset\", totalLength1)\r\n        .transition()\r\n        .duration(props.animate ? 2000 : 0)\r\n        .attr(\"stroke-dashoffset\", 0);\r\n\r\n      svg1\r\n        .selectAll(\".dot\")\r\n        .data(data.slice(data.length - 1))\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"fill\", \"#ff073a\")\r\n        .attr(\"stroke\", \"#ff073a\")\r\n        .attr(\"r\", 2)\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\"cx\", function (d) {\r\n          return x(new Date(d[\"date\"] + \"2020\"));\r\n        })\r\n        .attr(\"cy\", function (d) {\r\n          return y1(d[\"dailyconfirmed\"]);\r\n        })\r\n        .on(\"mouseover\", (d) => {\r\n          d3.select(d3.event.target).attr(\"r\", \"5\");\r\n        })\r\n        .on(\"mouseout\", (d) => {\r\n          d3.select(d3.event.target).attr(\"r\", \"2\");\r\n        })\r\n        .style(\"opacity\", 0)\r\n        .transition()\r\n        .duration(props.animate ? 3000 : 0)\r\n        .style(\"opacity\", 1);\r\n    },\r\n    [props.animate]\r\n  );\r\n\r\n  useEffect(() => {\r\n    graphData(timeseries);\r\n  }, [timeseries, graphData]);\r\n\r\n  return (\r\n    <div className=\"Minigraph\">\r\n      <div className=\"svg-parent fadeInUp\" style={{ animationDelay: \"0.6s\" }}>\r\n        <svg\r\n          ref={graphElement1}\r\n          width=\"200\"\r\n          height=\"130\"\r\n          viewBox=\"0 0 100 60\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        className=\"svg-parent is-blue fadeInUp\"\r\n        style={{ animationDelay: \"0.7s\" }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      timeseries: state.stats.timeSeries,\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      getLiveStats: () => dispatch(getLiveStatsAction()),\r\n    };\r\n  };\r\n  \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmedMiniGraph);","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { connect } from \"react-redux\";\r\nimport { getLiveStatsAction } from \"../../../store/actions/statActions\";\r\n\r\n\r\nconst RecoveredMiniGraph = (props) => {\r\n  const [timeseries, setTimeseries] = useState([]);\r\n  const graphElement1 = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (props.timeseries.length > 1) {\r\n      setTimeseries(props.timeseries.slice(props.timeseries.length - 25));\r\n    }\r\n  }, [props.timeseries]);\r\n\r\n  const graphData = useCallback(\r\n    (timeseries) => {\r\n      if (timeseries.length <= 1) return 0;\r\n      const data = timeseries;\r\n      const svg3 = d3.select(graphElement1.current);\r\n      const margin = { top: 20, right: 10, bottom: 30, left: 0 };\r\n      const width = 100 - margin.left - margin.right;\r\n      const height = 100 - margin.top - margin.bottom;\r\n\r\n      const x = d3\r\n        .scaleTime()\r\n        .domain(\r\n          d3.extent(data, function (d) {\r\n            return new Date(d[\"date\"] + \"2020\");\r\n          })\r\n        )\r\n        .range([0, width]);\r\n\r\n      const y1 = d3\r\n        .scaleLinear()\r\n        .domain([\r\n          0,\r\n          d3.max(data, function (d) {\r\n            return +d[\"dailyconfirmed\"];\r\n          }),\r\n        ])\r\n        .range([height, 0]);\r\n\r\n      const path3 = svg3\r\n        .append(\"path\")\r\n        .datum(data)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", \"#28a74599\")\r\n        .attr(\"stroke-width\", 2)\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\r\n          \"d\",\r\n          d3\r\n            .line()\r\n            .x(function (d) {\r\n              return x(new Date(d[\"date\"] + \"2020\"));\r\n            })\r\n            .y(function (d, i) {\r\n              if (i === 0) {\r\n                return y1(d[\"dailyrecovered\"]);\r\n              } else {\r\n                return y1(d[\"dailyrecovered\"]);\r\n              }\r\n            })\r\n            .curve(d3.curveCardinal)\r\n        );\r\n\r\n      const totalLength3 = path3.node().getTotalLength();\r\n      path3\r\n        .attr(\"stroke-dasharray\", totalLength3 + \" \" + totalLength3)\r\n        .attr(\"stroke-dashoffset\", totalLength3)\r\n        .transition()\r\n        .duration(props.animate ? 2000 : 0)\r\n        .attr(\"stroke-dashoffset\", 0);\r\n\r\n      svg3\r\n        .selectAll(\".dot\")\r\n        .data(data.slice(data.length - 1))\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"fill\", \"#28a745\")\r\n        .attr(\"stroke\", \"#28a745\")\r\n        .attr(\"r\", 2)\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\"cx\", function (d) {\r\n          return x(new Date(d[\"date\"] + \"2020\"));\r\n        })\r\n        .attr(\"cy\", function (d) {\r\n          return y1(d[\"dailyrecovered\"]);\r\n        })\r\n        .on(\"mouseover\", (d) => {\r\n          d3.select(d3.event.target).attr(\"r\", \"5\");\r\n        })\r\n        .on(\"mouseout\", (d) => {\r\n          d3.select(d3.event.target).attr(\"r\", \"2\");\r\n        })\r\n        .style(\"opacity\", 0)\r\n        .transition()\r\n        .duration(props.animate ? 3000 : 0)\r\n        .style(\"opacity\", 1);\r\n    },\r\n    [props.animate]\r\n  );\r\n\r\n  useEffect(() => {\r\n    graphData(timeseries);\r\n  }, [timeseries, graphData]);\r\n\r\n  return (\r\n    <div className=\"Minigraph\">\r\n      <div className=\"svg-parent fadeInUp\" style={{ animationDelay: \"0.6s\" }}>\r\n        <svg\r\n          ref={graphElement1}\r\n          width=\"200\"\r\n          height=\"130\"\r\n          viewBox=\"0 0 100 70\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        className=\"svg-parent is-blue fadeInUp\"\r\n        style={{ animationDelay: \"0.7s\" }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      timeseries: state.stats.timeSeries,\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      getLiveStats: () => dispatch(getLiveStatsAction()),\r\n    };\r\n  };\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecoveredMiniGraph);","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { connect } from \"react-redux\";\r\nimport { getLiveStatsAction } from \"../../../store/actions/statActions\";\r\n\r\n\r\nconst DeceasedMiniGraph = (props) => {\r\n  const [timeseries, setTimeseries] = useState([]);\r\n  const graphElement1 = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (props.timeseries.length > 1) {\r\n      setTimeseries(props.timeseries.slice(props.timeseries.length - 25));\r\n    }\r\n  }, [props.timeseries]);\r\n\r\n  const graphData = useCallback(\r\n    (timeseries) => {\r\n      if (timeseries.length <= 1) return 0;\r\n      const data = timeseries;\r\n      const svg4 = d3.select(graphElement1.current);\r\n      const margin = { top: 20, right: 10, bottom: 30, left: 0 };\r\n      const width = 100 - margin.left - margin.right;\r\n      const height = 100 - margin.top - margin.bottom;\r\n\r\n      const x = d3\r\n        .scaleTime()\r\n        .domain(\r\n          d3.extent(data, function (d) {\r\n            return new Date(d[\"date\"] + \"2020\");\r\n          })\r\n        )\r\n        .range([0, width]);\r\n\r\n      const y1 = d3\r\n        .scaleLinear()\r\n        .domain([\r\n          0,\r\n          d3.max(data, function (d) {\r\n            return +d[\"dailyconfirmed\"];\r\n          }),\r\n        ])\r\n        .range([height, 0]);\r\n\r\n        const path4 = svg4\r\n        .append('path')\r\n        .datum(data)\r\n        .attr('fill', 'none')\r\n        .attr('cursor', 'pointer')\r\n        .attr('stroke', '#6c757d99')\r\n        .attr('stroke-width', 2)\r\n        .attr('cursor', 'pointer')\r\n        .attr('cursor', 'pointer')\r\n        .attr(\r\n          'd',\r\n          d3\r\n            .line()\r\n            .x(function (d) {\r\n              return x(new Date(d['date'] + '2020'));\r\n            })\r\n            .y(function (d, i) {\r\n              if (i === 0) {\r\n                return y1(d['dailydeceased']);\r\n              } else {\r\n                return y1(d['dailydeceased']);\r\n              }\r\n            })\r\n            .curve(d3.curveCardinal)\r\n        );\r\n\r\n      const totalLength4 = path4.node().getTotalLength();\r\n      path4\r\n        .attr('stroke-dasharray', totalLength4 + ' ' + totalLength4)\r\n        .attr('stroke-dashoffset', totalLength4)\r\n        .transition()\r\n        .duration(props.animate ? 2000 : 0)\r\n        .attr('stroke-dashoffset', 0);\r\n\r\n      svg4\r\n        .selectAll('.dot')\r\n        .data(data.slice(data.length - 1))\r\n        .enter()\r\n        .append('circle')\r\n        .attr('fill', '#6c757d')\r\n        .attr('stroke', '#6c757d')\r\n        .attr('r', 2)\r\n        .attr('cursor', 'pointer')\r\n        .attr('cx', function (d) {\r\n          return x(new Date(d['date'] + '2020'));\r\n        })\r\n        .attr('cy', function (d) {\r\n          return y1(d['dailydeceased']);\r\n        })\r\n        .on('mouseover', (d) => {\r\n          d3.select(d3.event.target).attr('r', '5');\r\n        })\r\n        .on('mouseout', (d) => {\r\n          d3.select(d3.event.target).attr('r', '2');\r\n        })\r\n        .style('opacity', 0)\r\n        .transition()\r\n        .duration(props.animate ? 3000 : 0)\r\n        .style('opacity', 1);\r\n    },\r\n    [props.animate]\r\n  );\r\n\r\n  useEffect(() => {\r\n    graphData(timeseries);\r\n  }, [timeseries, graphData]);\r\n\r\n  return (\r\n    <div className=\"Minigraph\">\r\n      <div className=\"svg-parent fadeInUp\" style={{ animationDelay: \"0.6s\" }}>\r\n        <svg\r\n          ref={graphElement1}\r\n          width=\"200\"\r\n          height=\"130\"\r\n          viewBox=\"0 0 100 70\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        className=\"svg-parent is-blue fadeInUp\"\r\n        style={{ animationDelay: \"0.7s\" }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      timeseries: state.stats.timeSeries,\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      getLiveStats: () => dispatch(getLiveStatsAction()),\r\n    };\r\n  };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DeceasedMiniGraph)","import React from \"react\";\r\nimport \"../../index.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst TestedSamples = (props) => {\r\n  var Obj = props.tested;\r\n\r\n  var bar = [];\r\n  var lastElement;\r\n  var last;\r\n  for (lastElement in Obj) {\r\n    last = Obj[lastElement];\r\n    bar.push(last.totalindividualstested);\r\n  }\r\n  const tested = bar.slice(-1)[0];\r\n\r\n  return (\r\n    <div>\r\n      {tested === '' ? '' :\r\n        <p className=\"tested text-muted rgba-blue-slight\">\r\n          '<span className=\"text-info \">{tested}</span>' Samples are being tested\r\n        till now.\r\n      </p>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    tested: state.stats.samples,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TestedSamples);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../../index.css';\r\n\r\nconst LatestUpdates = (props) => {\r\n  const [latestUpdates, setLatestUpdates] = useState(false);\r\n\r\n\r\n  var test\r\n  test = localStorage.getItem('dark-mode')\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p onClick={() => setLatestUpdates(!latestUpdates)} className=\"updates\">\r\n          <span className=\"badge badge-info notification\"> {props.getLatestUpdates.length} </span>\r\n\t\t\t\t\t{latestUpdates ? <i className=\"mt-1 far fa-bell-slash\"></i> : <i className=\"mt-1 far fa-bell\"></i>}\r\n        </p>\r\n      </div>\r\n\r\n      {latestUpdates && (\r\n\r\n        <div className=\"row\">\r\n          <div className=\"latest-updates col-md-6\">\r\n            {props.getLatestUpdates\r\n              .slice(0, -1)\r\n              .map((item, index) => (\r\n\r\n                <div key={index} >\r\n                  <div className={` ${props.modeState && 'dark-body'} note note-info mt-3`} >\r\n                    <p className={`${test === true ? 'rgba-red-slight' : 'rgba-black-slight'}  `} style={{ padding: \"10px\", borderRadius: \"10px\", fontStyle: \"Italic\", fontWeight: \"600\" }}><span className=\"badge badge-danger\">{index + 1}</span> Title : {item.title}</p>\r\n                    <p>{item.excerpt}</p>\r\n                    <p >Published At : {new Date(item.publishedDateTime).toDateString()}</p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n          <div>\r\n            {/* something cool in the near future */}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    getLatestUpdates: state.stats.latestUpdates,\r\n    modeState: state.darkMode.hasmode\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(LatestUpdates);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst LinearGradient = props => {\r\n  const { data } = props;\r\n  const boxStyle = {\r\n    width: 200,\r\n    margin: 'auto'\r\n  };\r\n  const gradientStyle = {\r\n    backgroundImage: `linear-gradient(to right, ${data.fromColor} , ${data.toColor})`,\r\n    height: 20\r\n  };\r\n  return (\r\n    <div>\r\n      <div style={boxStyle} className=\"display-flex\">\r\n        <span>{data.min} - </span>\r\n        <span className=\"fill\"></span>\r\n        <span>{data.max}</span>\r\n      </div>\r\n      <div style={{ ...boxStyle, ...gradientStyle }} className=\"mt8\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nLinearGradient.propTypes = {\r\n  data: PropTypes.object.isRequired\r\n};\r\n\r\nexport default LinearGradient;\r\n","import React from 'react';\r\nimport './statestats.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst StateStats = (props) => {\r\n    return (\r\n        <div>\r\n\r\n            <div className=\"container mt-5\">\r\n\r\n                {window.innerWidth <= 600 ? <p className=\"text-muted\" style={{ textAlign: \"center\" }}>Tap on the state to get statistics of it.</p> : <p className=\"text-muted\" style={{ textAlign: \"center\" }}>Hover over the state to get statistics of it.</p>}\r\n\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col stat-box rgba-red-slight\">\r\n                        <p className=\"text-danger\">Cnfrm</p>\r\n                        <p className=\"text-danger\">{props.confirmed}</p>\r\n                    </div>\r\n                    <div className=\"col stat-box rgba-blue-slight\">\r\n                        <p className=\"text-info\">Actv</p>\r\n                        <p className=\"text-info\">{props.active}</p>\r\n\r\n                    </div>\r\n                    <div className=\"col stat-box rgba-green-slight\">\r\n                        <p className=\"text-success\">Rcvrd</p>\r\n                        <p className=\"text-success\">{props.recovered}</p>\r\n\r\n                    </div>\r\n                    <div className=\"col stat-box rgba-grey-slight\">\r\n                        <p className=\"text-black\">Dcsd</p>\r\n                        <p className=\"text-black\">{props.deceased}</p>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n\r\n                    {props.lastUpdatedTime && <p className=\"col-sm-6\">Updated on<br />{props.lastUpdatedTime}</p>}\r\n\r\n                    <p style={{ fontSize: \"18px\" }} className=\"col-sm-6 state-name\">{props.stateName}</p>\r\n\r\n                </div>\r\n\r\n                {props.lastUpdatedTime &&\r\n                    <div>\r\n                        <Link to={`state/${props.stateCode}`}><span className=\"rgba-orange-slight text-warning\" style={{ padding: \"10px\", borderRadius: \"10px\", fontWeight: 500 }}>Visit State Page</span></Link>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StateStats","import React, { useState, useEffect } from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport LinearGradient from './LinearGradient.js';\r\nimport { scaleQuantile } from 'd3-scale';\r\nimport StateStats from './StateStats';\r\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\r\nimport { connect } from 'react-redux';\r\nconst INDIA_TOPO_JSON = require('./india.topo.json');\r\n\r\n\r\nconst PROJECTION_CONFIG = {\r\n    scale: 650,\r\n    center: [78.9629, 22.5937] // always in [East Latitude, North Longitude]\r\n};\r\n\r\n\r\n// Red Variants\r\nconst COLOR_RANGE = [\r\n    '#e6f5ff',\r\n    '#ccebff',\r\n    '#b3e0ff',\r\n    '#99d6ff',\r\n    '#80ccff',\r\n    '#66c2ff',\r\n    '#008ae6',\r\n    '#006bb3',\r\n    '#0099ff',\r\n    '#0099ff',\r\n    '#005c99'\r\n];\r\n\r\nconst DEFAULT_COLOR = '#EEE';\r\n\r\nconst getRandomInt = () => {\r\n    return parseInt(Math.random() * 100);\r\n};\r\n\r\nconst geographyStyle = {\r\n    default: {\r\n        outline: 'none'\r\n    },\r\n    hover: {\r\n        fill: '#ccc',\r\n        transition: 'all 350ms',\r\n        outline: 'none'\r\n    },\r\n    pressed: {\r\n        outline: 'none'\r\n    }\r\n};\r\n\r\n\r\nconst getHeatMapData = () => {\r\n    // return newArr\r\n    return [\r\n        { id: 'AP', state: 'Andhra Pradesh', value: 524 },\r\n        { id: 'AR', state: 'Arunachal Pradesh', value: getRandomInt() },\r\n        { id: 'AS', state: 'Assam', value: getRandomInt() },\r\n        { id: 'BR', state: 'Bihar', value: getRandomInt() },\r\n        { id: 'CT', state: 'Chhattisgarh', value: getRandomInt() },\r\n        { id: 'GA', state: 'Goa', value: 21 },\r\n        { id: 'GJ', state: 'Gujarat', value: 22 },\r\n        { id: 'HR', state: 'Haryana', value: getRandomInt() },\r\n        { id: 'HP', state: 'Himachal Pradesh', value: 24 },\r\n        { id: 'JH', state: 'Jharkhand', value: 26 },\r\n        { id: 'KA', state: 'Karnataka', value: 27 },\r\n        { id: 'KL', state: 'Kerala', value: getRandomInt() },\r\n        { id: 'MP', state: 'Madhya Pradesh', value: getRandomInt() },\r\n        { id: 'MH', state: 'Maharashtra', value: 556456 },\r\n        { id: 'MN', state: 'Manipur', value: getRandomInt() },\r\n        { id: 'ML', state: 'Meghalaya', value: 59 },\r\n        { id: 'MZ', state: 'Mizoram', value: getRandomInt() },\r\n        { id: 'NL', state: 'Nagaland', value: 59 },\r\n        { id: 'OR', state: 'Odisha', value: 59 },\r\n        { id: 'PB', state: 'Punjab', value: getRandomInt() },\r\n        { id: 'RJ', state: 'Rajasthan', value: getRandomInt() },\r\n        { id: 'SK', state: 'Sikkim', value: getRandomInt() },\r\n        { id: 'TN', state: 'Tamil Nadu', value: getRandomInt() },\r\n        { id: 'TG', state: 'Telangana', value: 85 },\r\n        { id: 'TR', state: 'Tripura', value: 14 },\r\n        { id: 'UT', state: 'Uttarakhand', value: getRandomInt() },\r\n        { id: 'UP', state: 'Uttar Pradesh', value: 15 },\r\n        { id: 'WB', state: 'West Bengal', value: 17 },\r\n        { id: 'WB', state: 'West Bengal', value: 17 },\r\n        { id: 'AN', state: 'Andaman and Nicobar Islands', value: getRandomInt() },\r\n        { id: 'CH', state: 'Chandigarh', value: getRandomInt() },\r\n        { id: 'DN', state: 'Dadra and Nagar Haveli', value: 19 },\r\n        { id: 'DD', state: 'Daman and Diu', value: 20 },\r\n        { id: 'DL', state: 'Delhi', value: 59 },\r\n        { id: 'JK', state: 'Jammu and Kashmir', value: 25 },\r\n        { id: 'LA', state: 'Ladakh', value: getRandomInt() },\r\n        { id: 'LD', state: 'Lakshadweep', value: getRandomInt() },\r\n        { id: 'PY', state: 'Puducherry', value: getRandomInt() }\r\n    ];\r\n};\r\n\r\n\r\n\r\nconst IndiaMap = (props) => {\r\n\r\n\r\n    const [tooltipContent, setTooltipContent] = useState('');\r\n    const [data, setData] = useState(getHeatMapData());\r\n    const [confirmed, setConfirmed] = useState('');\r\n    const [active, setActive] = useState('');\r\n    const [recovered, setRecovered] = useState('');\r\n    const [deceased, setDeceased] = useState('');\r\n    const [stateCode, setStateCode] = useState('');\r\n    const [stateName, setStateName] = useState('');\r\n    const [lastUpdatedTime, setLastUpdatedTime] = useState('');\r\n\r\n    const allStatesData = (props.states.map(item => {\r\n        return { id: item.statecode, state: item.state, value: JSON.parse(item.active), confirmed: JSON.parse(item.confirmed), recovered: JSON.parse(item.recovered), deceased: JSON.parse(item.deaths), lastupdatedtime: new Date(item.lastupdatedtime).toLocaleString() }\r\n    }))\r\n\r\n    useEffect(() => {\r\n        if (props.states.length !== 0) {\r\n\r\n            const getHeatMapData2 = () => {\r\n                return allStatesData\r\n            };\r\n            setData(getHeatMapData2())\r\n        }\r\n    }, [props])\r\n\r\n\r\n    const gradientData = {\r\n        fromColor: COLOR_RANGE[0],\r\n        toColor: COLOR_RANGE[COLOR_RANGE.length - 1],\r\n        min: 0,\r\n        max: data.reduce((max, item) => (item.value > max ? item.value : max), 0)\r\n    };\r\n\r\n    const colorScale = scaleQuantile()\r\n        .domain(data.map(d => d.value))\r\n        .range(COLOR_RANGE);\r\n\r\n    const onMouseEnter = (geo, current = { value: 'NA' }) => {\r\n\r\n        return () => {\r\n            setTooltipContent(`${geo.properties.name}: ${current.value}`);\r\n            setActive(current.value)\r\n            setStateName(`${geo.properties.name}`)\r\n            setConfirmed(current.confirmed)\r\n            setRecovered(current.recovered)\r\n            setDeceased(current.deceased)\r\n            setStateCode(current.id)\r\n            setLastUpdatedTime(current.lastupdatedtime)\r\n        };\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        setTooltipContent('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <StateStats confirmed={confirmed} stateName={stateName} active={active} recovered={recovered} deceased={deceased} lastUpdatedTime={lastUpdatedTime} stateCode={stateCode} />\r\n            <ReactTooltip>{tooltipContent}</ReactTooltip>\r\n            <ComposableMap\r\n                projectionConfig={PROJECTION_CONFIG}\r\n                projection=\"geoMercator\"\r\n                width={420}\r\n                height={520}\r\n                data-tip=\"\"\r\n            >\r\n                <Geographies geography={INDIA_TOPO_JSON}>\r\n                    {({ geographies }) =>\r\n                        geographies.map(geo => {\r\n                            const current = data.find(s => s.id === geo.id);\r\n                            return (\r\n                                <Geography\r\n                                    key={geo.rsmKey}\r\n                                    geography={geo}\r\n                                    fill={current ? colorScale(current.value) : DEFAULT_COLOR}\r\n                                    style={geographyStyle}\r\n                                    onMouseEnter={onMouseEnter(geo, current)}\r\n                                    onMouseLeave={onMouseLeave}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                </Geographies>\r\n            </ComposableMap>\r\n            <LinearGradient data={gradientData} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        states: state.stats.statesData\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(IndiaMap)","import $ from 'jquery';\r\n\r\n$(function(){\r\n    $(\".fold-table tr.view\").on(\"click\", function(){\r\n      $(this).toggleClass(\"open\").next(\".fold\").toggleClass(\"open\");\r\n    });\r\n  });","import React, { useEffect } from 'react';\r\nimport LiveStats from './LiveStats';\r\nimport UpdateLiveStats from './UpdateLiveStats';\r\nimport StateTable from './StateTable';\r\nimport { connect } from 'react-redux';\r\nimport { getLiveStatsAction } from '../../store/actions/statActions';\r\nimport ActiveMiniGraph from './minigraphs/ActiveMiniGraph';\r\nimport ConfirmedMiniGraph from './minigraphs/ConfirmedMiniGraph';\r\nimport RecoveredMiniGraph from './minigraphs/RecoveredMiniGraph';\r\nimport DeceasedMiniGraph from './minigraphs/DeceasedMiniGraph';\r\nimport TestedSamples from './TestedSamples';\r\nimport LatestUpdates from './LatestUpdates';\r\nimport IndiaMap from './geographics/IndiaMap';\r\nimport AccordianTable from './AccordianTable';\r\nimport Test from './geographics/Test';\r\n\r\nconst Home = (props) => {\r\n\tuseEffect(() => {\r\n\t\tprops.getLiveStats();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className=\"home\">\r\n\t\t\t{/* factoids banner */}\r\n\t\t\t{/* <Factoids /> */}\r\n\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-sm-12\">\r\n\t\t\t\t\t\t<UpdateLiveStats lastUpdatedTime={props.liveStatsData.lastupdatedtime} />\r\n\t\t\t\t\t</div>\r\n{/* \r\n\t\t\t\t\t<div className=\"col-sm-12\">\r\n\t\t\t\t\t\t<LatestUpdates />\r\n\t\t\t\t\t</div> */}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* stats cards  */}\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-sm-6 col-lg-3 d-flex justify-content-center\">\r\n\t\t\t\t\t\t<LiveStats\r\n\t\t\t\t\t\t\tname=\"Confirmed\"\r\n\t\t\t\t\t\t\tcount={props.liveStatsData.confirmed}\r\n\t\t\t\t\t\t\ttodayCount={props.liveStatsData.deltaconfirmed}\r\n\t\t\t\t\t\t\tbadgeColor=\"badge badge-danger\"\r\n\t\t\t\t\t\t\thoverColor=\"red\"\r\n\t\t\t\t\t\t\ttextColor=\"text-danger\"\r\n\t\t\t\t\t\t\tactivegraph={<ConfirmedMiniGraph />}\r\n\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-sm-6 col-lg-3 d-flex justify-content-center\">\r\n\t\t\t\t\t\t<LiveStats\r\n\t\t\t\t\t\t\tname=\"Active\"\r\n\t\t\t\t\t\t\tcount={props.liveStatsData.active}\r\n\t\t\t\t\t\t\ttodayCount={props.liveStatsData.deltaconfirmed}\r\n\t\t\t\t\t\t\tbadgeColor=\"badge badge-primary\"\r\n\t\t\t\t\t\t\thoverColor=\"blue\"\r\n\t\t\t\t\t\t\ttextColor=\"text-primary\"\r\n\t\t\t\t\t\t\tactivegraph={<ActiveMiniGraph />}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-sm-6 col-lg-3 d-flex justify-content-center\">\r\n\t\t\t\t\t\t<LiveStats\r\n\t\t\t\t\t\t\tname=\"Recovered\"\r\n\t\t\t\t\t\t\tcount={props.liveStatsData.recovered}\r\n\t\t\t\t\t\t\ttodayCount={props.liveStatsData.deltarecovered}\r\n\t\t\t\t\t\t\tbadgeColor=\"badge badge-success\"\r\n\t\t\t\t\t\t\thoverColor=\"green\"\r\n\t\t\t\t\t\t\ttextColor=\"text-success\"\r\n\t\t\t\t\t\t\tactivegraph={<RecoveredMiniGraph />}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-sm-6 col-lg-3 d-flex justify-content-center\">\r\n\t\t\t\t\t\t<LiveStats\r\n\t\t\t\t\t\t\tname=\"Deceased\"\r\n\t\t\t\t\t\t\tcount={props.liveStatsData.deaths}\r\n\t\t\t\t\t\t\ttodayCount={props.liveStatsData.deltadeaths}\r\n\t\t\t\t\t\t\tbadgeColor=\"badge badge-light\"\r\n\t\t\t\t\t\t\thoverColor=\"grey\"\r\n\t\t\t\t\t\t\ttextColor=\"#ccc\"\r\n\t\t\t\t\t\t\tactivegraph={<DeceasedMiniGraph />}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<TestedSamples />\r\n\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-lg-6\">\r\n\t\t\t\t\t\t{/* State wise Table */}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{/* <AccordianTable \r\n\t\t\t\t\t\tstateData={props.statesData}\r\n\t\t\t\t\t\ttextConfirmed=\"text-danger\"\r\n\t\t\t\t\t\ttextActive=\"text-primary\"\r\n\t\t\t\t\t\ttextRecovered=\"text-success\"\r\n\t\t\t\t\t\ttextDeceased=\"text-dark\"\r\n\t\t\t\t\t\t/> */}\r\n\r\n\t\t\t\t\t\t<StateTable\r\n\t\t\t\t\t\t\tstateData={props.statesData}\r\n\t\t\t\t\t\t\ttextConfirmed=\"text-danger\"\r\n\t\t\t\t\t\t\ttextActive=\"text-primary\"\r\n\t\t\t\t\t\t\ttextRecovered=\"text-success\"\r\n\t\t\t\t\t\t\ttextDeceased=\"text-dark\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"col-lg-6\">\r\n\t\t\t\t\t\t<IndiaMap />\r\n\t\t\t\t\t\t{/* <Test/> */}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tliveStatsData: state.stats.liveStats,\r\n\t\tstatesData: state.stats.statesData,\r\n\t\ttimeSeriesData: state.stats.timeSeries,\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tgetLiveStats: () => dispatch(getLiveStatsAction()),\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React, { useState } from 'react';\r\nimport './demographics.css';\r\nimport { useEffectOnce, useLocalStorage } from 'react-use'\r\n\r\nconst BoxMessage = () => {\r\n\tconst [messageBox, setMessageBox] = useState(true)\r\n\tconst [box, setBox] = useLocalStorage('messageBox', true)\r\n\r\n\tconst handleMessageBox = () => {\r\n\t\tsetMessageBox(false)\r\n\t\tsetBox(false)\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{messageBox, box &&\r\n\t\t\t\t<div className=\"card-container\">\r\n\t\t\t\t\t<div className=\"card rgba-blue-slight card-styles\">\r\n\t\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t\t<i onClick={handleMessageBox} className=\"d-flex justify-content-end fas fa-times text-info\"></i>\r\n\t\t\t\t\t\t\t<p className=\"card-text\">\r\n\r\n\t\t\t\t\t\t\t\tIt is important that we do not think of these as just tiny boxes,\r\n\t\t\t\t\t\t\t\tnumbers, or just another part of statistics - among these are our\r\n\t\t\t\t\t\t\t\tneighbors, our teachers, our healthcare workers, our supermarket\r\n\t\t\t\t\t\t\t\tvendors, our friends, our co-workers, our children or our\r\n\t\t\t\t\t\t\t\tgrandparents.\r\n\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t<br />\r\n          \t\t\t\t\t\tAmong these are our people.\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default BoxMessage;\r\n","import React, { useState } from 'react';\r\nimport './demographics.css'\r\nimport { connect } from 'react-redux';\r\nimport PatientModel from './PatientModel';\r\n\r\nconst PatientHeatMap = (props) => {\r\n    const [isChecked, setIsChecked] = useState(false)\r\n    const [patientNumber, setPatientNumber] = useState('')\r\n\r\n\r\n    // expand toggle switch\r\n    const handleToggle = () => {\r\n        setIsChecked(!isChecked)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n\r\n            <div className=\"row\">\r\n                <h2 className=\"text-info\" style={{fontWeight:600}}>Demographics</h2>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n\r\n                <div className=\"col custom-control custom-switch\">\r\n                    <input type=\"checkbox\" className=\"custom-control-input sizer\" id=\"customSwitch1\" onClick={handleToggle} defaultChecked={isChecked} />\r\n                    <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Expand </label>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"row d-flex justify-content-center mt-5\">\r\n\r\n                {props.patientData.map((patient, index) => (\r\n                    <div\r\n                        // onClick={() => setPatientNumber(patient.patientnumber)}\r\n                        // data-toggle=\"modal\" data-target=\"#modalPush\"\r\n                        key={index}\r\n                        className={`expanded-patient-box ${patient.gender === \"F\" ? 'pink lighten-1' : patient.gender === \"M\" ? 'blue lighten-1' : 'grey lighten-2'}`}>\r\n\r\n                        {isChecked ?\r\n                            <p\r\n                                className=\"text-muted\"\r\n                                style={{\r\n                                    width: isChecked && \"60px\",\r\n                                    height: isChecked && \"50px\",\r\n                                    lineHeight: \"60px\",\r\n                                    textAlign: \"center\",\r\n                                }}>\r\n                                P{patient.patientnumber}</p>\r\n                            :\r\n                            <div style={{ width: \"20px\", height: \"20px\" }}>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            {/* <PatientModel patientNumber={patientNumber} patientData={props.patientData} /> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        patientData: state.patient.getPatientData\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(PatientHeatMap)","import React, { useEffect, useState } from 'react';\r\nimport './demographics.css'\r\nimport { connect } from 'react-redux';\r\nimport { getStatesAction } from '../../store/actions/patientActions';\r\n\r\nconst SelectOptions = (props) => {\r\nconst [stateSelect, setStateSelect] = useState('')\r\n\r\n    useEffect(() => {\r\n        props.getStates()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row select-option\">\r\n                <select\r\n                    onChange={(event) => setStateSelect(event.target.value)}\r\n                    value={stateSelect}\r\n                    className=\" btn btn-outline-primary dropdown-toggle\"\r\n                >\r\n                    <option Value=\"\" disabled>--Select State--</option>\r\n                    <option value=\"all\">All</option>\r\n                    {props.allStatesData.sort().map((state, index) => (\r\n                        <option key={index} Value={state.state}>{state.state}</option>\r\n                    ))}\r\n                </select>\r\n\r\n\r\n                {stateSelect && stateSelect !== 'all' ?\r\n                    <select\r\n                        className=\"  btn btn-outline-primary dropdown-toggle\"\r\n                    >\r\n                        <option value=\"\">--Select District--</option>\r\n                        <option value=\"genderwise\">Gender Wise Data</option>\r\n                        <option value=\"currentstatus\">Current Status</option>\r\n                        <option value=\"transmissiontype\">Type of Transmission</option>\r\n                    </select>\r\n                    : ''}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allStatesData: state.patient.getStatesData\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getStates: () => dispatch(getStatesAction())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectOptions)","import axios from \"axios\"\r\n\r\nexport const GET_PATIENT_DATA = \"GET_PATIENT_FETCH\"\r\nexport const FETCHING_PATIENT_DATA = \"FETCHING_PATIENT_DATA\"\r\nexport const ERROR_PATIENT_DATA = \"ERROR_PATIENT_DATA\"\r\nexport const GET_STATES = \"GET_STATES\"\r\nexport const FETCHING_STATES = \"FETCHING_STATES\"\r\nexport const ERROR_STATES = \"ERROR_STATES\"\r\n\r\n\r\nexport const getPatientData = () => {\r\n    return dispatch => {\r\n        dispatch({ type: FETCHING_PATIENT_DATA })\r\n        axios.get('https://api.covid19india.org/raw_data.json').then(resp => {\r\n            dispatch({ type: GET_PATIENT_DATA, payload: resp.data.raw_data.reverse().slice(0, 500) })\r\n        }).catch(err => {\r\n            console.log(err)\r\n            dispatch({ type: ERROR_PATIENT_DATA, payload: \"Error Occured. Try again\" })\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getStatesAction = () => {\r\n    return dispatch => {\r\n        dispatch({ type: FETCHING_STATES })\r\n        axios.get('https://api.covid19india.org/data.json').then(resp => {\r\n            dispatch({ type: GET_STATES, payload: resp.data.statewise.slice(1, -1) })\r\n        }).catch(err => {\r\n            console.log(err)\r\n            dispatch({ type: ERROR_STATES, payload: 'error fetching states' })\r\n        })\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport BoxMessage from './BoxMessage';\r\nimport PatientHeatMap from './PatientHeatMap';\r\nimport { connect } from 'react-redux';\r\nimport { getPatientData } from '../../store/actions/patientActions';\r\nimport SelectOptions from './SelectOptions';\r\n\r\n\r\nconst Demographics = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.getPatient()\r\n    })\r\n\r\n    return (\r\n        <div className=\"container\">\r\n\r\n            <div className=\"mt-2\">\r\n                <SelectOptions />\r\n            </div>\r\n\r\n            <div>\r\n                <BoxMessage />\r\n            </div>\r\n\r\n            <div className=\"mt-5\">\r\n                <PatientHeatMap />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getPatient: () => dispatch(getPatientData())\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(Demographics)","import React from 'react';\r\n\r\nconst DeepDive = () => {\r\n    return(\r\n        <div>\r\n            Deep-Dive compo\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeepDive","import React, { useState, useEffect } from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { scaleQuantile } from 'd3-scale';\r\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\r\nimport { connect } from 'react-redux';\r\nconst INDIA_TOPO_JSON = require('./Maharashtra.topo.json');\r\n\r\n\r\nconst PROJECTION_CONFIG = {\r\n    scale: 2000,\r\n    center: [76.9629, 18.5937] // always in [East Latitude, North Longitude]\r\n};\r\n\r\n\r\n// Red Variants\r\nconst COLOR_RANGE = [\r\n    '#e6f5ff',\r\n    '#ccebff',\r\n    '#b3e0ff',\r\n    '#99d6ff',\r\n    '#80ccff',\r\n    '#66c2ff',\r\n    '#008ae6',\r\n    '#006bb3',\r\n    '#0099ff',\r\n    '#0099ff',\r\n    '#005c99'\r\n];\r\n\r\nconst DEFAULT_COLOR = '#EEE';\r\n\r\nconst geographyStyle = {\r\n    default: {\r\n        outline: 'none'\r\n    },\r\n    hover: {\r\n        fill: '#ccc',\r\n        transition: 'all 350ms',\r\n        outline: 'none'\r\n    },\r\n    pressed: {\r\n        outline: 'none'\r\n    }\r\n};\r\n\r\n\r\nconst distData = [  \r\n    {district:\"Ahmednagar\", value: 5},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0},\r\n    {district:\"Ahmednagar\", value: 0}\r\n ]\r\n\r\nconst getHeatMapData = () => {\r\n    // return newArr\r\n    return  [  \r\n        {id:0,state:\"Ahmednagar\", value: 5},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0},\r\n        {district:\"Ahmednagar\", value: 0}\r\n     ]\r\n\r\n};\r\n\r\n\r\n\r\nconst MaharashtraMap = (props) => {\r\n\r\n\r\n    const [tooltipContent, setTooltipContent] = useState('');\r\n    const [data, setData] = useState(getHeatMapData());\r\n    \r\n    // const allDistrictData = (distData.map(item => {\r\n    //     return { id: item.district, state:item.district, value:item.active }\r\n    // }))\r\n    // console.log(allDistrictData)\r\n\r\n    // useEffect(() => {\r\n    //     if (distData !== 0) {\r\n\r\n    //         const getHeatMapData2 = () => {\r\n    //             return allDistrictData\r\n    //         };\r\n    //         setData(getHeatMapData2())\r\n    //     }\r\n    // },[])\r\n\r\n\r\n    const colorScale = scaleQuantile()\r\n        .domain(data.map(d => d.value))\r\n        .range(COLOR_RANGE);\r\n\r\n    const onMouseEnter = (geo, current = { value: 'NA' }) => {\r\n        return () => {\r\n            setTooltipContent(`${geo.properties.name}: ${current.value}`);\r\n        };\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        setTooltipContent('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n\r\n            <ReactTooltip>{tooltipContent}</ReactTooltip>\r\n            <ComposableMap\r\n                projectionConfig={PROJECTION_CONFIG}\r\n                projection=\"geoMercator\"\r\n                width={420}\r\n                height={520}\r\n                data-tip=\"\"\r\n            >\r\n                <Geographies geography={INDIA_TOPO_JSON}>\r\n                    {({ geographies }) =>\r\n                        geographies.map(geo => {\r\n                            const current = data.find(s => s.id === geo.id);\r\n                            return (\r\n                                <Geography\r\n                                    key={geo.rsmKey}\r\n                                    geography={geo}\r\n                                    fill={current ? colorScale(current.value) : DEFAULT_COLOR}\r\n                                    style={geographyStyle}\r\n                                    onMouseEnter={onMouseEnter(geo, current)}\r\n                                    onMouseLeave={onMouseLeave}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                </Geographies>\r\n            </ComposableMap>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        states: state.stats.statesData\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MaharashtraMap)","import React, { useState, useEffect } from \"react\"\r\nimport * as Icon from \"react-feather\";\r\n\r\nconst EventsTimeline = (props) => {\r\n    const [last5Days, setLast5Days] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        setLast5Days(props.tests.reverse().slice(0, 5))\r\n    }, [props])\r\n\r\n    return (\r\n        <div>\r\n\r\n<div className=\"row\">\r\n    \r\n{/* <p>Total population : {JSON.stringify(last5Days[4])}</p> */}\r\n    <div className=\"col-sm-12\">\r\n            <div className=\"timeline-main\">\r\n                <ul className=\"stepper stepper-vertical timeline timeline-simple pl-0\">\r\n                    {last5Days.map((daysData, index) => (\r\n                        <li key={index}>\r\n                             }\r\n                            <a href=\"#!\">\r\n                                <span className=\"circle blue\"></span>\r\n                            </a>\r\n                            <div className=\"step-content mr-xl-5 p-4 hoverable rgba-grey-slight\" style={{width:\"300px\", borderRadius:\"15px\"}} >\r\n                                {/* <h4 className=\"font-weight-bold\">Duis aute irure dolor</h4> */}\r\n                                <p className=\"text-muted mt-3\"><i className=\"far fa-clock\" aria-hidden=\"true\"></i>{daysData.updatedon}</p>\r\n                                    <p className=\"mb-1\">\r\n                                    Total tested :    {daysData.totaltested <= 0 ? <span>NA</span>  :  Number(daysData.totaltested).toLocaleString()}\r\n                                    </p>\r\n                                    <p className=\"mb-1\">\r\n                                        <span className=\"text-danger\"><Icon.Plus  size={15}/>Ve : { daysData.positive === '' ? <span>NA</span> : daysData.positive} </span>, <span className=\"text-success\"><Icon.Minus size={15}/>Ve : { daysData.negative=== '' ? <span>NA</span> : daysData.negative}</span>\r\n                                    </p>\r\n                                    <p className=\"mb-1 \">\r\n                                    Positivity rate : { !daysData.positive && !daysData.totaltested ? <span>NA</span> : parseFloat((daysData.positive / daysData.totaltested)*100).toFixed(2)}{daysData.positive || daysData.totaltested ? <span>%</span> : ''} \r\n                                    </p>\r\n                                    {/* <p className=\"mb-1\">\r\n                                    Tests/million : {daysData.testspermillion}\r\n                                    </p> */}\r\n                            </div>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EventsTimeline","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./stateinfo.css\";\r\nimport { stateInfoAction, districtInfoAction, zoneInfoAction, testInfoAction } from \"../../store/actions/stateInfoActions\";\r\nimport MaharashtraMap from \"../home/geographics/MaharashtraMap\";\r\nimport EventsTimeline from \"./EventsTimeline\";\r\nimport * as Icon from \"react-feather\";\r\n\r\n\r\n\r\nconst StateInfo = (props) => {\r\n    const [impData, setImpData] = useState({})\r\n    const [districts, setDistrictData] = useState([])\r\n    const [zone, setZone] = useState([])\r\n    const [tests, setTests] = useState([])\r\n\r\n\r\n    // Array of zone Data\r\n    var zonedStates = []\r\n\r\n    // array of tests Data\r\n    var testsData = []\r\n\r\n    // holds the array of the selected state\r\n    var lastObject = tests\r\n    var todaysTestCount = tests[tests.length - 1]\r\n\r\n    console.log(todaysTestCount)\r\n\r\n    // for counting total tests till the date of the selected state\r\n    var totalTestCount = 0\r\n    for (var count in lastObject) {\r\n        totalTestCount += parseInt(lastObject[count].totaltested)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        props.getStatesData()\r\n        props.getDistrictData()\r\n        props.getZoneData()\r\n        props.getTestData()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n\r\n        if (props.stateInfo.length !== 0) {\r\n\r\n            // get the state from the params statecode\r\n            const stateCode = props.match.params.statename\r\n            const index = props.stateInfo.findIndex(name => name.statecode === stateCode)\r\n            const state = props.stateInfo[index]\r\n            setImpData(state)\r\n        }\r\n        if (props.districtInfo.length !== 0) {\r\n\r\n            // get the district data from the statecode\r\n            const stateCode = props.match.params.statename\r\n            const districtIndex = props.districtInfo.findIndex(districtItem => districtItem.statecode === stateCode)\r\n            const district = props.districtInfo[districtIndex].districtData\r\n            setDistrictData(district)\r\n        }\r\n\r\n        if (props.zoneInfo.length !== 0) {\r\n\r\n            // get the Zone Data for current selected state \r\n            const stateCode = props.match.params.statename\r\n            for (var i in props.zoneInfo) {\r\n                if (props.zoneInfo[i].statecode === stateCode) {\r\n                    zonedStates.push(props.zoneInfo[i])\r\n                }\r\n            }\r\n            setZone(zonedStates)\r\n        }\r\n\r\n\r\n        if (props.testInfo.length !== 0) {\r\n\r\n            // get the Zone Data for current selected state \r\n            // const stateCode = props.match.params.statename\r\n            for (var tests in props.testInfo) {\r\n                if (props.testInfo[tests].state === impData.state) {\r\n                    testsData.push(props.testInfo[tests])\r\n                }\r\n            }\r\n            setTests(testsData)\r\n        }\r\n\r\n    }, [ props])\r\n\r\n    // Adding zone property in the OG districts state array \r\n    for (var i in districts) {\r\n        for (var j in zone) {\r\n            if (districts[i].district === zone[j].district) {\r\n                districts[i]['zone'] = zone[j].zone\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleStateSelect = e => {\r\n        props.history.push(`${e.target.value}`)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container mt-3\">\r\n\r\n            <div className=\"row\">\r\n                <div className=\"bc-icons-2 bread col-sm-4\">\r\n                    <nav aria-label=\"breadcrumb\">\r\n                        <ol className={`breadcrumb ${props.modeState && 'grey lighten-1'} grey lighten-4`}>\r\n                            <li className=\"breadcrumb-item\"><Link className=\"black-text\" to=\"/\">Home</Link></li>\r\n                            <li className=\"breadcrumb-item\">\r\n                                <select onChange={handleStateSelect}>\r\n                                    <option defaultValue>{impData.state}</option>\r\n                                    {props.stateInfo.slice(0, 32).map((state, index) => (\r\n                                        <option key={index} value={state.statecode}>{state.state}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </li>\r\n                            {/* <li className=\"breadcrumb-item\"><span className=\"badge badge-pill badge-info\" style={{ fontSize: \"14px\" }}> {impData.state} </span></li> */}\r\n                        </ol>\r\n                    </nav>\r\n                </div>\r\n\r\n\r\n                <div className=\"col-sm-4\">\r\n                    <p className=\"text-danger\" style={{ margin: 0, fontSize: \"24px\", fontWeight: 600 }}>{impData.state} </p>\r\n                    <p className=\"text-muted font-italic\" >Last updated on - {new Date(impData.lastupdatedtime).toLocaleString()}</p>\r\n                </div>\r\n\r\n                <div className=\"col-sm-4\">\r\n                    <p> Total tests conducted : {lastObject !== undefined && Number(totalTestCount).toLocaleString()}</p>\r\n                    <p> Todays tests count : {todaysTestCount !== undefined && Number(todaysTestCount.totaltested).toLocaleString()}</p>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n            <div className=\"state-counts row\" style={{ margin: \"5px\" }}>\r\n    \r\n                <div className=\"col-6 col-md-3 state-count-box rgba-red-slight\">\r\n                \r\n                    <p className=\"text-danger\">Confirm <Icon.Info className=\"info-icon\" size={15} /></p>\r\n                    \r\n                    <p className=\"text-danger\" style={{ margin: 0 }}>{impData.confirmed}</p>\r\n\r\n                    {impData.deltaconfirmed <= 0 ? <p style={{ margin: \"5px\" }} className=\"text-danger\">No new cases yet</p> :\r\n                        <div className=\"row delta-data text-danger\">\r\n                            <Icon.ArrowUp size={20} /><p style={{ margin: 0 }} className=\"delta-confirmed \">{impData.deltaconfirmed}</p>\r\n                        </div>\r\n                    }\r\n                    <p className=\"text-danger\" style={{ fontSize: '12px' }}>Confirm/Mill<sup>n</sup> : </p>\r\n\r\n                </div>\r\n\r\n                <div className=\"col-6  col-md-3 state-count-box rgba-blue-slight\">\r\n                    <p className=\"text-info\">Active <Icon.Info className=\"info-icon\" size={15} /></p>\r\n                    <p className=\"text-info\" style={{ margin: 0 }}>{impData.active}</p>\r\n\r\n                    {impData.deltaconfirmed <= 0 ? <p style={{ margin: \"5px\" }} className=\"text-info\">No new cases yet</p> :\r\n                        <div className=\"row delta-data text-info\">\r\n                            <Icon.ArrowUp size={20} /><p style={{ margin: 0 }} className=\"delta-confirmed \">{impData.deltaconfirmed}</p>\r\n                        </div>\r\n                    }\r\n                    <p className=\"text-info\" style={{ fontSize: \"12px\" }}>Active Rate : {parseFloat(impData.active / impData.confirmed * 100).toFixed(2)} </p>\r\n                </div>\r\n\r\n                <div className=\" col-6 col-md-3  state-count-box rgba-green-slight\">\r\n                    <p className=\"text-success\">Recovered <Icon.Info className=\"info-icon\" size={15} /></p>\r\n                    <p className=\"text-success\" style={{ margin: 0 }}>{impData.recovered}</p>\r\n\r\n                    {impData.deltarecovered <= 0 ? <p style={{ margin: \"5px\" }} className=\"text-success\">No new cases yet</p> :\r\n                        <div className=\"row delta-data text-success\">\r\n                            <Icon.ArrowUp size={20} /><p style={{ margin: 0 }} className=\"delta-confirmed \">{impData.deltarecovered}</p>\r\n                        </div>\r\n                    }\r\n                    <p className=\"text-success\" style={{ fontSize: \"12px\" }}>Recovery Rate : {parseFloat(impData.recovered / impData.confirmed * 100).toFixed(2)}% </p>\r\n                </div>\r\n                <div className=\" col-6  col-md-3 state-count-box rgba-grey-slight\">\r\n                    <p className=\"text-black\">Deceased <Icon.Info className=\"info-icon\" size={15} /></p>\r\n                    <p style={{ margin: 0 }} className=\"text-black\">{impData.deaths}</p>\r\n\r\n                    {impData.deltadeaths <= 0 ? <p style={{ margin: \"5px\" }} className=\"text-black\">No new cases yet</p> :\r\n\r\n                        <div className=\"row delta-data text-black\">\r\n                            <Icon.ArrowUp size={20} /><p style={{ margin: 0 }} className=\"delta-confirmed \">{impData.deltadeaths}</p>\r\n                        </div>\r\n                    }\r\n                    <p className=\"text-black\" style={{ fontSize: \"12px\" }}>Recovery Rate : {parseFloat(impData.deaths / impData.confirmed * 100).toFixed(2)}% </p>\r\n                </div>\r\n            </div>\r\n\r\n            {/* District table and map */}\r\n\r\n            <div className=\"row districts-map\">\r\n                <div className=\"district-data col-md-6\">\r\n                    <p className=\"text-danger\" style={{ fontSize: \"20px\", fontWeight: 600 }}>District-Wise Stats</p>\r\n\r\n                    <div className=\"container\">\r\n                        <div className=\"row zone-info\">\r\n                            <span className=\"zoneSign red lighten-2\"></span><br />\r\n                            <span className=\"zoneSign orange lighten-2\"></span><br />\r\n                            <span className=\"zoneSign green lighten-2\"></span>\r\n                            <span className=\"sign-text\">Current zone of Districts</span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <table className=\"table\">\r\n                        <thead className=\"thead-dark\">\r\n                            <tr>\r\n                                <th>Districts</th>\r\n                                <th className=\"confirmed\"></th>\r\n                                <th className=\"active\"></th>\r\n                                <th className=\"recovered\"></th>\r\n                                <th className=\"deceased\"></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {districts.map((dist, index) => (\r\n                                <tr className={`${props.modeState && 'dark-table'} ${dist.zone === 'Red' ? 'rgba-red-slight' : dist.zone === 'Orange' ? 'rgba-orange-slight' : dist.zone === '' ? '' : 'rgba-green-slight'} `} key={index}>\r\n                                    <td >{dist.district}</td>\r\n                                    <td>{dist.confirmed}\r\n                                        {dist.delta.confirmed !== 0 &&\r\n                                            <i className=\"text-danger far fa-arrow-alt-circle-up cc_pointer text-small\">{dist.delta.confirmed}</i>\r\n                                        }\r\n                                        {/* {dist.zone && <p style={{ margin: 0 }}>Zone : {dist.zone}</p>} */}\r\n                                        {/* {zone.map((z, index) => (\r\n                                            dist.district === z.district && <p key={index}>{z.zone}</p>\r\n                                        ))} */}\r\n\r\n                                        {/* {zone[index] !== undefined  && dist.district === zone[index].district ? <p className=\"text-danger\"> { zone[index].zone} </p> : <p>Not available</p>} */}\r\n\r\n                                    </td>\r\n                                    <td>{dist.active}\r\n                                        {dist.delta.confirmed !== 0 &&\r\n                                            <i className=\"text-info far fa-arrow-alt-circle-up cc_pointer text-small\">{dist.delta.confirmed}</i>\r\n                                        }\r\n                                    </td>\r\n                                    <td>{dist.recovered}\r\n                                        {dist.delta.recovered !== 0 &&\r\n                                            <i className=\"text-success far fa-arrow-alt-circle-up cc_pointer text-small\">{dist.delta.recovered}</i>\r\n                                        }\r\n                                    </td>\r\n                                    <td>{dist.deceased}\r\n                                        {dist.delta.deceased !== 0 &&\r\n                                            <i className=\"text-black far fa-arrow-alt-circle-up cc_pointer text-small\">{dist.delta.deceased}</i>\r\n                                        }\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                    {/* {props.match.params.statename === 'MH' && <MaharashtraMap />} */}\r\n                    <EventsTimeline tests={lastObject} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        stateInfo: state.stateInfo.statesInfoData,\r\n        districtInfo: state.stateInfo.districtData,\r\n        testInfo: state.stateInfo.testData,\r\n        zoneInfo: state.stateInfo.zoneData,\r\n        modeState: state.darkMode.hasmode\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getStatesData: () => dispatch(stateInfoAction()),\r\n        getDistrictData: () => dispatch(districtInfoAction()),\r\n        getZoneData: () => dispatch(zoneInfoAction()),\r\n        getTestData: () => dispatch(testInfoAction())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StateInfo)  ","import Axios from \"axios\"\r\n\r\nexport const GET_STATES_DATA = \"GET_STATES_DATA\"\r\nexport const GET_DISTRICT_DATA = \"GET_DISTRICT_DATA\"\r\nexport const GET_ZONE_DATA = \"GET_ZONE_DATA\"\r\nexport const GET_TESTED_DATA = \"GET_TESTED_DATA\"\r\n\r\n\r\nexport const stateInfoAction = () => {\r\n    return dispatch => {\r\n        Axios.get('https://api.covid19india.org/data.json').then(resp => {\r\n            dispatch({ type: GET_STATES_DATA, payload: resp.data.statewise.slice(1, -1) })\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n}\r\n\r\nexport const districtInfoAction = () => {\r\n    return dispatch => {\r\n        Axios.get('https://api.covid19india.org/v2/state_district_wise.json').then(resp => {\r\n            dispatch({ type: GET_DISTRICT_DATA, payload: resp.data })\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n}\r\n\r\nexport const zoneInfoAction = () => {\r\n    return dispatch => {\r\n        Axios.get('https://api.covid19india.org/zones.json').then(resp => {\r\n            dispatch({ type: GET_ZONE_DATA, payload: resp.data.zones })\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n}\r\n\r\nexport const testInfoAction = () => {\r\n    return dispatch => {\r\n        Axios.get('https://api.covid19india.org/state_test_data.json').then(resp => {\r\n            dispatch({ type: GET_TESTED_DATA, payload: resp.data.states_tested_data })\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n}","import React, { useEffect } from \"react\";\nimport NavBar from \"./navbar/NavBar\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Home from './home/Home';\nimport Demographics from './demographics/Demographics';\nimport DeepDive from './deep-dive/DeepDive';\nimport '../index.css'\nimport { connect } from 'react-redux';\nimport StateInfo from \"./stateinfo/StateInfo\";\n// import { Redirect } from 'react-router-dom';\n\n\nfunction App(props) {\n\n\n  return (\n    <div className={`App ${props.modeState && 'dark-body'}`} >\n      <BrowserRouter>\n        <NavBar />\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/demographics\" component={Demographics} />\n        <Route path=\"/deep-dive\" component={DeepDive} />\n        <Route path=\"/state/:statename\" component={StateInfo} />\n        {/* <Route render={() => <Redirect to={{pathname: \"/\"}} />} /> */}\n        {/* <Route path=\"*\" component={Home} /> */}\n      </BrowserRouter>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    modeState: state.darkMode.hasmode\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_PATIENT_DATA, FETCHING_PATIENT_DATA, ERROR_PATIENT_DATA, GET_STATES, FETCHING_STATES, ERROR_STATES } from '../actions/patientActions'\r\n\r\nconst initialState = {\r\n    fetchingData: false,\r\n    getPatientData: [],\r\n    errorPatientData: '',\r\n    fetchingStates: false,\r\n    getStatesData: [],\r\n    errorFetchingStates: ''\r\n}\r\n\r\nconst patientReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCHING_PATIENT_DATA:\r\n            return {\r\n                ...state,\r\n                fetchingData: true\r\n            }\r\n        case GET_PATIENT_DATA:\r\n            return {\r\n                ...state,\r\n                fetchingData: false,\r\n                getPatientData: action.payload\r\n            }\r\n        case ERROR_PATIENT_DATA:\r\n            return {\r\n                ...state,\r\n                fetchingData: false,\r\n                errorPatientData: action.payload\r\n            };\r\n        case FETCHING_STATES:\r\n            return {\r\n                ...state,\r\n                fetchingStates: true\r\n            }\r\n        case GET_STATES:\r\n            return {\r\n                ...state,\r\n                getStatesData: action.payload,\r\n                fetchingStates: false\r\n            }\r\n        case ERROR_STATES:\r\n            return {\r\n                ...state,\r\n                fetchingStates: false,\r\n                errorFetchingStates: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport default patientReducer","import {\r\n  GET_LIVE_STATS,\r\n  ERROR_LIVE_STATS,\r\n  FETCHING_LIVE_STATS,\r\n  GET_STATES_DATA,\r\n  GET_TIME_SERIES,\r\n  GET_TEST_SAMPLES,\r\n  GET_FACTOIDS,\r\n  GET_UPDATES\r\n} from \"../actions/statActions\";\r\n\r\nconst initialState = {\r\n  fetchingStats: true,\r\n  errorFetchingStats: \"\",\r\n  liveStats: [],\r\n  statesData: [],\r\n  timeSeries: [],\r\n  samples: [],\r\n  factoids:[],\r\n  latestUpdates: []\r\n};\r\n\r\nconst statsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCHING_LIVE_STATS:\r\n      return {\r\n        ...state,\r\n        fetchingStats: true,\r\n      };\r\n    case GET_LIVE_STATS:\r\n      return {\r\n        ...state,\r\n        fetchingStats: false,\r\n        errorFetchingStats: \"\",\r\n        liveStats: action.payload,\r\n      };\r\n    case ERROR_LIVE_STATS:\r\n      return {\r\n        ...state,\r\n        fetchingStats: false,\r\n        errorFetchingStats: action.payload,\r\n      };\r\n    case GET_STATES_DATA:\r\n      return {\r\n        ...state,\r\n        statesData: action.payload,\r\n      };\r\n    case GET_TIME_SERIES:\r\n      return {\r\n        ...state,\r\n        timeSeries: action.payload,\r\n      };\r\n    case GET_TEST_SAMPLES:\r\n      return {\r\n        ...state,\r\n        samples: action.payload,\r\n      };\r\n      case GET_FACTOIDS:\r\n        return{\r\n          ...state,\r\n          factoids: action.payload\r\n        }\r\n        case GET_UPDATES:\r\n          return{\r\n            ...state,\r\n            latestUpdates:action.payload\r\n          }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default statsReducer;\r\n","import { SET_MODE } from '../actions/darkModeActions';\r\n\r\nconst initial = { hasmode: false }\r\n\r\nconst darkModeReducer = (state = initial, action) => {\r\n    // console.log(action)\r\n    if (action.type === SET_MODE) {\r\n        return { hasmode: action.payload }\r\n    } return state\r\n}\r\n\r\nexport default darkModeReducer","import { GET_STATES_DATA, GET_DISTRICT_DATA, GET_ZONE_DATA, GET_TESTED_DATA } from \"../actions/stateInfoActions\";\r\n\r\nconst initialState = {\r\n    statesInfoData: [],\r\n    districtData: [],\r\n    zoneData: [],\r\n    testData: []\r\n}\r\n\r\nconst stateInfoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_STATES_DATA:\r\n            return {\r\n                ...state,\r\n                statesInfoData: action.payload\r\n            }\r\n        case GET_DISTRICT_DATA:\r\n            return {\r\n                ...state,\r\n                districtData: action.payload\r\n            }\r\n        case GET_ZONE_DATA:\r\n            return {\r\n                ...state,\r\n                zoneData: action.payload\r\n            }\r\n        case GET_TESTED_DATA:\r\n            return {\r\n                ...state,\r\n                testData : action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default stateInfoReducer","import {combineReducers} from 'redux';\r\nimport patientReducer from './patientReducer';\r\nimport statsReducer from './statsReducer';\r\nimport darkModeReducer from './darkModeReducer';\r\nimport stateInfoReducer from './stateInfoReducer';\r\n\r\nexport default combineReducers({\r\n    patient: patientReducer,\r\n    stats: statsReducer,\r\n    darkMode: darkModeReducer,\r\n    stateInfo : stateInfoReducer\r\n})","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./store/reducers/rootReducer\";\nimport thunk from \"redux-thunk\";\n\nconst middlewares = [thunk];\n\nconst store = createStore(rootReducer, {}, applyMiddleware(...middlewares));\n\nReactDOM.render(\n  <Provider store = {store}>  \n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}