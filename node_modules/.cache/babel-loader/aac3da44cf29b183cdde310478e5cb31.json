{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\sagar\\\\Desktop\\\\projects\\\\React projects\\\\coronavirus\\\\src\\\\components\\\\home\\\\geographics\\\\MaharashtraMap.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport LinearGradient from './LinearGradient.js';\nimport { scaleQuantile } from 'd3-scale';\nimport StateStats from './StateStats';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport { connect } from 'react-redux';\n\nconst INDIA_TOPO_JSON = require('./Maharashtra.topo.json');\n\nconst PROJECTION_CONFIG = {\n  scale: 650,\n  center: [78.9629, 22.5937] // always in [East Latitude, North Longitude]\n\n}; // Red Variants\n\nconst COLOR_RANGE = ['#e6f5ff', '#ccebff', '#b3e0ff', '#99d6ff', '#80ccff', '#66c2ff', '#008ae6', '#006bb3', '#0099ff', '#0099ff', '#005c99'];\nconst DEFAULT_COLOR = '#EEE';\n\nconst getRandomInt = () => {\n  return parseInt(Math.random() * 100);\n};\n\nconst geographyStyle = {\n  default: {\n    outline: 'none'\n  },\n  hover: {\n    fill: '#ccc',\n    transition: 'all 350ms',\n    outline: 'none'\n  },\n  pressed: {\n    outline: 'none'\n  }\n}; // const getHeatMapData = () => {\n//     // return newArr\n//     return [\n//         { id: 'AP', state: 'Andhra Pradesh', value: 524 },\n//         { id: 'AR', state: 'Arunachal Pradesh', value: getRandomInt() },\n//         { id: 'AS', state: 'Assam', value: getRandomInt() },\n//         { id: 'BR', state: 'Bihar', value: getRandomInt() },\n//         { id: 'CT', state: 'Chhattisgarh', value: getRandomInt() },\n//         { id: 'GA', state: 'Goa', value: 21 },\n//         { id: 'GJ', state: 'Gujarat', value: 22 },\n//         { id: 'HR', state: 'Haryana', value: getRandomInt() },\n//         { id: 'HP', state: 'Himachal Pradesh', value: 24 },\n//         { id: 'JH', state: 'Jharkhand', value: 26 },\n//         { id: 'KA', state: 'Karnataka', value: 27 },\n//         { id: 'KL', state: 'Kerala', value: getRandomInt() },\n//         { id: 'MP', state: 'Madhya Pradesh', value: getRandomInt() },\n//         { id: 'MH', state: 'Maharashtra', value: 556456 },\n//         { id: 'MN', state: 'Manipur', value: getRandomInt() },\n//         { id: 'ML', state: 'Meghalaya', value: 59 },\n//         { id: 'MZ', state: 'Mizoram', value: getRandomInt() },\n//         { id: 'NL', state: 'Nagaland', value: 59 },\n//         { id: 'OR', state: 'Odisha', value: 59 },\n//         { id: 'PB', state: 'Punjab', value: getRandomInt() },\n//         { id: 'RJ', state: 'Rajasthan', value: getRandomInt() },\n//         { id: 'SK', state: 'Sikkim', value: getRandomInt() },\n//         { id: 'TN', state: 'Tamil Nadu', value: getRandomInt() },\n//         { id: 'TG', state: 'Telangana', value: 85 },\n//         { id: 'TR', state: 'Tripura', value: 14 },\n//         { id: 'UT', state: 'Uttarakhand', value: getRandomInt() },\n//         { id: 'UP', state: 'Uttar Pradesh', value: 15 },\n//         { id: 'WB', state: 'West Bengal', value: 17 },\n//         { id: 'WB', state: 'West Bengal', value: 17 },\n//         { id: 'AN', state: 'Andaman and Nicobar Islands', value: getRandomInt() },\n//         { id: 'CH', state: 'Chandigarh', value: getRandomInt() },\n//         { id: 'DN', state: 'Dadra and Nagar Haveli', value: 19 },\n//         { id: 'DD', state: 'Daman and Diu', value: 20 },\n//         { id: 'DL', state: 'Delhi', value: 59 },\n//         { id: 'JK', state: 'Jammu and Kashmir', value: 25 },\n//         { id: 'LA', state: 'Ladakh', value: getRandomInt() },\n//         { id: 'LD', state: 'Lakshadweep', value: getRandomInt() },\n//         { id: 'PY', state: 'Puducherry', value: getRandomInt() }\n//     ];\n// };\n\nconst MaharashtraMap = props => {\n  const [tooltipContent, setTooltipContent] = useState(''); // const [data, setData] = useState(getHeatMapData());\n  // const [confirmed, setConfirmed] = useState('');\n  // const [active, setActive] = useState('');\n  // const [recovered, setRecovered] = useState('');\n  // const [deceased, setDeceased] = useState('');\n  // const [stateCode, setStateCode] = useState('');\n  // const [stateName, setStateName] = useState('');\n  // const [lastUpdatedTime, setLastUpdatedTime] = useState('');\n\n  const allStatesData = props.states.map(item => {\n    return {\n      id: item.statecode,\n      state: item.state,\n      value: JSON.parse(item.active),\n      confirmed: JSON.parse(item.confirmed),\n      recovered: JSON.parse(item.recovered),\n      deceased: JSON.parse(item.deaths),\n      lastupdatedtime: new Date(item.lastupdatedtime).toLocaleString()\n    };\n  });\n  useEffect(() => {\n    if (props.states.length !== 0) {\n      const getHeatMapData2 = () => {\n        return allStatesData;\n      };\n\n      setData(getHeatMapData2());\n    }\n  }, [props]);\n  const gradientData = {\n    fromColor: COLOR_RANGE[0],\n    toColor: COLOR_RANGE[COLOR_RANGE.length - 1],\n    min: 0,\n    max: data.reduce((max, item) => item.value > max ? item.value : max, 0)\n  };\n  const colorScale = scaleQuantile().domain(data.map(d => d.value)).range(COLOR_RANGE);\n\n  const onMouseEnter = (geo, current = {\n    value: 'NA'\n  }) => {\n    return () => {\n      setTooltipContent(`${geo.properties.name}: ${current.value}`);\n      setActive(current.value);\n      setStateName(`${geo.properties.name}`);\n      setConfirmed(current.confirmed);\n      setRecovered(current.recovered);\n      setDeceased(current.deceased);\n      setStateCode(current.id);\n      setLastUpdatedTime(current.lastupdatedtime);\n    };\n  };\n\n  const onMouseLeave = () => {\n    setTooltipContent('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StateStats, {\n    confirmed: confirmed,\n    stateName: stateName,\n    active: active,\n    recovered: recovered,\n    deceased: deceased,\n    lastUpdatedTime: lastUpdatedTime,\n    stateCode: stateCode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, tooltipContent), /*#__PURE__*/React.createElement(ComposableMap, {\n    projectionConfig: PROJECTION_CONFIG,\n    projection: \"geoMercator\",\n    width: 420,\n    height: 520,\n    \"data-tip\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: INDIA_TOPO_JSON,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => {\n    const current = data.find(s => s.id === geo.id);\n    return /*#__PURE__*/React.createElement(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      fill: current ? colorScale(current.value) : DEFAULT_COLOR,\n      style: geographyStyle,\n      onMouseEnter: onMouseEnter(geo, current),\n      onMouseLeave: onMouseLeave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 33\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(LinearGradient, {\n    data: gradientData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    states: state.stats.statesData\n  };\n};\n\nexport default connect(mapStateToProps)(MaharashtraMap);","map":{"version":3,"sources":["D:/Users/sagar/Desktop/projects/React projects/coronavirus/src/components/home/geographics/MaharashtraMap.js"],"names":["React","useState","useEffect","ReactTooltip","LinearGradient","scaleQuantile","StateStats","ComposableMap","Geographies","Geography","connect","INDIA_TOPO_JSON","require","PROJECTION_CONFIG","scale","center","COLOR_RANGE","DEFAULT_COLOR","getRandomInt","parseInt","Math","random","geographyStyle","default","outline","hover","fill","transition","pressed","MaharashtraMap","props","tooltipContent","setTooltipContent","allStatesData","states","map","item","id","statecode","state","value","JSON","parse","active","confirmed","recovered","deceased","deaths","lastupdatedtime","Date","toLocaleString","length","getHeatMapData2","setData","gradientData","fromColor","toColor","min","max","data","reduce","colorScale","domain","d","range","onMouseEnter","geo","current","properties","name","setActive","setStateName","setConfirmed","setRecovered","setDeceased","setStateCode","setLastUpdatedTime","onMouseLeave","stateName","lastUpdatedTime","stateCode","geographies","find","s","rsmKey","mapStateToProps","stats","statesData"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport LinearGradient from './LinearGradient.js';\r\nimport { scaleQuantile } from 'd3-scale';\r\nimport StateStats from './StateStats';\r\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\r\nimport { connect } from 'react-redux';\r\nconst INDIA_TOPO_JSON = require('./Maharashtra.topo.json');\r\n\r\n\r\nconst PROJECTION_CONFIG = {\r\n    scale: 650,\r\n    center: [78.9629, 22.5937] // always in [East Latitude, North Longitude]\r\n};\r\n\r\n\r\n// Red Variants\r\nconst COLOR_RANGE = [\r\n    '#e6f5ff',\r\n    '#ccebff',\r\n    '#b3e0ff',\r\n    '#99d6ff',\r\n    '#80ccff',\r\n    '#66c2ff',\r\n    '#008ae6',\r\n    '#006bb3',\r\n    '#0099ff',\r\n    '#0099ff',\r\n    '#005c99'\r\n];\r\n\r\nconst DEFAULT_COLOR = '#EEE';\r\n\r\nconst getRandomInt = () => {\r\n    return parseInt(Math.random() * 100);\r\n};\r\n\r\nconst geographyStyle = {\r\n    default: {\r\n        outline: 'none'\r\n    },\r\n    hover: {\r\n        fill: '#ccc',\r\n        transition: 'all 350ms',\r\n        outline: 'none'\r\n    },\r\n    pressed: {\r\n        outline: 'none'\r\n    }\r\n};\r\n\r\n\r\n// const getHeatMapData = () => {\r\n//     // return newArr\r\n//     return [\r\n//         { id: 'AP', state: 'Andhra Pradesh', value: 524 },\r\n//         { id: 'AR', state: 'Arunachal Pradesh', value: getRandomInt() },\r\n//         { id: 'AS', state: 'Assam', value: getRandomInt() },\r\n//         { id: 'BR', state: 'Bihar', value: getRandomInt() },\r\n//         { id: 'CT', state: 'Chhattisgarh', value: getRandomInt() },\r\n//         { id: 'GA', state: 'Goa', value: 21 },\r\n//         { id: 'GJ', state: 'Gujarat', value: 22 },\r\n//         { id: 'HR', state: 'Haryana', value: getRandomInt() },\r\n//         { id: 'HP', state: 'Himachal Pradesh', value: 24 },\r\n//         { id: 'JH', state: 'Jharkhand', value: 26 },\r\n//         { id: 'KA', state: 'Karnataka', value: 27 },\r\n//         { id: 'KL', state: 'Kerala', value: getRandomInt() },\r\n//         { id: 'MP', state: 'Madhya Pradesh', value: getRandomInt() },\r\n//         { id: 'MH', state: 'Maharashtra', value: 556456 },\r\n//         { id: 'MN', state: 'Manipur', value: getRandomInt() },\r\n//         { id: 'ML', state: 'Meghalaya', value: 59 },\r\n//         { id: 'MZ', state: 'Mizoram', value: getRandomInt() },\r\n//         { id: 'NL', state: 'Nagaland', value: 59 },\r\n//         { id: 'OR', state: 'Odisha', value: 59 },\r\n//         { id: 'PB', state: 'Punjab', value: getRandomInt() },\r\n//         { id: 'RJ', state: 'Rajasthan', value: getRandomInt() },\r\n//         { id: 'SK', state: 'Sikkim', value: getRandomInt() },\r\n//         { id: 'TN', state: 'Tamil Nadu', value: getRandomInt() },\r\n//         { id: 'TG', state: 'Telangana', value: 85 },\r\n//         { id: 'TR', state: 'Tripura', value: 14 },\r\n//         { id: 'UT', state: 'Uttarakhand', value: getRandomInt() },\r\n//         { id: 'UP', state: 'Uttar Pradesh', value: 15 },\r\n//         { id: 'WB', state: 'West Bengal', value: 17 },\r\n//         { id: 'WB', state: 'West Bengal', value: 17 },\r\n//         { id: 'AN', state: 'Andaman and Nicobar Islands', value: getRandomInt() },\r\n//         { id: 'CH', state: 'Chandigarh', value: getRandomInt() },\r\n//         { id: 'DN', state: 'Dadra and Nagar Haveli', value: 19 },\r\n//         { id: 'DD', state: 'Daman and Diu', value: 20 },\r\n//         { id: 'DL', state: 'Delhi', value: 59 },\r\n//         { id: 'JK', state: 'Jammu and Kashmir', value: 25 },\r\n//         { id: 'LA', state: 'Ladakh', value: getRandomInt() },\r\n//         { id: 'LD', state: 'Lakshadweep', value: getRandomInt() },\r\n//         { id: 'PY', state: 'Puducherry', value: getRandomInt() }\r\n//     ];\r\n// };\r\n\r\n\r\n\r\nconst MaharashtraMap = (props) => {\r\n\r\n\r\n    const [tooltipContent, setTooltipContent] = useState('');\r\n    // const [data, setData] = useState(getHeatMapData());\r\n    // const [confirmed, setConfirmed] = useState('');\r\n    // const [active, setActive] = useState('');\r\n    // const [recovered, setRecovered] = useState('');\r\n    // const [deceased, setDeceased] = useState('');\r\n    // const [stateCode, setStateCode] = useState('');\r\n    // const [stateName, setStateName] = useState('');\r\n    // const [lastUpdatedTime, setLastUpdatedTime] = useState('');\r\n\r\n    const allStatesData = (props.states.map(item => {\r\n        return { id: item.statecode, state: item.state, value: JSON.parse(item.active), confirmed: JSON.parse(item.confirmed), recovered: JSON.parse(item.recovered), deceased: JSON.parse(item.deaths), lastupdatedtime: new Date(item.lastupdatedtime).toLocaleString() }\r\n    }))\r\n\r\n    useEffect(() => {\r\n        if (props.states.length !== 0) {\r\n\r\n            const getHeatMapData2 = () => {\r\n                return allStatesData\r\n            };\r\n            setData(getHeatMapData2())\r\n        }\r\n    }, [props])\r\n\r\n\r\n    const gradientData = {\r\n        fromColor: COLOR_RANGE[0],\r\n        toColor: COLOR_RANGE[COLOR_RANGE.length - 1],\r\n        min: 0,\r\n        max: data.reduce((max, item) => (item.value > max ? item.value : max), 0)\r\n    };\r\n\r\n    const colorScale = scaleQuantile()\r\n        .domain(data.map(d => d.value))\r\n        .range(COLOR_RANGE);\r\n\r\n    const onMouseEnter = (geo, current = { value: 'NA' }) => {\r\n\r\n        return () => {\r\n            setTooltipContent(`${geo.properties.name}: ${current.value}`);\r\n            setActive(current.value)\r\n            setStateName(`${geo.properties.name}`)\r\n            setConfirmed(current.confirmed)\r\n            setRecovered(current.recovered)\r\n            setDeceased(current.deceased)\r\n            setStateCode(current.id)\r\n            setLastUpdatedTime(current.lastupdatedtime)\r\n        };\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        setTooltipContent('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <StateStats confirmed={confirmed} stateName={stateName} active={active} recovered={recovered} deceased={deceased} lastUpdatedTime={lastUpdatedTime} stateCode={stateCode} />\r\n            <ReactTooltip>{tooltipContent}</ReactTooltip>\r\n            <ComposableMap\r\n                projectionConfig={PROJECTION_CONFIG}\r\n                projection=\"geoMercator\"\r\n                width={420}\r\n                height={520}\r\n                data-tip=\"\"\r\n            >\r\n                <Geographies geography={INDIA_TOPO_JSON}>\r\n                    {({ geographies }) =>\r\n                        geographies.map(geo => {\r\n                            const current = data.find(s => s.id === geo.id);\r\n                            return (\r\n                                <Geography\r\n                                    key={geo.rsmKey}\r\n                                    geography={geo}\r\n                                    fill={current ? colorScale(current.value) : DEFAULT_COLOR}\r\n                                    style={geographyStyle}\r\n                                    onMouseEnter={onMouseEnter(geo, current)}\r\n                                    onMouseLeave={onMouseLeave}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                </Geographies>\r\n            </ComposableMap>\r\n            <LinearGradient data={gradientData} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        states: state.stats.statesData\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MaharashtraMap)"]},"metadata":{},"sourceType":"module"}