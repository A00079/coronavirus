{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\sagar\\\\Desktop\\\\projects\\\\React projects\\\\coronavirus\\\\src\\\\components\\\\home\\\\geographics\\\\IndiaMap.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport LinearGradient from './LinearGradient.js';\nimport { scaleQuantile } from 'd3-scale';\nimport StateStats from './StateStats';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport { connect } from 'react-redux';\n\nconst INDIA_TOPO_JSON = require('./india.topo.json');\n\nconst PROJECTION_CONFIG = {\n  scale: 650,\n  center: [78.9629, 22.5937] // always in [East Latitude, North Longitude]\n\n}; // Red Variants\n\nconst COLOR_RANGE = ['#ffedea', '#ffcec5', '#ffad9f', '#ff8a75', '#ff5533', '#e2492d', '#be3d26', '#9a311f', '#782618'];\nconst DEFAULT_COLOR = '#EEE';\n\nconst getRandomInt = () => {\n  return parseInt(Math.random() * 100);\n};\n\nconst geographyStyle = {\n  default: {\n    outline: 'none'\n  },\n  hover: {\n    fill: '#ccc',\n    transition: 'all 250ms',\n    outline: 'none'\n  },\n  pressed: {\n    outline: 'none'\n  }\n};\n\nconst IndiaMap = props => {\n  console.log(props.states[0].active); // custom array of objects for states of map\n\n  var newArr = [];\n  newArr = props.states.map(state => {\n    // newArr.push(state)\n    newArr.push(state.active);\n  }); // will generate random heatmap data on every call\n\n  const getHeatMapData = () => {\n    // return newArr\n    return [{\n      id: 'AP',\n      state: 'Andhra Pradesh',\n      value: 524\n    }, {\n      id: 'AR',\n      state: 'Arunachal Pradesh',\n      value: getRandomInt()\n    }, {\n      id: 'AS',\n      state: 'Assam',\n      value: getRandomInt()\n    }, {\n      id: 'BR',\n      state: 'Bihar',\n      value: getRandomInt()\n    }, {\n      id: 'CT',\n      state: 'Chhattisgarh',\n      value: getRandomInt()\n    }, {\n      id: 'GA',\n      state: 'Goa',\n      value: 21\n    }, {\n      id: 'GJ',\n      state: 'Gujarat',\n      value: 22\n    }, {\n      id: 'HR',\n      state: 'Haryana',\n      value: getRandomInt()\n    }, {\n      id: 'HP',\n      state: 'Himachal Pradesh',\n      value: 24\n    }, {\n      id: 'JH',\n      state: 'Jharkhand',\n      value: 26\n    }, {\n      id: 'KA',\n      state: 'Karnataka',\n      value: 27\n    }, {\n      id: 'KL',\n      state: 'Kerala',\n      value: getRandomInt()\n    }, {\n      id: 'MP',\n      state: 'Madhya Pradesh',\n      value: getRandomInt()\n    }, {\n      id: 'MH',\n      state: 'Maharashtra',\n      value: 55\n    }, {\n      id: 'MN',\n      state: 'Manipur',\n      value: getRandomInt()\n    }, {\n      id: 'ML',\n      state: 'Meghalaya',\n      value: 59\n    }, {\n      id: 'MZ',\n      state: 'Mizoram',\n      value: getRandomInt()\n    }, {\n      id: 'NL',\n      state: 'Nagaland',\n      value: 59\n    }, {\n      id: 'OR',\n      state: 'Odisha',\n      value: 59\n    }, {\n      id: 'PB',\n      state: 'Punjab',\n      value: getRandomInt()\n    }, {\n      id: 'RJ',\n      state: 'Rajasthan',\n      value: getRandomInt()\n    }, {\n      id: 'SK',\n      state: 'Sikkim',\n      value: getRandomInt()\n    }, {\n      id: 'TN',\n      state: 'Tamil Nadu',\n      value: getRandomInt()\n    }, {\n      id: 'TG',\n      state: 'Telangana',\n      value: getRandomInt()\n    }, {\n      id: 'TR',\n      state: 'Tripura',\n      value: 14\n    }, {\n      id: 'UT',\n      state: 'Uttarakhand',\n      value: getRandomInt()\n    }, {\n      id: 'UP',\n      state: 'Uttar Pradesh',\n      value: 15\n    }, {\n      id: 'WB',\n      state: 'West Bengal',\n      value: 17\n    }, {\n      id: 'WB',\n      state: 'West Bengal',\n      value: 17\n    }, {\n      id: 'AN',\n      state: 'Andaman and Nicobar Islands',\n      value: getRandomInt()\n    }, {\n      id: 'CH',\n      state: 'Chandigarh',\n      value: getRandomInt()\n    }, {\n      id: 'DN',\n      state: 'Dadra and Nagar Haveli',\n      value: 19\n    }, {\n      id: 'DD',\n      state: 'Daman and Diu',\n      value: 20\n    }, {\n      id: 'DL',\n      state: 'Delhi',\n      value: 59\n    }, {\n      id: 'JK',\n      state: 'Jammu and Kashmir',\n      value: 25\n    }, {\n      id: 'LA',\n      state: 'Ladakh',\n      value: getRandomInt()\n    }, {\n      id: 'LD',\n      state: 'Lakshadweep',\n      value: getRandomInt()\n    }, {\n      id: 'PY',\n      state: 'Puducherry',\n      value: getRandomInt()\n    }];\n  };\n\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [data, setData] = useState(getHeatMapData());\n  const [confirmed, setConfirmed] = useState('');\n  const [stateName, setStateName] = useState('');\n  const [lastUpdatedTime, setLastUpdatedTime] = useState('');\n  const gradientData = {\n    fromColor: COLOR_RANGE[0],\n    toColor: COLOR_RANGE[COLOR_RANGE.length - 1],\n    min: 0,\n    max: data.reduce((max, item) => item.value > max ? item.value : max, 0)\n  };\n  const colorScale = scaleQuantile().domain(data.map(d => d.value)).range(COLOR_RANGE);\n\n  const onMouseEnter = (geo, current = {\n    value: 'NA'\n  }) => {\n    return () => {\n      setTooltipContent(`${geo.properties.name}: ${current.value}`);\n      setConfirmed(current.value);\n      setStateName(`${geo.properties.name}`);\n    };\n  };\n\n  const onMouseLeave = () => {\n    setTooltipContent('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StateStats, {\n    confirmed: confirmed,\n    stateName: stateName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, tooltipContent), /*#__PURE__*/React.createElement(ComposableMap, {\n    projectionConfig: PROJECTION_CONFIG,\n    projection: \"geoMercator\",\n    width: 420,\n    height: 520,\n    \"data-tip\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: INDIA_TOPO_JSON,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => {\n    const current = data.find(s => s.id === geo.id);\n    return /*#__PURE__*/React.createElement(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      fill: current ? colorScale(current.value) : DEFAULT_COLOR,\n      style: geographyStyle,\n      onMouseEnter: onMouseEnter(geo, current),\n      onMouseLeave: onMouseLeave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 33\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(LinearGradient, {\n    data: gradientData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    states: state.stats.statesData\n  };\n};\n\nexport default connect(mapStateToProps)(IndiaMap);","map":{"version":3,"sources":["D:/Users/sagar/Desktop/projects/React projects/coronavirus/src/components/home/geographics/IndiaMap.js"],"names":["React","useState","useEffect","ReactTooltip","LinearGradient","scaleQuantile","StateStats","ComposableMap","Geographies","Geography","connect","INDIA_TOPO_JSON","require","PROJECTION_CONFIG","scale","center","COLOR_RANGE","DEFAULT_COLOR","getRandomInt","parseInt","Math","random","geographyStyle","default","outline","hover","fill","transition","pressed","IndiaMap","props","console","log","states","active","newArr","map","state","push","getHeatMapData","id","value","tooltipContent","setTooltipContent","data","setData","confirmed","setConfirmed","stateName","setStateName","lastUpdatedTime","setLastUpdatedTime","gradientData","fromColor","toColor","length","min","max","reduce","item","colorScale","domain","d","range","onMouseEnter","geo","current","properties","name","onMouseLeave","geographies","find","s","rsmKey","mapStateToProps","stats","statesData"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport LinearGradient from './LinearGradient.js';\r\nimport { scaleQuantile } from 'd3-scale';\r\nimport StateStats from './StateStats';\r\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\r\nimport { connect } from 'react-redux';\r\nconst INDIA_TOPO_JSON = require('./india.topo.json');\r\n\r\n\r\nconst PROJECTION_CONFIG = {\r\n    scale: 650,\r\n    center: [78.9629, 22.5937] // always in [East Latitude, North Longitude]\r\n};\r\n\r\n\r\n// Red Variants\r\nconst COLOR_RANGE = [\r\n    '#ffedea',\r\n    '#ffcec5',\r\n    '#ffad9f',\r\n    '#ff8a75',\r\n    '#ff5533',\r\n    '#e2492d',\r\n    '#be3d26',\r\n    '#9a311f',\r\n    '#782618'\r\n];\r\n\r\nconst DEFAULT_COLOR = '#EEE';\r\n\r\nconst getRandomInt = () => {\r\n    return parseInt(Math.random() * 100);\r\n};\r\n\r\nconst geographyStyle = {\r\n    default: {\r\n        outline: 'none'\r\n    },\r\n    hover: {\r\n        fill: '#ccc',\r\n        transition: 'all 250ms',\r\n        outline: 'none'\r\n    },\r\n    pressed: {\r\n        outline: 'none'\r\n    }\r\n};\r\n\r\n\r\nconst IndiaMap = (props) => {\r\n    console.log(props.states[0].active)\r\n    // custom array of objects for states of map\r\n\r\n    var newArr = []\r\n\r\n    newArr = props.states.map(state => {\r\n        // newArr.push(state)\r\n        newArr.push(state.active)\r\n    })\r\n\r\n\r\n    // will generate random heatmap data on every call\r\n    const getHeatMapData = () => {\r\n        // return newArr\r\n        \r\n        return [\r\n            { id: 'AP', state: 'Andhra Pradesh', value: 524 },\r\n            { id: 'AR', state: 'Arunachal Pradesh', value: getRandomInt() },\r\n            { id: 'AS', state: 'Assam', value: getRandomInt() },\r\n            { id: 'BR', state: 'Bihar', value: getRandomInt() },\r\n            { id: 'CT', state: 'Chhattisgarh', value: getRandomInt() },\r\n            { id: 'GA', state: 'Goa', value: 21 },\r\n            { id: 'GJ', state: 'Gujarat', value: 22 },\r\n            { id: 'HR', state: 'Haryana', value: getRandomInt() },\r\n            { id: 'HP', state: 'Himachal Pradesh', value: 24 },\r\n            { id: 'JH', state: 'Jharkhand', value: 26 },\r\n            { id: 'KA', state: 'Karnataka', value: 27 },\r\n            { id: 'KL', state: 'Kerala', value: getRandomInt() },\r\n            { id: 'MP', state: 'Madhya Pradesh', value: getRandomInt() },\r\n            { id: 'MH', state: 'Maharashtra', value: 55 },\r\n            { id: 'MN', state: 'Manipur', value: getRandomInt() },\r\n            { id: 'ML', state: 'Meghalaya', value: 59 },\r\n            { id: 'MZ', state: 'Mizoram', value: getRandomInt() },\r\n            { id: 'NL', state: 'Nagaland', value: 59 },\r\n            { id: 'OR', state: 'Odisha', value: 59 },\r\n            { id: 'PB', state: 'Punjab', value: getRandomInt() },\r\n            { id: 'RJ', state: 'Rajasthan', value: getRandomInt() },\r\n            { id: 'SK', state: 'Sikkim', value: getRandomInt() },\r\n            { id: 'TN', state: 'Tamil Nadu', value: getRandomInt() },\r\n            { id: 'TG', state: 'Telangana', value: getRandomInt() },\r\n            { id: 'TR', state: 'Tripura', value: 14 },\r\n            { id: 'UT', state: 'Uttarakhand', value: getRandomInt() },\r\n            { id: 'UP', state: 'Uttar Pradesh', value: 15 },\r\n            { id: 'WB', state: 'West Bengal', value: 17 },\r\n            { id: 'WB', state: 'West Bengal', value: 17 },\r\n            { id: 'AN', state: 'Andaman and Nicobar Islands', value: getRandomInt() },\r\n            { id: 'CH', state: 'Chandigarh', value: getRandomInt() },\r\n            { id: 'DN', state: 'Dadra and Nagar Haveli', value: 19 },\r\n            { id: 'DD', state: 'Daman and Diu', value: 20 },\r\n            { id: 'DL', state: 'Delhi', value: 59 },\r\n            { id: 'JK', state: 'Jammu and Kashmir', value: 25 },\r\n            { id: 'LA', state: 'Ladakh', value: getRandomInt() },\r\n            { id: 'LD', state: 'Lakshadweep', value: getRandomInt() },\r\n            { id: 'PY', state: 'Puducherry', value: getRandomInt() }\r\n        ];\r\n    };\r\n\r\n    const [tooltipContent, setTooltipContent] = useState('');\r\n    const [data, setData] = useState(getHeatMapData());\r\n    const [confirmed, setConfirmed] = useState('');\r\n    const [stateName, setStateName] = useState('');\r\n    const [lastUpdatedTime, setLastUpdatedTime] = useState('');\r\n\r\n\r\n    const gradientData = {\r\n        fromColor: COLOR_RANGE[0],\r\n        toColor: COLOR_RANGE[COLOR_RANGE.length - 1],\r\n        min: 0,\r\n        max: data.reduce((max, item) => (item.value > max ? item.value : max), 0)\r\n    };\r\n\r\n    const colorScale = scaleQuantile()\r\n        .domain(data.map(d => d.value))\r\n        .range(COLOR_RANGE);\r\n\r\n    const onMouseEnter = (geo, current = { value: 'NA' }) => {\r\n        \r\n        return () => {\r\n            setTooltipContent(`${geo.properties.name}: ${current.value}`);\r\n            setConfirmed(current.value)\r\n            setStateName(`${geo.properties.name}`)\r\n        };\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        setTooltipContent('');\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <StateStats confirmed = {confirmed} stateName = {stateName}/>\r\n            <ReactTooltip>{tooltipContent}</ReactTooltip>\r\n            <ComposableMap\r\n                projectionConfig={PROJECTION_CONFIG}\r\n                projection=\"geoMercator\"\r\n                width={420}\r\n                height={520}\r\n                data-tip=\"\"\r\n            >\r\n                <Geographies geography={INDIA_TOPO_JSON}>\r\n                    {({ geographies }) =>\r\n                        geographies.map(geo => {\r\n                            const current = data.find(s => s.id === geo.id);\r\n                            return (\r\n                                <Geography\r\n                                    key={geo.rsmKey}\r\n                                    geography={geo}\r\n                                    fill={current ? colorScale(current.value) : DEFAULT_COLOR}\r\n                                    style={geographyStyle}\r\n                                    onMouseEnter={onMouseEnter(geo, current)}\r\n                                    onMouseLeave={onMouseLeave}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                </Geographies>\r\n            </ComposableMap>\r\n        <LinearGradient data={gradientData} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        states : state.stats.statesData\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(IndiaMap)"]},"metadata":{},"sourceType":"module"}