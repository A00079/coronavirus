{"ast":null,"code":"const months = {\n  '01': 'Jan',\n  '02': 'Feb',\n  '03': 'Mar',\n  '04': 'Apr',\n  '05': 'May',\n  '06': 'Jun',\n  '07': 'Jul',\n  '08': 'Aug',\n  '09': 'Sep',\n  '10': 'Oct',\n  '11': 'Nov',\n  '12': 'Dec'\n};\nexport const formatDate = unformattedDate => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const year = unformattedDate.slice(6, 10);\n  const time = unformattedDate.slice(11);\n  return `${year}-${month}-${day}T${time}+05:30`;\n};\nexport const formatDateAbsolute = unformattedDate => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const time = unformattedDate.slice(11);\n  return `${day} ${months[month]}, ${time.slice(0, 5)} IST`;\n};\n\nconst validateCTS = (data = []) => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const dataTypes = ['dailyconfirmed', 'dailydeceased', 'dailyrecovered', 'totalconfirmed', 'totaldeceased', 'totalrecovered'];\n  return data.filter(d => dataTypes.every(dt => d[dt]) && d.date).filter(d => dataTypes.every(dt => Number(d[dt]) >= 0)).filter(d => {\n    const year = today.getFullYear();\n    return new Date(d.date + year) < today;\n  });\n};\n\nexport const preprocessTimeseries = timeseries => {\n  return validateCTS(timeseries).map((stat, index) => ({\n    date: new Date(stat.date + ' 2020'),\n    totalconfirmed: +stat.totalconfirmed,\n    totalrecovered: +stat.totalrecovered,\n    totaldeceased: +stat.totaldeceased,\n    dailyconfirmed: +stat.dailyconfirmed,\n    dailyrecovered: +stat.dailyrecovered,\n    dailydeceased: +stat.dailydeceased,\n    // Active = Confimed - Recovered - Deceased\n    totalactive: +stat.totalconfirmed - +stat.totalrecovered - +stat.totaldeceased,\n    dailyactive: +stat.dailyconfirmed - +stat.dailyrecovered - +stat.dailydeceased\n  }));\n};\n/**\r\n * Returns the last `days` entries\r\n * @param {Array<Object>} timeseries\r\n * @param {number} days\r\n *\r\n * @return {Array<Object>}\r\n */\n\nexport function sliceTimeseriesFromEnd(timeseries, days) {\n  return timeseries.slice(-days);\n}\nexport const formatNumber = value => {\n  const numberFormatter = new Intl.NumberFormat('en-IN');\n  return isNaN(value) ? '-' : numberFormatter.format(value);\n};","map":{"version":3,"sources":["D:/Users/sagar/Desktop/projects/React projects/coronavirus/src/utils/commonFunctions.js"],"names":["months","formatDate","unformattedDate","day","slice","month","year","time","formatDateAbsolute","validateCTS","data","today","Date","setHours","dataTypes","filter","d","every","dt","date","Number","getFullYear","preprocessTimeseries","timeseries","map","stat","index","totalconfirmed","totalrecovered","totaldeceased","dailyconfirmed","dailyrecovered","dailydeceased","totalactive","dailyactive","sliceTimeseriesFromEnd","days","formatNumber","value","numberFormatter","Intl","NumberFormat","isNaN","format"],"mappings":"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","sourcesContent":["\r\n\r\nconst months = {\r\n  '01': 'Jan',\r\n  '02': 'Feb',\r\n  '03': 'Mar',\r\n  '04': 'Apr',\r\n  '05': 'May',\r\n  '06': 'Jun',\r\n  '07': 'Jul',\r\n  '08': 'Aug',\r\n  '09': 'Sep',\r\n  '10': 'Oct',\r\n  '11': 'Nov',\r\n  '12': 'Dec',\r\n};\r\n\r\n\r\nexport const formatDate = (unformattedDate) => {\r\n  const day = unformattedDate.slice(0, 2);\r\n  const month = unformattedDate.slice(3, 5);\r\n  const year = unformattedDate.slice(6, 10);\r\n  const time = unformattedDate.slice(11);\r\n  return `${year}-${month}-${day}T${time}+05:30`;\r\n};\r\n\r\nexport const formatDateAbsolute = (unformattedDate) => {\r\n  const day = unformattedDate.slice(0, 2);\r\n  const month = unformattedDate.slice(3, 5);\r\n  const time = unformattedDate.slice(11);\r\n  return `${day} ${months[month]}, ${time.slice(0, 5)} IST`;\r\n};\r\n\r\nconst validateCTS = (data = []) => {\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n  const dataTypes = [\r\n    'dailyconfirmed',\r\n    'dailydeceased',\r\n    'dailyrecovered',\r\n    'totalconfirmed',\r\n    'totaldeceased',\r\n    'totalrecovered',\r\n  ];\r\n  return data\r\n    .filter((d) => dataTypes.every((dt) => d[dt]) && d.date)\r\n    .filter((d) => dataTypes.every((dt) => Number(d[dt]) >= 0))\r\n    .filter((d) => {\r\n      const year = today.getFullYear();\r\n      return new Date(d.date + year) < today;\r\n    });\r\n};\r\n\r\nexport const preprocessTimeseries = (timeseries) => {\r\n  return validateCTS(timeseries).map((stat, index) => ({\r\n    date: new Date(stat.date + ' 2020'),\r\n    totalconfirmed: +stat.totalconfirmed,\r\n    totalrecovered: +stat.totalrecovered,\r\n    totaldeceased: +stat.totaldeceased,\r\n    dailyconfirmed: +stat.dailyconfirmed,\r\n    dailyrecovered: +stat.dailyrecovered,\r\n    dailydeceased: +stat.dailydeceased,\r\n    // Active = Confimed - Recovered - Deceased\r\n    totalactive:\r\n      +stat.totalconfirmed - +stat.totalrecovered - +stat.totaldeceased,\r\n    dailyactive:\r\n      +stat.dailyconfirmed - +stat.dailyrecovered - +stat.dailydeceased,\r\n  }));\r\n};\r\n\r\n/**\r\n * Returns the last `days` entries\r\n * @param {Array<Object>} timeseries\r\n * @param {number} days\r\n *\r\n * @return {Array<Object>}\r\n */\r\nexport function sliceTimeseriesFromEnd(timeseries, days) {\r\n  return timeseries.slice(-days);\r\n}\r\n\r\nexport const formatNumber = (value) => {\r\n  const numberFormatter = new Intl.NumberFormat('en-IN');\r\n  return isNaN(value) ? '-' : numberFormatter.format(value);\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}