{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\sagar\\\\Desktop\\\\projects\\\\React projects\\\\coronavirus\\\\src\\\\components\\\\home\\\\geographics\\\\TestMap.js\";\nimport React, { useState, useEffect } from 'react';\nimport { scaleQuantile } from 'd3-scale';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nimport Axios from 'axios';\n\nconst INDIA_TOPO_JSON = require('./Maharashtra.topo.json');\n\nconst PROJECTION_CONFIG = {\n  scale: 2000,\n  center: [76.9629, 18.5937] // always in [East Latitude, North Longitude]\n\n};\nconst COLOR_RANGE = ['#ffedea', '#ffcec5', '#ffad9f', '#ff8a75', '#ff5533', '#e2492d', '#be3d26', '#9a311f', '#782618'];\nconst DEFAULT_COLOR = '#EEE';\n\nconst getRandomInt = () => {\n  return parseInt(Math.random() * 100);\n};\n\nconst geographyStyle = {\n  default: {\n    outline: 'none'\n  },\n  hover: {\n    fill: '#ccc',\n    transition: 'all 250ms',\n    outline: 'none'\n  },\n  pressed: {\n    outline: 'none'\n  }\n};\n\nconst getHeatMapData = () => {\n  return [{\n    id: 'AP',\n    state: 'Andhra Pradesh',\n    value: getRandomInt()\n  }, {\n    id: 'AR',\n    state: 'Arunachal Pradesh',\n    value: getRandomInt()\n  }, {\n    id: 'AS',\n    state: 'Assam',\n    value: getRandomInt()\n  }, {\n    id: 'BR',\n    state: 'Bihar',\n    value: getRandomInt()\n  }, {\n    id: 'CT',\n    state: 'Chhattisgarh',\n    value: getRandomInt()\n  }, {\n    id: 'GA',\n    state: 'Goa',\n    value: 21\n  }, {\n    id: 'GJ',\n    state: 'Gujarat',\n    value: 22\n  }, {\n    id: 'HR',\n    state: 'Haryana',\n    value: getRandomInt()\n  }, {\n    id: 'HP',\n    state: 'Himachal Pradesh',\n    value: 24\n  }, {\n    id: 'JH',\n    state: 'Jharkhand',\n    value: 26\n  }, {\n    id: 'KA',\n    state: 'Karnataka',\n    value: 27\n  }, {\n    id: 'KL',\n    state: 'Kerala',\n    value: getRandomInt()\n  }, {\n    id: 'MP',\n    state: 'Madhya Pradesh',\n    value: getRandomInt()\n  }, {\n    id: 'MH',\n    state: 'Maharashtra',\n    value: getRandomInt()\n  }, {\n    id: 'MN',\n    state: 'Manipur',\n    value: getRandomInt()\n  }, {\n    id: 'ML',\n    state: 'Meghalaya',\n    value: 59\n  }, {\n    id: 'MZ',\n    state: 'Mizoram',\n    value: getRandomInt()\n  }, {\n    id: 'NL',\n    state: 'Nagaland',\n    value: 59\n  }, {\n    id: 'OR',\n    state: 'Odisha',\n    value: 59\n  }, {\n    id: 'PB',\n    state: 'Punjab',\n    value: getRandomInt()\n  }, {\n    id: 'RJ',\n    state: 'Rajasthan',\n    value: getRandomInt()\n  }, {\n    id: 'SK',\n    state: 'Sikkim',\n    value: getRandomInt()\n  }, {\n    id: 'TN',\n    state: 'Tamil Nadu',\n    value: getRandomInt()\n  }, {\n    id: 'TG',\n    state: 'Telangana',\n    value: getRandomInt()\n  }, {\n    id: 'TR',\n    state: 'Tripura',\n    value: 14\n  }, {\n    id: 'UT',\n    state: 'Uttarakhand',\n    value: getRandomInt()\n  }, {\n    id: 'UP',\n    state: 'Uttar Pradesh',\n    value: 15\n  }, {\n    id: 'WB',\n    state: 'West Bengal',\n    value: 17\n  }, {\n    id: 'WB',\n    state: 'West Bengal',\n    value: 17\n  }, {\n    id: 'AN',\n    state: 'Andaman and Nicobar Islands',\n    value: getRandomInt()\n  }, {\n    id: 'CH',\n    state: 'Chandigarh',\n    value: getRandomInt()\n  }, {\n    id: 'DN',\n    state: 'Dadra and Nagar Haveli',\n    value: 19\n  }, {\n    id: 'DD',\n    state: 'Daman and Diu',\n    value: 20\n  }, {\n    id: 'DL',\n    state: 'Delhi',\n    value: 59\n  }, {\n    id: 'JK',\n    state: 'Jammu and Kashmir',\n    value: 25\n  }, {\n    id: 'LA',\n    state: 'Ladakh',\n    value: getRandomInt()\n  }, {\n    id: 'LD',\n    state: 'Lakshadweep',\n    value: getRandomInt()\n  }, {\n    id: 'PY',\n    state: 'Puducherry',\n    value: getRandomInt()\n  }];\n};\n\nfunction TestMap() {\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [data, setData] = useState(getHeatMapData());\n  const [forCleaning, setForCleaning] = useState([]);\n  useEffect(() => {\n    Axios.get('https://api.covid19india.org/v2/state_district_wise.json').then(resp => setForCleaning(resp.data[2].districtData.slice(1, -1)).map(epic => {\n      return {\n        id: epic.district,\n        district: epic.district,\n        value: epic.active\n      };\n    })).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  useEffect(() => {\n    if (forCleaning !== 0) {\n      const getHeatMapData2 = () => {\n        return forCleaning;\n      };\n\n      setData(getHeatMapData2());\n    }\n  }, []);\n  const colorScale = scaleQuantile().domain(data.map(d => d.value)).range(COLOR_RANGE);\n\n  const onMouseEnter = (geo, current = {\n    value: 'NA'\n  }) => {\n    return () => {\n      setTooltipContent(`${geo.properties.district}: ${current.value}`);\n    };\n  };\n\n  const onMouseLeave = () => {\n    setTooltipContent('');\n  };\n\n  return /*#__PURE__*/React.createElement(ComposableMap, {\n    projectionConfig: PROJECTION_CONFIG,\n    projection: \"geoMercator\",\n    width: 420,\n    height: 520,\n    \"data-tip\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: INDIA_TOPO_JSON,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => {\n    const current = data.find(s => s.id === geo.id);\n    return /*#__PURE__*/React.createElement(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      fill: current ? colorScale(current.value) : DEFAULT_COLOR,\n      style: geographyStyle,\n      onMouseEnter: onMouseEnter(geo, current),\n      onMouseLeave: onMouseLeave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 29\n      }\n    });\n  })));\n}\n\nexport default TestMap;","map":{"version":3,"sources":["D:/Users/sagar/Desktop/projects/React projects/coronavirus/src/components/home/geographics/TestMap.js"],"names":["React","useState","useEffect","scaleQuantile","ComposableMap","Geographies","Geography","ReactTooltip","Axios","INDIA_TOPO_JSON","require","PROJECTION_CONFIG","scale","center","COLOR_RANGE","DEFAULT_COLOR","getRandomInt","parseInt","Math","random","geographyStyle","default","outline","hover","fill","transition","pressed","getHeatMapData","id","state","value","TestMap","tooltipContent","setTooltipContent","data","setData","forCleaning","setForCleaning","get","then","resp","districtData","slice","map","epic","district","active","catch","err","console","log","getHeatMapData2","colorScale","domain","d","range","onMouseEnter","geo","current","properties","onMouseLeave","geographies","find","s","rsmKey"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { scaleQuantile } from 'd3-scale';\r\nimport {\r\n    ComposableMap, Geographies, Geography\r\n} from 'react-simple-maps';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport Axios from 'axios';\r\n\r\nconst INDIA_TOPO_JSON = require('./Maharashtra.topo.json');\r\n\r\nconst PROJECTION_CONFIG = {\r\n    scale: 2000,\r\n    center: [76.9629, 18.5937] // always in [East Latitude, North Longitude]\r\n};\r\n\r\nconst COLOR_RANGE = [\r\n    '#ffedea',\r\n    '#ffcec5',\r\n    '#ffad9f',\r\n    '#ff8a75',\r\n    '#ff5533',\r\n    '#e2492d',\r\n    '#be3d26',\r\n    '#9a311f',\r\n    '#782618'\r\n];\r\n\r\n\r\nconst DEFAULT_COLOR = '#EEE';\r\n\r\nconst getRandomInt = () => {\r\n    return parseInt(Math.random() * 100);\r\n};\r\n\r\nconst geographyStyle = {\r\n    default: {\r\n        outline: 'none'\r\n    },\r\n    hover: {\r\n        fill: '#ccc',\r\n        transition: 'all 250ms',\r\n        outline: 'none'\r\n    },\r\n    pressed: {\r\n        outline: 'none'\r\n    }\r\n};\r\n\r\n\r\nconst getHeatMapData = () => {\r\n    return [\r\n        { id: 'AP', state: 'Andhra Pradesh', value: getRandomInt() },\r\n        { id: 'AR', state: 'Arunachal Pradesh', value: getRandomInt() },\r\n        { id: 'AS', state: 'Assam', value: getRandomInt() },\r\n        { id: 'BR', state: 'Bihar', value: getRandomInt() },\r\n        { id: 'CT', state: 'Chhattisgarh', value: getRandomInt() },\r\n        { id: 'GA', state: 'Goa', value: 21 },\r\n        { id: 'GJ', state: 'Gujarat', value: 22 },\r\n        { id: 'HR', state: 'Haryana', value: getRandomInt() },\r\n        { id: 'HP', state: 'Himachal Pradesh', value: 24 },\r\n        { id: 'JH', state: 'Jharkhand', value: 26 },\r\n        { id: 'KA', state: 'Karnataka', value: 27 },\r\n        { id: 'KL', state: 'Kerala', value: getRandomInt() },\r\n        { id: 'MP', state: 'Madhya Pradesh', value: getRandomInt() },\r\n        { id: 'MH', state: 'Maharashtra', value: getRandomInt() },\r\n        { id: 'MN', state: 'Manipur', value: getRandomInt() },\r\n        { id: 'ML', state: 'Meghalaya', value: 59 },\r\n        { id: 'MZ', state: 'Mizoram', value: getRandomInt() },\r\n        { id: 'NL', state: 'Nagaland', value: 59 },\r\n        { id: 'OR', state: 'Odisha', value: 59 },\r\n        { id: 'PB', state: 'Punjab', value: getRandomInt() },\r\n        { id: 'RJ', state: 'Rajasthan', value: getRandomInt() },\r\n        { id: 'SK', state: 'Sikkim', value: getRandomInt() },\r\n        { id: 'TN', state: 'Tamil Nadu', value: getRandomInt() },\r\n        { id: 'TG', state: 'Telangana', value: getRandomInt() },\r\n        { id: 'TR', state: 'Tripura', value: 14 },\r\n        { id: 'UT', state: 'Uttarakhand', value: getRandomInt() },\r\n        { id: 'UP', state: 'Uttar Pradesh', value: 15 },\r\n        { id: 'WB', state: 'West Bengal', value: 17 },\r\n        { id: 'WB', state: 'West Bengal', value: 17 },\r\n        { id: 'AN', state: 'Andaman and Nicobar Islands', value: getRandomInt() },\r\n        { id: 'CH', state: 'Chandigarh', value: getRandomInt() },\r\n        { id: 'DN', state: 'Dadra and Nagar Haveli', value: 19 },\r\n        { id: 'DD', state: 'Daman and Diu', value: 20 },\r\n        { id: 'DL', state: 'Delhi', value: 59 },\r\n        { id: 'JK', state: 'Jammu and Kashmir', value: 25 },\r\n        { id: 'LA', state: 'Ladakh', value: getRandomInt() },\r\n        { id: 'LD', state: 'Lakshadweep', value: getRandomInt() },\r\n        { id: 'PY', state: 'Puducherry', value: getRandomInt() }\r\n    ];\r\n};\r\n\r\n\r\n\r\nfunction TestMap() {\r\n    const [tooltipContent, setTooltipContent] = useState('');\r\n    const [data, setData] = useState(getHeatMapData());\r\n    const [forCleaning, setForCleaning] = useState([]);\r\n\r\n    useEffect(() => {\r\n        Axios.get('https://api.covid19india.org/v2/state_district_wise.json').then(resp => setForCleaning(resp.data[2].districtData.slice(1,-1)).map(epic => {\r\n        return {id: epic.district, district: epic.district, value: epic.active}\r\n        })).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n    \r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (forCleaning !== 0) {\r\n\r\n            const getHeatMapData2 = () => {\r\n                return forCleaning\r\n            };\r\n            setData(getHeatMapData2())\r\n        }\r\n    },[])\r\n\r\n\r\n    const colorScale = scaleQuantile()\r\n        .domain(data.map(d => d.value))\r\n        .range(COLOR_RANGE);\r\n\r\n    const onMouseEnter = (geo, current = { value: 'NA' }) => {\r\n        return () => {\r\n            setTooltipContent(`${geo.properties.district}: ${current.value}`);\r\n        };\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        setTooltipContent('');\r\n    };\r\n\r\n    return (\r\n        <ComposableMap\r\n            projectionConfig={PROJECTION_CONFIG}\r\n            projection=\"geoMercator\"\r\n            width={420}\r\n            height={520}\r\n            data-tip=\"\"\r\n        >\r\n            <Geographies geography={INDIA_TOPO_JSON}>\r\n                {({ geographies }) =>\r\n                    geographies.map(geo => {\r\n                        const current = data.find(s => s.id === geo.id);\r\n                        return (\r\n                            <Geography\r\n                                key={geo.rsmKey}\r\n                                geography={geo}\r\n                                fill={current ? colorScale(current.value) : DEFAULT_COLOR}\r\n                                style={geographyStyle}\r\n                                onMouseEnter={onMouseEnter(geo, current)}\r\n                                onMouseLeave={onMouseLeave}\r\n                            />\r\n                        );\r\n                    })\r\n                }\r\n            </Geographies>\r\n        </ComposableMap>\r\n    )\r\n}\r\n\r\nexport default TestMap"]},"metadata":{},"sourceType":"module"}