{"ast":null,"code":"import _slicedToArray from\"D:\\\\Users\\\\sagar\\\\Desktop\\\\projects\\\\React projects\\\\coronavirus\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import ReactTooltip from'react-tooltip';import LinearGradient from'./LinearGradient.js';import{scaleQuantile}from'd3-scale';import StateStats from'./StateStats';import{ComposableMap,Geographies,Geography}from'react-simple-maps';import{connect}from'react-redux';var INDIA_TOPO_JSON=require('./india.topo.json');var PROJECTION_CONFIG={scale:650,center:[78.9629,22.5937]// always in [East Latitude, North Longitude]\n};// Red Variants\nvar COLOR_RANGE=['#e6f5ff','#ccebff','#b3e0ff','#99d6ff','#80ccff','#66c2ff','#008ae6','#006bb3','#0099ff','#0099ff','#005c99'];var DEFAULT_COLOR='#EEE';var getRandomInt=function getRandomInt(){return parseInt(Math.random()*100);};var geographyStyle={default:{outline:'none'},hover:{fill:'#ccc',transition:'all 350ms',outline:'none'},pressed:{outline:'none'}};var getHeatMapData=function getHeatMapData(){// return newArr\nreturn[{id:'AP',state:'Andhra Pradesh',value:524},{id:'AR',state:'Arunachal Pradesh',value:getRandomInt()},{id:'AS',state:'Assam',value:getRandomInt()},{id:'BR',state:'Bihar',value:getRandomInt()},{id:'CT',state:'Chhattisgarh',value:getRandomInt()},{id:'GA',state:'Goa',value:21},{id:'GJ',state:'Gujarat',value:22},{id:'HR',state:'Haryana',value:getRandomInt()},{id:'HP',state:'Himachal Pradesh',value:24},{id:'JH',state:'Jharkhand',value:26},{id:'KA',state:'Karnataka',value:27},{id:'KL',state:'Kerala',value:getRandomInt()},{id:'MP',state:'Madhya Pradesh',value:getRandomInt()},{id:'MH',state:'Maharashtra',value:556456},{id:'MN',state:'Manipur',value:getRandomInt()},{id:'ML',state:'Meghalaya',value:59},{id:'MZ',state:'Mizoram',value:getRandomInt()},{id:'NL',state:'Nagaland',value:59},{id:'OR',state:'Odisha',value:59},{id:'PB',state:'Punjab',value:getRandomInt()},{id:'RJ',state:'Rajasthan',value:getRandomInt()},{id:'SK',state:'Sikkim',value:getRandomInt()},{id:'TN',state:'Tamil Nadu',value:getRandomInt()},{id:'TG',state:'Telangana',value:85},{id:'TR',state:'Tripura',value:14},{id:'UT',state:'Uttarakhand',value:getRandomInt()},{id:'UP',state:'Uttar Pradesh',value:15},{id:'WB',state:'West Bengal',value:17},{id:'WB',state:'West Bengal',value:17},{id:'AN',state:'Andaman and Nicobar Islands',value:getRandomInt()},{id:'CH',state:'Chandigarh',value:getRandomInt()},{id:'DN',state:'Dadra and Nagar Haveli',value:19},{id:'DD',state:'Daman and Diu',value:20},{id:'DL',state:'Delhi',value:59},{id:'JK',state:'Jammu and Kashmir',value:25},{id:'LA',state:'Ladakh',value:getRandomInt()},{id:'LD',state:'Lakshadweep',value:getRandomInt()},{id:'PY',state:'Puducherry',value:getRandomInt()}];};var IndiaMap=function IndiaMap(props){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),tooltipContent=_useState2[0],setTooltipContent=_useState2[1];var _useState3=useState(getHeatMapData()),_useState4=_slicedToArray(_useState3,2),data=_useState4[0],setData=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),confirmed=_useState6[0],setConfirmed=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),active=_useState8[0],setActive=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),recovered=_useState10[0],setRecovered=_useState10[1];var _useState11=useState(''),_useState12=_slicedToArray(_useState11,2),deceased=_useState12[0],setDeceased=_useState12[1];var _useState13=useState(''),_useState14=_slicedToArray(_useState13,2),stateCode=_useState14[0],setStateCode=_useState14[1];var _useState15=useState(''),_useState16=_slicedToArray(_useState15,2),stateName=_useState16[0],setStateName=_useState16[1];var _useState17=useState(''),_useState18=_slicedToArray(_useState17,2),lastUpdatedTime=_useState18[0],setLastUpdatedTime=_useState18[1];var allStatesData=props.states.map(function(item){return{id:item.statecode,state:item.state,value:JSON.parse(item.active),confirmed:JSON.parse(item.confirmed),recovered:JSON.parse(item.recovered),deceased:JSON.parse(item.deaths),lastupdatedtime:new Date(item.lastupdatedtime).toLocaleString()};});useEffect(function(){if(props.states.length!==0){var getHeatMapData2=function getHeatMapData2(){return allStatesData;};setData(getHeatMapData2());}},[props]);var gradientData={fromColor:COLOR_RANGE[0],toColor:COLOR_RANGE[COLOR_RANGE.length-1],min:0,max:data.reduce(function(max,item){return item.value>max?item.value:max;},0)};var colorScale=scaleQuantile().domain(data.map(function(d){return d.value;})).range(COLOR_RANGE);var onMouseEnter=function onMouseEnter(geo){var current=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{value:'NA'};return function(){setTooltipContent(\"\".concat(geo.properties.name,\": \").concat(current.value));setActive(current.value);setStateName(\"\".concat(geo.properties.name));setConfirmed(current.confirmed);setRecovered(current.recovered);setDeceased(current.deceased);setStateCode(current.id);setLastUpdatedTime(current.lastupdatedtime);};};var onMouseLeave=function onMouseLeave(){setTooltipContent('');};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(StateStats,{confirmed:confirmed,stateName:stateName,active:active,recovered:recovered,deceased:deceased,lastUpdatedTime:lastUpdatedTime,stateCode:stateCode}),/*#__PURE__*/React.createElement(ReactTooltip,null,tooltipContent),/*#__PURE__*/React.createElement(ComposableMap,{projectionConfig:PROJECTION_CONFIG,projection:\"geoMercator\",width:420,height:520,\"data-tip\":\"\"},/*#__PURE__*/React.createElement(Geographies,{geography:INDIA_TOPO_JSON},function(_ref){var geographies=_ref.geographies;return geographies.map(function(geo){var current=data.find(function(s){return s.id===geo.id;});return/*#__PURE__*/React.createElement(Geography,{key:geo.rsmKey,geography:geo,fill:current?colorScale(current.value):DEFAULT_COLOR,style:geographyStyle,onMouseEnter:onMouseEnter(geo,current),onMouseLeave:onMouseLeave});});})),/*#__PURE__*/React.createElement(LinearGradient,{data:gradientData}));};var mapStateToProps=function mapStateToProps(state){return{states:state.stats.statesData};};export default connect(mapStateToProps)(IndiaMap);","map":{"version":3,"sources":["D:/Users/sagar/Desktop/projects/React projects/coronavirus/src/components/home/geographics/IndiaMap.js"],"names":["React","useState","useEffect","ReactTooltip","LinearGradient","scaleQuantile","StateStats","ComposableMap","Geographies","Geography","connect","INDIA_TOPO_JSON","require","PROJECTION_CONFIG","scale","center","COLOR_RANGE","DEFAULT_COLOR","getRandomInt","parseInt","Math","random","geographyStyle","default","outline","hover","fill","transition","pressed","getHeatMapData","id","state","value","IndiaMap","props","tooltipContent","setTooltipContent","data","setData","confirmed","setConfirmed","active","setActive","recovered","setRecovered","deceased","setDeceased","stateCode","setStateCode","stateName","setStateName","lastUpdatedTime","setLastUpdatedTime","allStatesData","states","map","item","statecode","JSON","parse","deaths","lastupdatedtime","Date","toLocaleString","length","getHeatMapData2","gradientData","fromColor","toColor","min","max","reduce","colorScale","domain","d","range","onMouseEnter","geo","current","properties","name","onMouseLeave","geographies","find","s","rsmKey","mapStateToProps","stats","statesData"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport LinearGradient from './LinearGradient.js';\r\nimport { scaleQuantile } from 'd3-scale';\r\nimport StateStats from './StateStats';\r\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\r\nimport { connect } from 'react-redux';\r\nconst INDIA_TOPO_JSON = require('./india.topo.json');\r\n\r\n\r\nconst PROJECTION_CONFIG = {\r\n    scale: 650,\r\n    center: [78.9629, 22.5937] // always in [East Latitude, North Longitude]\r\n};\r\n\r\n\r\n// Red Variants\r\nconst COLOR_RANGE = [\r\n    '#e6f5ff',\r\n    '#ccebff',\r\n    '#b3e0ff',\r\n    '#99d6ff',\r\n    '#80ccff',\r\n    '#66c2ff',\r\n    '#008ae6',\r\n    '#006bb3',\r\n    '#0099ff',\r\n    '#0099ff',\r\n    '#005c99'\r\n];\r\n\r\nconst DEFAULT_COLOR = '#EEE';\r\n\r\nconst getRandomInt = () => {\r\n    return parseInt(Math.random() * 100);\r\n};\r\n\r\nconst geographyStyle = {\r\n    default: {\r\n        outline: 'none'\r\n    },\r\n    hover: {\r\n        fill: '#ccc',\r\n        transition: 'all 350ms',\r\n        outline: 'none'\r\n    },\r\n    pressed: {\r\n        outline: 'none'\r\n    }\r\n};\r\n\r\n\r\nconst getHeatMapData = () => {\r\n    // return newArr\r\n    return [\r\n        { id: 'AP', state: 'Andhra Pradesh', value: 524 },\r\n        { id: 'AR', state: 'Arunachal Pradesh', value: getRandomInt() },\r\n        { id: 'AS', state: 'Assam', value: getRandomInt() },\r\n        { id: 'BR', state: 'Bihar', value: getRandomInt() },\r\n        { id: 'CT', state: 'Chhattisgarh', value: getRandomInt() },\r\n        { id: 'GA', state: 'Goa', value: 21 },\r\n        { id: 'GJ', state: 'Gujarat', value: 22 },\r\n        { id: 'HR', state: 'Haryana', value: getRandomInt() },\r\n        { id: 'HP', state: 'Himachal Pradesh', value: 24 },\r\n        { id: 'JH', state: 'Jharkhand', value: 26 },\r\n        { id: 'KA', state: 'Karnataka', value: 27 },\r\n        { id: 'KL', state: 'Kerala', value: getRandomInt() },\r\n        { id: 'MP', state: 'Madhya Pradesh', value: getRandomInt() },\r\n        { id: 'MH', state: 'Maharashtra', value: 556456 },\r\n        { id: 'MN', state: 'Manipur', value: getRandomInt() },\r\n        { id: 'ML', state: 'Meghalaya', value: 59 },\r\n        { id: 'MZ', state: 'Mizoram', value: getRandomInt() },\r\n        { id: 'NL', state: 'Nagaland', value: 59 },\r\n        { id: 'OR', state: 'Odisha', value: 59 },\r\n        { id: 'PB', state: 'Punjab', value: getRandomInt() },\r\n        { id: 'RJ', state: 'Rajasthan', value: getRandomInt() },\r\n        { id: 'SK', state: 'Sikkim', value: getRandomInt() },\r\n        { id: 'TN', state: 'Tamil Nadu', value: getRandomInt() },\r\n        { id: 'TG', state: 'Telangana', value: 85 },\r\n        { id: 'TR', state: 'Tripura', value: 14 },\r\n        { id: 'UT', state: 'Uttarakhand', value: getRandomInt() },\r\n        { id: 'UP', state: 'Uttar Pradesh', value: 15 },\r\n        { id: 'WB', state: 'West Bengal', value: 17 },\r\n        { id: 'WB', state: 'West Bengal', value: 17 },\r\n        { id: 'AN', state: 'Andaman and Nicobar Islands', value: getRandomInt() },\r\n        { id: 'CH', state: 'Chandigarh', value: getRandomInt() },\r\n        { id: 'DN', state: 'Dadra and Nagar Haveli', value: 19 },\r\n        { id: 'DD', state: 'Daman and Diu', value: 20 },\r\n        { id: 'DL', state: 'Delhi', value: 59 },\r\n        { id: 'JK', state: 'Jammu and Kashmir', value: 25 },\r\n        { id: 'LA', state: 'Ladakh', value: getRandomInt() },\r\n        { id: 'LD', state: 'Lakshadweep', value: getRandomInt() },\r\n        { id: 'PY', state: 'Puducherry', value: getRandomInt() }\r\n    ];\r\n};\r\n\r\n\r\n\r\nconst IndiaMap = (props) => {\r\n\r\n\r\n    const [tooltipContent, setTooltipContent] = useState('');\r\n    const [data, setData] = useState(getHeatMapData());\r\n    const [confirmed, setConfirmed] = useState('');\r\n    const [active, setActive] = useState('');\r\n    const [recovered, setRecovered] = useState('');\r\n    const [deceased, setDeceased] = useState('');\r\n    const [stateCode, setStateCode] = useState('');\r\n    const [stateName, setStateName] = useState('');\r\n    const [lastUpdatedTime, setLastUpdatedTime] = useState('');\r\n\r\n    const allStatesData = (props.states.map(item => {\r\n        return { id: item.statecode, state: item.state, value: JSON.parse(item.active), confirmed: JSON.parse(item.confirmed), recovered: JSON.parse(item.recovered), deceased: JSON.parse(item.deaths), lastupdatedtime: new Date(item.lastupdatedtime).toLocaleString() }\r\n    }))\r\n\r\n    useEffect(() => {\r\n        if (props.states.length !== 0) {\r\n\r\n            const getHeatMapData2 = () => {\r\n                return allStatesData\r\n            };\r\n            setData(getHeatMapData2())\r\n        }\r\n    }, [props])\r\n\r\n\r\n    const gradientData = {\r\n        fromColor: COLOR_RANGE[0],\r\n        toColor: COLOR_RANGE[COLOR_RANGE.length - 1],\r\n        min: 0,\r\n        max: data.reduce((max, item) => (item.value > max ? item.value : max), 0)\r\n    };\r\n\r\n    const colorScale = scaleQuantile()\r\n        .domain(data.map(d => d.value))\r\n        .range(COLOR_RANGE);\r\n\r\n    const onMouseEnter = (geo, current = { value: 'NA' }) => {\r\n\r\n        return () => {\r\n            setTooltipContent(`${geo.properties.name}: ${current.value}`);\r\n            setActive(current.value)\r\n            setStateName(`${geo.properties.name}`)\r\n            setConfirmed(current.confirmed)\r\n            setRecovered(current.recovered)\r\n            setDeceased(current.deceased)\r\n            setStateCode(current.id)\r\n            setLastUpdatedTime(current.lastupdatedtime)\r\n        };\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        setTooltipContent('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <StateStats confirmed={confirmed} stateName={stateName} active={active} recovered={recovered} deceased={deceased} lastUpdatedTime={lastUpdatedTime} stateCode={stateCode} />\r\n            <ReactTooltip>{tooltipContent}</ReactTooltip>\r\n            <ComposableMap\r\n                projectionConfig={PROJECTION_CONFIG}\r\n                projection=\"geoMercator\"\r\n                width={420}\r\n                height={520}\r\n                data-tip=\"\"\r\n            >\r\n                <Geographies geography={INDIA_TOPO_JSON}>\r\n                    {({ geographies }) =>\r\n                        geographies.map(geo => {\r\n                            const current = data.find(s => s.id === geo.id);\r\n                            return (\r\n                                <Geography\r\n                                    key={geo.rsmKey}\r\n                                    geography={geo}\r\n                                    fill={current ? colorScale(current.value) : DEFAULT_COLOR}\r\n                                    style={geographyStyle}\r\n                                    onMouseEnter={onMouseEnter(geo, current)}\r\n                                    onMouseLeave={onMouseLeave}\r\n                                />\r\n                            );\r\n                        })\r\n                    }\r\n                </Geographies>\r\n            </ComposableMap>\r\n            <LinearGradient data={gradientData} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        states: state.stats.statesData\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(IndiaMap)"]},"metadata":{},"sourceType":"module"}