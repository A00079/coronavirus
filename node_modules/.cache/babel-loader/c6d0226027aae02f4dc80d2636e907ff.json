{"ast":null,"code":"import axios from\"axios\";export var GET_LIVE_STATS=\"GET_LIVE_STATS\";export var ERROR_LIVE_STATS=\"ERROR_LIVE_STATS\";export var FETCHING_LIVE_STATS=\"FETCHING_LIVE_STATS\";export var GET_STATES_DATA=\"GET_STATES_DATA\";export var GET_TIME_SERIES=\"GET_TIME_SERIES\";export var GET_TEST_SAMPLES=\"GET_TEST_SAMPLES\";export var GET_FACTOIDS=\"GET_FACTOIDS\";export var GET_UPDATES=\"GET_UPDATES\";export var getLiveStatsAction=function getLiveStatsAction(){return function(dispatch){dispatch({type:FETCHING_LIVE_STATS});var statsRequest=\"https://api.covid19india.org/data.json\";var factoidsRequest=\"https://api.covid19india.org/website_data.json\";var updatesRequest=\"https://api.covid19india.org/updatelog/log.json\";var statsResp=axios.get(statsRequest);var factoidsResp=axios.get(factoidsRequest);var updatesResp=axios.get(updatesRequest);axios.all([statsResp,factoidsResp,updatesResp]).then(axios.spread(function(){var allDataStats=arguments.length<=0?undefined:arguments[0];var allDataFactoids=arguments.length<=1?undefined:arguments[1];var allDataUpdates=arguments.length<=2?undefined:arguments[2];dispatch({type:GET_LIVE_STATS,payload:allDataStats.data.statewise[0]});dispatch({type:GET_STATES_DATA,payload:allDataStats.data.statewise.slice(1,-1)});dispatch({type:GET_TIME_SERIES,payload:allDataStats.data.cases_time_series});dispatch({type:GET_TEST_SAMPLES,payload:allDataStats.data.tested});dispatch({type:GET_FACTOIDS,payload:allDataFactoids.data.factoids});dispatch({type:GET_UPDATES,payload:allDataUpdates.data});})).catch(function(err){console.log(err);dispatch({type:ERROR_LIVE_STATS,payload:\"Error. Try again\"});});};};","map":{"version":3,"sources":["D:/Users/sagar/Desktop/projects/React projects/coronavirus/src/store/actions/statActions.js"],"names":["axios","GET_LIVE_STATS","ERROR_LIVE_STATS","FETCHING_LIVE_STATS","GET_STATES_DATA","GET_TIME_SERIES","GET_TEST_SAMPLES","GET_FACTOIDS","GET_UPDATES","getLiveStatsAction","dispatch","type","statsRequest","factoidsRequest","updatesRequest","statsResp","get","factoidsResp","updatesResp","all","then","spread","allDataStats","allDataFactoids","allDataUpdates","payload","data","statewise","slice","cases_time_series","tested","factoids","catch","err","console","log"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,gBAAvB,CACP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,kBAAzB,CACP,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,qBAA5B,CACP,MAAO,IAAMC,CAAAA,eAAe,CAAG,iBAAxB,CACP,MAAO,IAAMC,CAAAA,eAAe,CAAG,iBAAxB,CACP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,kBAAzB,CACP,MAAO,IAAMC,CAAAA,YAAY,CAAG,cAArB,CACP,MAAO,IAAMC,CAAAA,WAAW,CAAG,aAApB,CAKP,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CACtC,MAAO,UAACC,QAAD,CAAc,CACnBA,QAAQ,CAAC,CAAEC,IAAI,CAAER,mBAAR,CAAD,CAAR,CACA,GAAMS,CAAAA,YAAY,CAAG,wCAArB,CACA,GAAMC,CAAAA,eAAe,CAAG,gDAAxB,CACA,GAAMC,CAAAA,cAAc,CAAG,iDAAvB,CAEA,GAAMC,CAAAA,SAAS,CAAGf,KAAK,CAACgB,GAAN,CAAUJ,YAAV,CAAlB,CACA,GAAMK,CAAAA,YAAY,CAAGjB,KAAK,CAACgB,GAAN,CAAUH,eAAV,CAArB,CACA,GAAMK,CAAAA,WAAW,CAAGlB,KAAK,CAACgB,GAAN,CAAUF,cAAV,CAApB,CAEAd,KAAK,CACFmB,GADH,CACO,CAACJ,SAAD,CAAYE,YAAZ,CAA0BC,WAA1B,CADP,EAEGE,IAFH,CAGIpB,KAAK,CAACqB,MAAN,CAAa,UAAgB,CAC3B,GAAMC,CAAAA,YAAY,2CAAlB,CACA,GAAMC,CAAAA,eAAe,2CAArB,CACA,GAAMC,CAAAA,cAAc,2CAApB,CAEAd,QAAQ,CAAC,CACPC,IAAI,CAAEV,cADC,CAEPwB,OAAO,CAAEH,YAAY,CAACI,IAAb,CAAkBC,SAAlB,CAA4B,CAA5B,CAFF,CAAD,CAAR,CAIAjB,QAAQ,CAAC,CACPC,IAAI,CAAEP,eADC,CAEPqB,OAAO,CAAEH,YAAY,CAACI,IAAb,CAAkBC,SAAlB,CAA4BC,KAA5B,CAAkC,CAAlC,CAAqC,CAAC,CAAtC,CAFF,CAAD,CAAR,CAIAlB,QAAQ,CAAC,CACPC,IAAI,CAAEN,eADC,CAEPoB,OAAO,CAAEH,YAAY,CAACI,IAAb,CAAkBG,iBAFpB,CAAD,CAAR,CAIAnB,QAAQ,CAAC,CACPC,IAAI,CAAEL,gBADC,CAEPmB,OAAO,CAAEH,YAAY,CAACI,IAAb,CAAkBI,MAFpB,CAAD,CAAR,CAIApB,QAAQ,CAAC,CACPC,IAAI,CAAEJ,YADC,CAEPkB,OAAO,CAAEF,eAAe,CAACG,IAAhB,CAAqBK,QAFvB,CAAD,CAAR,CAIArB,QAAQ,CAAC,CACPC,IAAI,CAAEH,WADC,CAEPiB,OAAO,CAAED,cAAc,CAACE,IAFjB,CAAD,CAAR,CAID,CA7BD,CAHJ,EAkCGM,KAlCH,CAkCS,SAACC,GAAD,CAAS,CACdC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACAvB,QAAQ,CAAC,CAAEC,IAAI,CAAET,gBAAR,CAA0BuB,OAAO,CAAE,kBAAnC,CAAD,CAAR,CACD,CArCH,EAsCD,CAhDD,CAiDD,CAlDM","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const GET_LIVE_STATS = \"GET_LIVE_STATS\";\r\nexport const ERROR_LIVE_STATS = \"ERROR_LIVE_STATS\";\r\nexport const FETCHING_LIVE_STATS = \"FETCHING_LIVE_STATS\";\r\nexport const GET_STATES_DATA = \"GET_STATES_DATA\";\r\nexport const GET_TIME_SERIES = \"GET_TIME_SERIES\";\r\nexport const GET_TEST_SAMPLES = \"GET_TEST_SAMPLES\";\r\nexport const GET_FACTOIDS = \"GET_FACTOIDS\";\r\nexport const GET_UPDATES = \"GET_UPDATES\";\r\n\r\n\r\n\r\n\r\nexport const getLiveStatsAction = () => {\r\n  return (dispatch) => {\r\n    dispatch({ type: FETCHING_LIVE_STATS });\r\n    const statsRequest = \"https://api.covid19india.org/data.json\";\r\n    const factoidsRequest = \"https://api.covid19india.org/website_data.json\";\r\n    const updatesRequest = \"https://api.covid19india.org/updatelog/log.json\";\r\n\r\n    const statsResp = axios.get(statsRequest);\r\n    const factoidsResp = axios.get(factoidsRequest);\r\n    const updatesResp = axios.get(updatesRequest);\r\n\r\n    axios\r\n      .all([statsResp, factoidsResp, updatesResp])\r\n      .then(\r\n        axios.spread((...allData) => {\r\n          const allDataStats = allData[0];\r\n          const allDataFactoids = allData[1];\r\n          const allDataUpdates = allData[2];\r\n\r\n          dispatch({\r\n            type: GET_LIVE_STATS,\r\n            payload: allDataStats.data.statewise[0],\r\n          });\r\n          dispatch({\r\n            type: GET_STATES_DATA,\r\n            payload: allDataStats.data.statewise.slice(1, -1),\r\n          });\r\n          dispatch({\r\n            type: GET_TIME_SERIES,\r\n            payload: allDataStats.data.cases_time_series,\r\n          });\r\n          dispatch({\r\n            type: GET_TEST_SAMPLES,\r\n            payload: allDataStats.data.tested,\r\n          });\r\n          dispatch({\r\n            type: GET_FACTOIDS,\r\n            payload: allDataFactoids.data.factoids,\r\n          });\r\n          dispatch({\r\n            type: GET_UPDATES,\r\n            payload: allDataUpdates.data,\r\n          });\r\n        })\r\n      )\r\n      .catch((err) => {\r\n        console.log(err);\r\n        dispatch({ type: ERROR_LIVE_STATS, payload: \"Error. Try again\" });\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}